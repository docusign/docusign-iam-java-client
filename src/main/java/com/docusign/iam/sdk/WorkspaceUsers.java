/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.components.RevokeWorkspaceUserDetails;
import com.docusign.iam.sdk.models.components.WorkspaceUserForCreate;
import com.docusign.iam.sdk.models.components.WorkspaceUserForUpdate;
import com.docusign.iam.sdk.models.operations.AddWorkspaceUserRequest;
import com.docusign.iam.sdk.models.operations.AddWorkspaceUserRequestBuilder;
import com.docusign.iam.sdk.models.operations.AddWorkspaceUserResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUsersRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUsersRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUsersResponse;
import com.docusign.iam.sdk.models.operations.RestoreWorkspaceUserAccessRequest;
import com.docusign.iam.sdk.models.operations.RestoreWorkspaceUserAccessRequestBuilder;
import com.docusign.iam.sdk.models.operations.RestoreWorkspaceUserAccessResponse;
import com.docusign.iam.sdk.models.operations.RevokeWorkspaceUserAccessRequest;
import com.docusign.iam.sdk.models.operations.RevokeWorkspaceUserAccessRequestBuilder;
import com.docusign.iam.sdk.models.operations.RevokeWorkspaceUserAccessResponse;
import com.docusign.iam.sdk.models.operations.UpdateWorkspaceUserRequest;
import com.docusign.iam.sdk.models.operations.UpdateWorkspaceUserRequestBuilder;
import com.docusign.iam.sdk.models.operations.UpdateWorkspaceUserResponse;
import com.docusign.iam.sdk.operations.AddWorkspaceUser;
import com.docusign.iam.sdk.operations.GetWorkspaceUsers;
import com.docusign.iam.sdk.operations.RestoreWorkspaceUserAccess;
import com.docusign.iam.sdk.operations.RevokeWorkspaceUserAccess;
import com.docusign.iam.sdk.operations.UpdateWorkspaceUser;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class WorkspaceUsers {
    private final SDKConfiguration sdkConfiguration;

    WorkspaceUsers(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Retrieves the list of users in the given workspace
     * 
     * <p>This operations retrieves the users in a workspace. Users sent envelopes or assigned tasks will automatically be added to the workspace with the Participate role.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent requests.
     * 
     * @return The call builder
     */
    public GetWorkspaceUsersRequestBuilder getWorkspaceUsers() {
        return new GetWorkspaceUsersRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieves the list of users in the given workspace
     * 
     * <p>This operations retrieves the users in a workspace. Users sent envelopes or assigned tasks will automatically be added to the workspace with the Participate role.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceUsersResponse getWorkspaceUsers(GetWorkspaceUsersRequest request) throws Exception {
        return getWorkspaceUsers(request, Optional.empty());
    }

    /**
     * Retrieves the list of users in the given workspace
     * 
     * <p>This operations retrieves the users in a workspace. Users sent envelopes or assigned tasks will automatically be added to the workspace with the Participate role.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceUsersResponse getWorkspaceUsers(GetWorkspaceUsersRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetWorkspaceUsersRequest, GetWorkspaceUsersResponse> operation
              = new GetWorkspaceUsers.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Adds a user to the workspace by email address
     * 
     * <p>This operation manually adds an internal or external user to a specific workspace by email address. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned the Participate role. This operation is not typically needed for adding external participants to a Workspace as they will be automatically added as tasks are assigned.
     * 
     * <p>Available role IDs can be retrieved via the Assignable Roles operation on a workspace. If the `role_id` is not passed, the user is added with the Participate role.
     * 
     * @return The call builder
     */
    public AddWorkspaceUserRequestBuilder addWorkspaceUser() {
        return new AddWorkspaceUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Adds a user to the workspace by email address
     * 
     * <p>This operation manually adds an internal or external user to a specific workspace by email address. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned the Participate role. This operation is not typically needed for adding external participants to a Workspace as they will be automatically added as tasks are assigned.
     * 
     * <p>Available role IDs can be retrieved via the Assignable Roles operation on a workspace. If the `role_id` is not passed, the user is added with the Participate role.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWorkspaceUserResponse addWorkspaceUser(String accountId, String workspaceId) throws Exception {
        return addWorkspaceUser(accountId, workspaceId, Optional.empty(),
            Optional.empty());
    }

    /**
     * Adds a user to the workspace by email address
     * 
     * <p>This operation manually adds an internal or external user to a specific workspace by email address. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned the Participate role. This operation is not typically needed for adding external participants to a Workspace as they will be automatically added as tasks are assigned.
     * 
     * <p>Available role IDs can be retrieved via the Assignable Roles operation on a workspace. If the `role_id` is not passed, the user is added with the Participate role.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param workspaceUserForCreate 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWorkspaceUserResponse addWorkspaceUser(
            String accountId, String workspaceId,
            Optional<? extends WorkspaceUserForCreate> workspaceUserForCreate, Optional<Options> options) throws Exception {
        AddWorkspaceUserRequest request =
            AddWorkspaceUserRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .workspaceUserForCreate(workspaceUserForCreate)
                .build();
        RequestOperation<AddWorkspaceUserRequest, AddWorkspaceUserResponse> operation
              = new AddWorkspaceUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Updates the specified user's role
     * 
     * <p>This operation updates the specified user's role in the workspace. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned "External" roles.
     * 
     * @return The call builder
     */
    public UpdateWorkspaceUserRequestBuilder updateWorkspaceUser() {
        return new UpdateWorkspaceUserRequestBuilder(sdkConfiguration);
    }

    /**
     * Updates the specified user's role
     * 
     * <p>This operation updates the specified user's role in the workspace. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned "External" roles.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param userId The ID of the user to update
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWorkspaceUserResponse updateWorkspaceUser(
            String accountId, String workspaceId,
            String userId) throws Exception {
        return updateWorkspaceUser(accountId, workspaceId, userId,
            Optional.empty(), Optional.empty());
    }

    /**
     * Updates the specified user's role
     * 
     * <p>This operation updates the specified user's role in the workspace. Users within the account are considered "Internal" and may be assigned any role. Users outside the account are considered "External" and may only be assigned "External" roles.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param userId The ID of the user to update
     * @param workspaceUserForUpdate 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWorkspaceUserResponse updateWorkspaceUser(
            String accountId, String workspaceId,
            String userId, Optional<? extends WorkspaceUserForUpdate> workspaceUserForUpdate,
            Optional<Options> options) throws Exception {
        UpdateWorkspaceUserRequest request =
            UpdateWorkspaceUserRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .userId(userId)
                .workspaceUserForUpdate(workspaceUserForUpdate)
                .build();
        RequestOperation<UpdateWorkspaceUserRequest, UpdateWorkspaceUserResponse> operation
              = new UpdateWorkspaceUser.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revokes the specified user's access to the workspace
     * 
     * <p>This operation revokes the specified user's access to the workspace. The optional `revocation_date` may be set to schedule revocation in the future. If not specified, the revocation will be immediate.
     * 
     * @return The call builder
     */
    public RevokeWorkspaceUserAccessRequestBuilder revokeWorkspaceUserAccess() {
        return new RevokeWorkspaceUserAccessRequestBuilder(sdkConfiguration);
    }

    /**
     * Revokes the specified user's access to the workspace
     * 
     * <p>This operation revokes the specified user's access to the workspace. The optional `revocation_date` may be set to schedule revocation in the future. If not specified, the revocation will be immediate.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace to revoke access from
     * @param userId The ID of the user to be revoked from the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeWorkspaceUserAccessResponse revokeWorkspaceUserAccess(
            String accountId, String workspaceId,
            String userId) throws Exception {
        return revokeWorkspaceUserAccess(accountId, workspaceId, userId,
            Optional.empty(), Optional.empty());
    }

    /**
     * Revokes the specified user's access to the workspace
     * 
     * <p>This operation revokes the specified user's access to the workspace. The optional `revocation_date` may be set to schedule revocation in the future. If not specified, the revocation will be immediate.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace to revoke access from
     * @param userId The ID of the user to be revoked from the workspace
     * @param revokeWorkspaceUserDetails 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RevokeWorkspaceUserAccessResponse revokeWorkspaceUserAccess(
            String accountId, String workspaceId,
            String userId, Optional<? extends RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails,
            Optional<Options> options) throws Exception {
        RevokeWorkspaceUserAccessRequest request =
            RevokeWorkspaceUserAccessRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .userId(userId)
                .revokeWorkspaceUserDetails(revokeWorkspaceUserDetails)
                .build();
        RequestOperation<RevokeWorkspaceUserAccessRequest, RevokeWorkspaceUserAccessResponse> operation
              = new RevokeWorkspaceUserAccess.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Restores the specified user's access to the workspace
     * 
     * <p>This operation restores the specified user's access to the workspace. The user must have been previously revoked from the workspace. The access is immediately restored.
     * 
     * @return The call builder
     */
    public RestoreWorkspaceUserAccessRequestBuilder restoreWorkspaceUserAccess() {
        return new RestoreWorkspaceUserAccessRequestBuilder(sdkConfiguration);
    }

    /**
     * Restores the specified user's access to the workspace
     * 
     * <p>This operation restores the specified user's access to the workspace. The user must have been previously revoked from the workspace. The access is immediately restored.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace to restore access
     * @param userId The ID of the user to be restored to the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RestoreWorkspaceUserAccessResponse restoreWorkspaceUserAccess(
            String accountId, String workspaceId,
            String userId) throws Exception {
        return restoreWorkspaceUserAccess(accountId, workspaceId, userId,
            Optional.empty());
    }

    /**
     * Restores the specified user's access to the workspace
     * 
     * <p>This operation restores the specified user's access to the workspace. The user must have been previously revoked from the workspace. The access is immediately restored.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace to restore access
     * @param userId The ID of the user to be restored to the workspace
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RestoreWorkspaceUserAccessResponse restoreWorkspaceUserAccess(
            String accountId, String workspaceId,
            String userId, Optional<Options> options) throws Exception {
        RestoreWorkspaceUserAccessRequest request =
            RestoreWorkspaceUserAccessRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .userId(userId)
                .build();
        RequestOperation<RestoreWorkspaceUserAccessRequest, RestoreWorkspaceUserAccessResponse> operation
              = new RestoreWorkspaceUserAccess.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
