/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.operations;

import static com.docusign.iam.sdk.operations.Operations.RequestlessOperation;
import static com.docusign.iam.sdk.utils.Retries.NonRetryableException;

import com.docusign.iam.sdk.SDKConfiguration;
import com.docusign.iam.sdk.SecuritySource;
import com.docusign.iam.sdk.models.components.UserInfo;
import com.docusign.iam.sdk.models.errors.APIException;
import com.docusign.iam.sdk.models.errors.OAuthErrorResponse;
import com.docusign.iam.sdk.models.operations.GetUserInfoResponse;
import com.docusign.iam.sdk.utils.BackoffStrategy;
import com.docusign.iam.sdk.utils.HTTPClient;
import com.docusign.iam.sdk.utils.HTTPRequest;
import com.docusign.iam.sdk.utils.Hook.AfterErrorContextImpl;
import com.docusign.iam.sdk.utils.Hook.AfterSuccessContextImpl;
import com.docusign.iam.sdk.utils.Hook.BeforeRequestContextImpl;
import com.docusign.iam.sdk.utils.Options;
import com.docusign.iam.sdk.utils.Retries;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;


public class GetUserInfo {
    
    /**
     * GET_USER_INFO_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_USER_INFO_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final List<String> retryStatusCodes;
        final RetryConfig retryConfig;
        final HTTPClient client;

        public Base(
                SDKConfiguration sdkConfiguration, Optional<String> serverURL,
                Optional<Options> options) {
            this.sdkConfiguration = sdkConfiguration;
            this.baseUrl = serverURL
                    .filter(u -> !u.isBlank())
                    .orElse(Utils.templateUrl(
                        GET_USER_INFO_SERVERS[0], 
                        Map.of()));
            this.securitySource = this.sdkConfiguration.securitySource();
            options
                    .ifPresent(o -> o.validate(List.of(Options.Option.RETRY_CONFIG)));
            this.retryStatusCodes = List.of("5XX", "429");
            this.retryConfig = options
                    .flatMap(Options::retryConfig)
                    .or(sdkConfiguration::retryConfig)
                    .orElse(RetryConfig.builder().backoff(BackoffStrategy.builder()
                                    .initialInterval(500, TimeUnit.MILLISECONDS)
                                    .maxInterval(5000, TimeUnit.MILLISECONDS)
                                    .baseFactor((double) (1.5))
                                    .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                                    .retryConnectError(true)
                                    .build())
                            .build());
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        BeforeRequestContextImpl createBeforeRequestContext() {
            return new BeforeRequestContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "GetUserInfo",
                    java.util.Optional.of(java.util.List.of()),
                    securitySource());
        }

        AfterSuccessContextImpl createAfterSuccessContext() {
            return new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "GetUserInfo",
                    java.util.Optional.of(java.util.List.of()),
                    securitySource());
        }

        AfterErrorContextImpl createAfterErrorContext() {
            return new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "GetUserInfo",
                    java.util.Optional.of(java.util.List.of()),
                    securitySource());
        }
        HttpRequest buildRequest() throws Exception {
            String url = Utils.generateURL(
                    this.baseUrl,
                    "/oauth/userinfo");
            HTTPRequest req = new HTTPRequest(url, "GET");
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return req.build();
        }
    }

    public static class Sync extends Base
            implements RequestlessOperation<GetUserInfoResponse> {
        public Sync(
                SDKConfiguration sdkConfiguration, Optional<String> serverURL,
                Optional<Options> options) {
            super(
                  sdkConfiguration, serverURL,
                  options);
        }

        private HttpRequest onBuildRequest() throws Exception {
            HttpRequest req = buildRequest();
            return sdkConfiguration.hooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks().afterError(
                    createAfterErrorContext(),
                    Optional.ofNullable(response),
                    Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public HttpResponse<InputStream> doRequest() throws Exception {
            Retries retries = Retries.builder()
                    .action(() -> {
                        HttpRequest r;
                        try {
                            r = onBuildRequest();
                        } catch (Exception e) {
                            throw new NonRetryableException(e);
                        }
                        try {
                            HttpResponse<InputStream> httpRes = client.send(r);
                            if (Utils.statusCodeMatches(httpRes.statusCode(), "400", "4XX", "5XX")) {
                                return onError(httpRes, null);
                            }
                            return httpRes;
                        } catch (Exception e) {
                            return onError(null, e);
                        }
                    })
                    .retryConfig(retryConfig)
                    .statusCodes(retryStatusCodes)
                    .build();
            return onSuccess(retries.run());
        }


        @Override
        public GetUserInfoResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            GetUserInfoResponse.Builder resBuilder =
                    GetUserInfoResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            GetUserInfoResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    UserInfo out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withUserInfo(out);
                    return res;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "400")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    OAuthErrorResponse out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                throw new APIException(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                throw new APIException(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            throw new APIException(
                    response,
                    response.statusCode(),
                    "Unexpected status code received: " + response.statusCode(),
                    Utils.extractByteArrayFromBody(response));
        }
    }
}
