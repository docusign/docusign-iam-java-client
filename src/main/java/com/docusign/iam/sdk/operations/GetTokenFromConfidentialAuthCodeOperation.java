/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.operations;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.SDKConfiguration;
import com.docusign.iam.sdk.SecuritySource;
import com.docusign.iam.sdk.models.components.AuthorizationCodeGrantResponse;
import com.docusign.iam.sdk.models.components.ConfidentialAuthCodeGrantRequestBody;
import com.docusign.iam.sdk.models.errors.APIException;
import com.docusign.iam.sdk.models.errors.OAuthErrorResponse;
import com.docusign.iam.sdk.models.operations.GetTokenFromConfidentialAuthCodeResponse;
import com.docusign.iam.sdk.models.operations.GetTokenFromConfidentialAuthCodeSecurity;
import com.docusign.iam.sdk.utils.BackoffStrategy;
import com.docusign.iam.sdk.utils.HTTPClient;
import com.docusign.iam.sdk.utils.HTTPRequest;
import com.docusign.iam.sdk.utils.Hook.AfterErrorContextImpl;
import com.docusign.iam.sdk.utils.Hook.AfterSuccessContextImpl;
import com.docusign.iam.sdk.utils.Hook.BeforeRequestContextImpl;
import com.docusign.iam.sdk.utils.Options;
import com.docusign.iam.sdk.utils.Retries.NonRetryableException;
import com.docusign.iam.sdk.utils.Retries;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.SerializedBody;
import com.docusign.iam.sdk.utils.Utils.JsonShape;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;


public class GetTokenFromConfidentialAuthCodeOperation implements RequestOperation<ConfidentialAuthCodeGrantRequestBody, GetTokenFromConfidentialAuthCodeResponse> {
    
    /**
     * GET_TOKEN_FROM_CONFIDENTIAL_AUTH_CODE_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_TOKEN_FROM_CONFIDENTIAL_AUTH_CODE_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };
    
    private final SDKConfiguration sdkConfiguration;
    private final GetTokenFromConfidentialAuthCodeSecurity security;
    private final Optional<String> serverURL;
    private final Optional<Options> options;

    public GetTokenFromConfidentialAuthCodeOperation(
            SDKConfiguration sdkConfiguration,
            GetTokenFromConfidentialAuthCodeSecurity security,
            Optional<String> serverURL,
            Optional<Options> options) {
        this.sdkConfiguration = sdkConfiguration;
        this.security = security;
        this.serverURL = serverURL;
        this.options = options;
    }
    
    @Override
    public HttpResponse<InputStream> doRequest(ConfidentialAuthCodeGrantRequestBody request) throws Exception {
        options.ifPresent(o -> o.validate(List.of(Options.Option.RETRY_CONFIG)));
        String baseUrl = serverURL
                .filter(u -> !u.isBlank())
                .orElse(Utils.templateUrl(
                        GET_TOKEN_FROM_CONFIDENTIAL_AUTH_CODE_SERVERS[0], 
                        Map.of()));
        String url = Utils.generateURL(
                baseUrl,
                "/oauth/token#FromConfidentialAuthCode");
        
        HTTPRequest req = new HTTPRequest(url, "POST");
        Object convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<ConfidentialAuthCodeGrantRequestBody>() {});
        SerializedBody serializedRequestBody = Utils.serializeRequestBody(
                convertedRequest, 
                "request",
                "form",
                false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(Optional.ofNullable(serializedRequestBody));
        req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        // hooks will be passed method level security only
        Optional<SecuritySource> hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(req, security);
        HTTPClient client = this.sdkConfiguration.client();
        HTTPRequest finalReq = req;
        RetryConfig retryConfig = options
                .flatMap(Options::retryConfig)
                .or(this.sdkConfiguration::retryConfig)
                .orElse(RetryConfig.builder()
                        .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(5000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                        .build());
        List<String> statusCodes = new ArrayList<>();
        statusCodes.add("5XX");
        statusCodes.add("429");
        Retries retries = Retries.builder()
            .action(() -> {
                HttpRequest r = null;
                try {
                    r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                baseUrl,
                                "GetTokenFromConfidentialAuthCode", 
                                java.util.Optional.empty(), 
                                hookSecuritySource),
                            finalReq.build());
                } catch (Exception e) {
                    throw new NonRetryableException(e);
                }
                try {
                    return client.send(r);
                } catch (Exception e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                baseUrl,
                                "GetTokenFromConfidentialAuthCode",
                                 java.util.Optional.empty(),
                                 hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(e));
                }
            })
            .retryConfig(retryConfig)
            .statusCodes(statusCodes)
            .build();
        HttpResponse<InputStream> httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                          baseUrl,
                         "GetTokenFromConfidentialAuthCode", 
                         java.util.Optional.empty(), 
                         hookSecuritySource),
                     retries.run());
    
        return httpRes;
    }

    @Override
    public GetTokenFromConfidentialAuthCodeResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
        String contentType = response
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetTokenFromConfidentialAuthCodeResponse.Builder resBuilder = 
            GetTokenFromConfidentialAuthCodeResponse
                .builder()
                .contentType(contentType)
                .statusCode(response.statusCode())
                .rawResponse(response);

        GetTokenFromConfidentialAuthCodeResponse res = resBuilder.build();
        
        if (Utils.statusCodeMatches(response.statusCode(), "200")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                AuthorizationCodeGrantResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                res.withAuthorizationCodeGrantResponse(out);
                return res;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "400")) {
            if (Utils.contentTypeMatches(contentType, "application/json")) {
                OAuthErrorResponse out = Utils.mapper().readValue(
                    response.body(),
                    new TypeReference<>() {
                    });
                throw out;
            } else {
                throw new APIException(
                    response, 
                    response.statusCode(), 
                    "Unexpected content-type received: " + contentType, 
                    Utils.extractByteArrayFromBody(response));
            }
        }
        if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    response, 
                    response.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(response));
        }
        throw new APIException(
            response, 
            response.statusCode(), 
            "Unexpected status code received: " + response.statusCode(), 
            Utils.extractByteArrayFromBody(response));
    }
}
