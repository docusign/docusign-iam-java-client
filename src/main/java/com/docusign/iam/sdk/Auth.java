/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import com.docusign.iam.sdk.models.components.AuthorizationCodeGrantResponse;
import com.docusign.iam.sdk.models.components.ConfidentialAuthCodeGrantRequestBody;
import com.docusign.iam.sdk.models.components.JWTGrantResponse;
import com.docusign.iam.sdk.models.components.PublicAuthCodeGrantRequestBody;
import com.docusign.iam.sdk.models.components.UserInfo;
import com.docusign.iam.sdk.models.errors.APIException;
import com.docusign.iam.sdk.models.errors.OAuthErrorResponse;
import com.docusign.iam.sdk.models.operations.AuthorizationCodeGrant;
import com.docusign.iam.sdk.models.operations.GetTokenFromConfidentialAuthCodeRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetTokenFromConfidentialAuthCodeResponse;
import com.docusign.iam.sdk.models.operations.GetTokenFromConfidentialAuthCodeSecurity;
import com.docusign.iam.sdk.models.operations.GetTokenFromJWTGrantRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetTokenFromJWTGrantResponse;
import com.docusign.iam.sdk.models.operations.GetTokenFromPublicAuthCodeRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetTokenFromPublicAuthCodeResponse;
import com.docusign.iam.sdk.models.operations.GetTokenFromRefreshTokenRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetTokenFromRefreshTokenResponse;
import com.docusign.iam.sdk.models.operations.GetTokenFromRefreshTokenResponseBody;
import com.docusign.iam.sdk.models.operations.GetTokenFromRefreshTokenSecurity;
import com.docusign.iam.sdk.models.operations.GetUserInfoRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetUserInfoResponse;
import com.docusign.iam.sdk.models.operations.JWTGrant;
import com.docusign.iam.sdk.models.operations.SDKMethodInterfaces.*;
import com.docusign.iam.sdk.utils.BackoffStrategy;
import com.docusign.iam.sdk.utils.HTTPClient;
import com.docusign.iam.sdk.utils.HTTPRequest;
import com.docusign.iam.sdk.utils.Hook.AfterErrorContextImpl;
import com.docusign.iam.sdk.utils.Hook.AfterSuccessContextImpl;
import com.docusign.iam.sdk.utils.Hook.BeforeRequestContextImpl;
import com.docusign.iam.sdk.utils.Options;
import com.docusign.iam.sdk.utils.Retries.NonRetryableException;
import com.docusign.iam.sdk.utils.Retries;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.SerializedBody;
import com.docusign.iam.sdk.utils.Utils.JsonShape;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

public class Auth implements
            MethodCallGetTokenFromConfidentialAuthCode,
            MethodCallGetTokenFromPublicAuthCode,
            MethodCallGetTokenFromJWTGrant,
            MethodCallGetTokenFromRefreshToken,
            MethodCallGetUserInfo {
    
    /**
     * GET_TOKEN_FROM_CONFIDENTIAL_AUTH_CODE_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_TOKEN_FROM_CONFIDENTIAL_AUTH_CODE_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };
    
    /**
     * GET_TOKEN_FROM_PUBLIC_AUTH_CODE_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_TOKEN_FROM_PUBLIC_AUTH_CODE_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };
    
    /**
     * GET_TOKEN_FROM_JWT_GRANT_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_TOKEN_FROM_JWT_GRANT_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };
    
    /**
     * GET_TOKEN_FROM_REFRESH_TOKEN_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_TOKEN_FROM_REFRESH_TOKEN_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };
    
    /**
     * GET_USER_INFO_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_USER_INFO_SERVERS = {
        /**
         * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
         */
        "https://account-d.docusign.com",
        /**
         * For the production environment, the URI is https://account.docusign.com/oauth/token
         */
        "https://account.docusign.com",
    };

    private final SDKConfiguration sdkConfiguration;

    Auth(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API using the confidential flow.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * You do not need an integration key to obtain an access token.
     * 
     * @return The call builder
     */
    public GetTokenFromConfidentialAuthCodeRequestBuilder getTokenFromConfidentialAuthCode() {
        return new GetTokenFromConfidentialAuthCodeRequestBuilder(this);
    }

    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API using the confidential flow.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromConfidentialAuthCodeResponse getTokenFromConfidentialAuthCode(
            ConfidentialAuthCodeGrantRequestBody request,
            GetTokenFromConfidentialAuthCodeSecurity security) throws Exception {
        return getTokenFromConfidentialAuthCode(request, security, Optional.empty(), Optional.empty());
    }
    
    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API using the confidential flow.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param security The security details to use for authentication.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromConfidentialAuthCodeResponse getTokenFromConfidentialAuthCode(
            ConfidentialAuthCodeGrantRequestBody request,
            GetTokenFromConfidentialAuthCodeSecurity security,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        final String _baseUrl;
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        } else {
            _baseUrl = Utils.templateUrl(GET_TOKEN_FROM_CONFIDENTIAL_AUTH_CODE_SERVERS[0], new HashMap<String, String>());
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/oauth/token#FromConfidentialAuthCode");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<ConfidentialAuthCodeGrantRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "form",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.client();
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig().isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig().get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(5000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        _statusCodes.add("429");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromConfidentialAuthCode", 
                                Optional.empty(), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromConfidentialAuthCode",
                                 Optional.empty(),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                         _baseUrl,
                         "GetTokenFromConfidentialAuthCode", 
                         Optional.empty(), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetTokenFromConfidentialAuthCodeResponse.Builder _resBuilder = 
            GetTokenFromConfidentialAuthCodeResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetTokenFromConfidentialAuthCodeResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                AuthorizationCodeGrantResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<AuthorizationCodeGrantResponse>() {});
                _res.withAuthorizationCodeGrantResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OAuthErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OAuthErrorResponse>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }


    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API using the confidential flow.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * You do not need an integration key to obtain an access token.
     * 
     * @return The call builder
     */
    public GetTokenFromPublicAuthCodeRequestBuilder getTokenFromPublicAuthCode() {
        return new GetTokenFromPublicAuthCodeRequestBuilder(this);
    }

    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API using the confidential flow.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromPublicAuthCodeResponse getTokenFromPublicAuthCode(
            PublicAuthCodeGrantRequestBody request) throws Exception {
        return getTokenFromPublicAuthCode(request, Optional.empty(), Optional.empty());
    }
    
    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API using the confidential flow.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromPublicAuthCodeResponse getTokenFromPublicAuthCode(
            PublicAuthCodeGrantRequestBody request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        final String _baseUrl;
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        } else {
            _baseUrl = Utils.templateUrl(GET_TOKEN_FROM_PUBLIC_AUTH_CODE_SERVERS[0], new HashMap<String, String>());
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/oauth/token#FromPublicAuthCode");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<PublicAuthCodeGrantRequestBody>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "form",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = Optional.of(this.sdkConfiguration.securitySource());
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource().getSecurity());
        HTTPClient _client = this.sdkConfiguration.client();
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig().isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig().get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(5000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        _statusCodes.add("429");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromPublicAuthCode", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromPublicAuthCode",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                         _baseUrl,
                         "GetTokenFromPublicAuthCode", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetTokenFromPublicAuthCodeResponse.Builder _resBuilder = 
            GetTokenFromPublicAuthCodeResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetTokenFromPublicAuthCodeResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                AuthorizationCodeGrantResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<AuthorizationCodeGrantResponse>() {});
                _res.withAuthorizationCodeGrantResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OAuthErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OAuthErrorResponse>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }


    /**
     * Obtains an access token from the Docusign API using a JWT grant.
     * 
     * <p>Obtains an access token from the Docusign API.
     * 
     * <p>For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * 
     * <p>For the production environment, the URI is https://account.docusign.com/oauth/token
     * 
     * <p>You do not need an integration key to obtain an access token.
     * 
     * @return The call builder
     */
    public GetTokenFromJWTGrantRequestBuilder getTokenFromJwtGrant() {
        return new GetTokenFromJWTGrantRequestBuilder(this);
    }

    /**
     * Obtains an access token from the Docusign API using a JWT grant.
     * 
     * <p>Obtains an access token from the Docusign API.
     * 
     * <p>For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * 
     * <p>For the production environment, the URI is https://account.docusign.com/oauth/token
     * 
     * <p>You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromJWTGrantResponse getTokenFromJwtGrant(
            JWTGrant request) throws Exception {
        return getTokenFromJwtGrant(request, Optional.empty(), Optional.empty());
    }
    
    /**
     * Obtains an access token from the Docusign API using a JWT grant.
     * 
     * <p>Obtains an access token from the Docusign API.
     * 
     * <p>For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * 
     * <p>For the production environment, the URI is https://account.docusign.com/oauth/token
     * 
     * <p>You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromJWTGrantResponse getTokenFromJwtGrant(
            JWTGrant request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        final String _baseUrl;
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        } else {
            _baseUrl = Utils.templateUrl(GET_TOKEN_FROM_JWT_GRANT_SERVERS[0], new HashMap<String, String>());
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/oauth/token#FromJWTGrant");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<JWTGrant>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "form",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = Optional.of(this.sdkConfiguration.securitySource());
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource().getSecurity());
        HTTPClient _client = this.sdkConfiguration.client();
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig().isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig().get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(5000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        _statusCodes.add("429");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromJWTGrant", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromJWTGrant",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                         _baseUrl,
                         "GetTokenFromJWTGrant", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetTokenFromJWTGrantResponse.Builder _resBuilder = 
            GetTokenFromJWTGrantResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetTokenFromJWTGrantResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                JWTGrantResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<JWTGrantResponse>() {});
                _res.withJWTGrantResponse(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OAuthErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OAuthErrorResponse>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }


    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * 
     * <p>You do not need an integration key to obtain an access token.
     * 
     * @return The call builder
     */
    public GetTokenFromRefreshTokenRequestBuilder getTokenFromRefreshToken() {
        return new GetTokenFromRefreshTokenRequestBuilder(this);
    }

    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * 
     * <p>You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromRefreshTokenResponse getTokenFromRefreshToken(
            AuthorizationCodeGrant request,
            GetTokenFromRefreshTokenSecurity security) throws Exception {
        return getTokenFromRefreshToken(request, security, Optional.empty(), Optional.empty());
    }
    
    /**
     * Obtains an access token from the Docusign API using an authorization code.
     * 
     * <p>Obtains an access token from the Docusign API.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/token
     * For the production environment, the URI is https://account.docusign.com/oauth/token
     * 
     * <p>You do not need an integration key to obtain an access token.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param security The security details to use for authentication.
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenFromRefreshTokenResponse getTokenFromRefreshToken(
            AuthorizationCodeGrant request,
            GetTokenFromRefreshTokenSecurity security,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        final String _baseUrl;
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        } else {
            _baseUrl = Utils.templateUrl(GET_TOKEN_FROM_REFRESH_TOKEN_SERVERS[0], new HashMap<String, String>());
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/oauth/token#FromRefreshToken");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<AuthorizationCodeGrant>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "form",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.client();
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig().isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig().get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(5000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        _statusCodes.add("429");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromRefreshToken", 
                                Optional.empty(), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetTokenFromRefreshToken",
                                 Optional.empty(),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                         _baseUrl,
                         "GetTokenFromRefreshToken", 
                         Optional.empty(), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetTokenFromRefreshTokenResponse.Builder _resBuilder = 
            GetTokenFromRefreshTokenResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetTokenFromRefreshTokenResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetTokenFromRefreshTokenResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetTokenFromRefreshTokenResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OAuthErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OAuthErrorResponse>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }


    /**
     * Get user information
     * 
     * <p>This endpoint retrieves user information from the Docusign API using an access token.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/userinfo
     * For the production environment, the URI is https://account.docusign.com/oauth/userinfo
     * 
     * @return The call builder
     */
    public GetUserInfoRequestBuilder getUserInfo() {
        return new GetUserInfoRequestBuilder(this);
    }

    /**
     * Get user information
     * 
     * <p>This endpoint retrieves user information from the Docusign API using an access token.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/userinfo
     * For the production environment, the URI is https://account.docusign.com/oauth/userinfo
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserInfoResponse getUserInfoDirect() throws Exception {
        return getUserInfo(Optional.empty(), Optional.empty());
    }
    
    /**
     * Get user information
     * 
     * <p>This endpoint retrieves user information from the Docusign API using an access token.
     * For the developer environment, the URI is https://account-d.docusign.com/oauth/userinfo
     * For the production environment, the URI is https://account.docusign.com/oauth/userinfo
     * 
     * @param serverURL Overrides the server URL.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserInfoResponse getUserInfo(
            Optional<String> serverURL,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        final String _baseUrl;
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            _baseUrl = serverURL.get();
        } else {
            _baseUrl = Utils.templateUrl(GET_USER_INFO_SERVERS[0], new HashMap<String, String>());
        }
        String _url = Utils.generateURL(
                _baseUrl,
                "/oauth/userinfo");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        
        Optional<SecuritySource> _hookSecuritySource = Optional.of(this.sdkConfiguration.securitySource());
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource().getSecurity());
        HTTPClient _client = this.sdkConfiguration.client();
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig().isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig().get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(5000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(30000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        _statusCodes.add("429");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetUserInfo", 
                                Optional.of(List.of()), 
                                _hookSecuritySource),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                this.sdkConfiguration,
                                _baseUrl,
                                "GetUserInfo",
                                 Optional.of(List.of()),
                                 _hookSecuritySource), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         this.sdkConfiguration,
                         _baseUrl,
                         "GetUserInfo", 
                         Optional.of(List.of()), 
                         _hookSecuritySource),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetUserInfoResponse.Builder _resBuilder = 
            GetUserInfoResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetUserInfoResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UserInfo _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UserInfo>() {});
                _res.withUserInfo(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                OAuthErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<OAuthErrorResponse>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
