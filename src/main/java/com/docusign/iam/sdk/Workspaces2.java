/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.components.CreateWorkspaceBody;
import com.docusign.iam.sdk.models.components.WorkspaceEnvelopeForCreate;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceEnvelopeRequest;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceEnvelopeRequestBuilder;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceEnvelopeResponse;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceRequest;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceRequestBuilder;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceAssignableRolesRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceAssignableRolesRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceAssignableRolesResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceEnvelopesRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceEnvelopesRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceEnvelopesResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspacesRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspacesRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspacesResponse;
import com.docusign.iam.sdk.operations.CreateWorkspace;
import com.docusign.iam.sdk.operations.CreateWorkspaceEnvelope;
import com.docusign.iam.sdk.operations.GetWorkspace;
import com.docusign.iam.sdk.operations.GetWorkspaceAssignableRoles;
import com.docusign.iam.sdk.operations.GetWorkspaceEnvelopes;
import com.docusign.iam.sdk.operations.GetWorkspaces;
import com.docusign.iam.sdk.utils.Headers;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;


public class Workspaces2 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    Workspaces2(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Gets workspaces available to the calling user
     * 
     * <p>This operation retrieves a list of workspaces available to the calling user. It returns basic
     * information about each workspace, including its unique identifier (ID), name, and metadata such as
     * when it was created and by whom.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @return The call builder
     */
    public GetWorkspacesRequestBuilder getWorkspaces() {
        return new GetWorkspacesRequestBuilder(sdkConfiguration);
    }

    /**
     * Gets workspaces available to the calling user
     * 
     * <p>This operation retrieves a list of workspaces available to the calling user. It returns basic
     * information about each workspace, including its unique identifier (ID), name, and metadata such as
     * when it was created and by whom.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @param accountId The ID of the account
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspacesResponse getWorkspaces(String accountId) throws Exception {
        return getWorkspaces(accountId, Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Gets workspaces available to the calling user
     * 
     * <p>This operation retrieves a list of workspaces available to the calling user. It returns basic
     * information about each workspace, including its unique identifier (ID), name, and metadata such as
     * when it was created and by whom.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @param accountId The ID of the account
     * @param count Number of workspaces to return. Defaults to the maximum which is 100
     * @param startPosition Position of the first item in the total results. Defaults to 0
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspacesResponse getWorkspaces(
            String accountId, Optional<Integer> count,
            Optional<Integer> startPosition, Optional<Options> options) throws Exception {
        GetWorkspacesRequest request =
            GetWorkspacesRequest
                .builder()
                .accountId(accountId)
                .count(count)
                .startPosition(startPosition)
                .build();
        RequestOperation<GetWorkspacesRequest, GetWorkspacesResponse> operation
              = new GetWorkspaces.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Creates a new workspace
     * 
     * <p>This operation creates a new workspace. The calling user is automatically added as a member of the
     * workspace with the role of Manage.
     * 
     * <p>Once created, the `workspace_id` is utilized to associate tasks such as envelopes. Participants on
     * tasks will automatically be added to the workspace with the Participate role.
     * 
     * @return The call builder
     */
    public CreateWorkspaceRequestBuilder createWorkspace() {
        return new CreateWorkspaceRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates a new workspace
     * 
     * <p>This operation creates a new workspace. The calling user is automatically added as a member of the
     * workspace with the role of Manage.
     * 
     * <p>Once created, the `workspace_id` is utilized to associate tasks such as envelopes. Participants on
     * tasks will automatically be added to the workspace with the Participate role.
     * 
     * @param accountId The ID of the account
     * @param createWorkspaceBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkspaceResponse createWorkspace(String accountId, CreateWorkspaceBody createWorkspaceBody) throws Exception {
        return createWorkspace(accountId, createWorkspaceBody, Optional.empty());
    }

    /**
     * Creates a new workspace
     * 
     * <p>This operation creates a new workspace. The calling user is automatically added as a member of the
     * workspace with the role of Manage.
     * 
     * <p>Once created, the `workspace_id` is utilized to associate tasks such as envelopes. Participants on
     * tasks will automatically be added to the workspace with the Participate role.
     * 
     * @param accountId The ID of the account
     * @param createWorkspaceBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkspaceResponse createWorkspace(
            String accountId, CreateWorkspaceBody createWorkspaceBody,
            Optional<Options> options) throws Exception {
        CreateWorkspaceRequest request =
            CreateWorkspaceRequest
                .builder()
                .accountId(accountId)
                .createWorkspaceBody(createWorkspaceBody)
                .build();
        RequestOperation<CreateWorkspaceRequest, CreateWorkspaceResponse> operation
              = new CreateWorkspace.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns details about the workspace
     * 
     * <p>This operation retrieves details about a specific workspace. It returns the workspace's unique
     * identifier (ID), name, and metadata such as when it was created and by whom.
     * 
     * @return The call builder
     */
    public GetWorkspaceRequestBuilder getWorkspace() {
        return new GetWorkspaceRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns details about the workspace
     * 
     * <p>This operation retrieves details about a specific workspace. It returns the workspace's unique
     * identifier (ID), name, and metadata such as when it was created and by whom.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceResponse getWorkspace(String accountId, String workspaceId) throws Exception {
        return getWorkspace(accountId, workspaceId, Optional.empty());
    }

    /**
     * Returns details about the workspace
     * 
     * <p>This operation retrieves details about a specific workspace. It returns the workspace's unique
     * identifier (ID), name, and metadata such as when it was created and by whom.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceResponse getWorkspace(
            String accountId, String workspaceId,
            Optional<Options> options) throws Exception {
        GetWorkspaceRequest request =
            GetWorkspaceRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .build();
        RequestOperation<GetWorkspaceRequest, GetWorkspaceResponse> operation
              = new GetWorkspace.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns the roles the caller can assign to workspace users
     * 
     * <p>This operation returns roles that are assignable to users in the workspace based on the caller's
     * role in the workspace. Roles available include Manage (internal) and Participate (external).
     * Participate is the default role.
     * 
     * <p>Users within the account are considered "Internal" and may be assigned any role. Users outside the
     * account are considered "External" and may only be assigned "External" roles.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @return The call builder
     */
    public GetWorkspaceAssignableRolesRequestBuilder getWorkspaceAssignableRoles() {
        return new GetWorkspaceAssignableRolesRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns the roles the caller can assign to workspace users
     * 
     * <p>This operation returns roles that are assignable to users in the workspace based on the caller's
     * role in the workspace. Roles available include Manage (internal) and Participate (external).
     * Participate is the default role.
     * 
     * <p>Users within the account are considered "Internal" and may be assigned any role. Users outside the
     * account are considered "External" and may only be assigned "External" roles.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceAssignableRolesResponse getWorkspaceAssignableRoles(GetWorkspaceAssignableRolesRequest request) throws Exception {
        return getWorkspaceAssignableRoles(request, Optional.empty());
    }

    /**
     * Returns the roles the caller can assign to workspace users
     * 
     * <p>This operation returns roles that are assignable to users in the workspace based on the caller's
     * role in the workspace. Roles available include Manage (internal) and Participate (external).
     * Participate is the default role.
     * 
     * <p>Users within the account are considered "Internal" and may be assigned any role. Users outside the
     * account are considered "External" and may only be assigned "External" roles.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceAssignableRolesResponse getWorkspaceAssignableRoles(GetWorkspaceAssignableRolesRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetWorkspaceAssignableRolesRequest, GetWorkspaceAssignableRolesResponse> operation
              = new GetWorkspaceAssignableRoles.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Creates an envelope with the given documents. Returns the ID of the created envelope
     * 
     * <p>This operation creates an envelope associated with the workspace. Using the `envelope_id` from the
     * response, the [eSignature API](https://developers.docusign.com/docs/esign-rest-api/) may be utilized
     * to modify the envelope and ultimately send it.
     * 
     * <p>Envelope recipients will automatically be granted Participate access to the workspace. Envelope
     * recipients will receive consolidated notifications from Docusign Workspaces rather than standard
     * individual envelope notifications.
     * 
     * <p>Docusign Connect events may be utilized to receive updates to individual envelope events.
     * 
     * <p>The `envelopes` operation on the workspace may be utilized to query the status of all the envelopes
     * in the workspace.
     * 
     * <p>When `document_ids` is empty or excluded, the envelope is created without any documents from the
     * workspace. eSignature API calls, including adding documents and templates, may be utilized to modify
     * the envelope before it is sent. The eSignature API must be utilized to send the envelope.
     * 
     * @return The call builder
     */
    public CreateWorkspaceEnvelopeRequestBuilder createWorkspaceEnvelope() {
        return new CreateWorkspaceEnvelopeRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates an envelope with the given documents. Returns the ID of the created envelope
     * 
     * <p>This operation creates an envelope associated with the workspace. Using the `envelope_id` from the
     * response, the [eSignature API](https://developers.docusign.com/docs/esign-rest-api/) may be utilized
     * to modify the envelope and ultimately send it.
     * 
     * <p>Envelope recipients will automatically be granted Participate access to the workspace. Envelope
     * recipients will receive consolidated notifications from Docusign Workspaces rather than standard
     * individual envelope notifications.
     * 
     * <p>Docusign Connect events may be utilized to receive updates to individual envelope events.
     * 
     * <p>The `envelopes` operation on the workspace may be utilized to query the status of all the envelopes
     * in the workspace.
     * 
     * <p>When `document_ids` is empty or excluded, the envelope is created without any documents from the
     * workspace. eSignature API calls, including adding documents and templates, may be utilized to modify
     * the envelope before it is sent. The eSignature API must be utilized to send the envelope.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param workspaceEnvelopeForCreate 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkspaceEnvelopeResponse createWorkspaceEnvelope(
            String accountId, String workspaceId,
            WorkspaceEnvelopeForCreate workspaceEnvelopeForCreate) throws Exception {
        return createWorkspaceEnvelope(accountId, workspaceId, workspaceEnvelopeForCreate,
            Optional.empty());
    }

    /**
     * Creates an envelope with the given documents. Returns the ID of the created envelope
     * 
     * <p>This operation creates an envelope associated with the workspace. Using the `envelope_id` from the
     * response, the [eSignature API](https://developers.docusign.com/docs/esign-rest-api/) may be utilized
     * to modify the envelope and ultimately send it.
     * 
     * <p>Envelope recipients will automatically be granted Participate access to the workspace. Envelope
     * recipients will receive consolidated notifications from Docusign Workspaces rather than standard
     * individual envelope notifications.
     * 
     * <p>Docusign Connect events may be utilized to receive updates to individual envelope events.
     * 
     * <p>The `envelopes` operation on the workspace may be utilized to query the status of all the envelopes
     * in the workspace.
     * 
     * <p>When `document_ids` is empty or excluded, the envelope is created without any documents from the
     * workspace. eSignature API calls, including adding documents and templates, may be utilized to modify
     * the envelope before it is sent. The eSignature API must be utilized to send the envelope.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param workspaceEnvelopeForCreate 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkspaceEnvelopeResponse createWorkspaceEnvelope(
            String accountId, String workspaceId,
            WorkspaceEnvelopeForCreate workspaceEnvelopeForCreate, Optional<Options> options) throws Exception {
        CreateWorkspaceEnvelopeRequest request =
            CreateWorkspaceEnvelopeRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .workspaceEnvelopeForCreate(workspaceEnvelopeForCreate)
                .build();
        RequestOperation<CreateWorkspaceEnvelopeRequest, CreateWorkspaceEnvelopeResponse> operation
              = new CreateWorkspaceEnvelope.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns the envelopes associated with the given workspace
     * 
     * <p>This operation retrieves a list of all associated workspace envelopes. The
     * [`status`](https://support.docusign.com/s/document-item?bundleId=oeq1643226594604&amp;topicId=wdm1578456348227.html)
     * on each envelope can be used to track envelope progress. Statuses are formatted as ProperCase.
     * 
     * <p>e.g. `Sent`, `WaitingForOthers`, `Completed`, etc.
     * 
     * <p>Based on the permissions of the caller, additional envelope details may be retrieved from the
     * [eSignature API](https://developers.docusign.com/docs/esign-rest-api/) using the `envelope_id`.
     * 
     * @return The call builder
     */
    public GetWorkspaceEnvelopesRequestBuilder getWorkspaceEnvelopes() {
        return new GetWorkspaceEnvelopesRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns the envelopes associated with the given workspace
     * 
     * <p>This operation retrieves a list of all associated workspace envelopes. The
     * [`status`](https://support.docusign.com/s/document-item?bundleId=oeq1643226594604&amp;topicId=wdm1578456348227.html)
     * on each envelope can be used to track envelope progress. Statuses are formatted as ProperCase.
     * 
     * <p>e.g. `Sent`, `WaitingForOthers`, `Completed`, etc.
     * 
     * <p>Based on the permissions of the caller, additional envelope details may be retrieved from the
     * [eSignature API](https://developers.docusign.com/docs/esign-rest-api/) using the `envelope_id`.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceEnvelopesResponse getWorkspaceEnvelopes(String accountId, String workspaceId) throws Exception {
        return getWorkspaceEnvelopes(accountId, workspaceId, Optional.empty());
    }

    /**
     * Returns the envelopes associated with the given workspace
     * 
     * <p>This operation retrieves a list of all associated workspace envelopes. The
     * [`status`](https://support.docusign.com/s/document-item?bundleId=oeq1643226594604&amp;topicId=wdm1578456348227.html)
     * on each envelope can be used to track envelope progress. Statuses are formatted as ProperCase.
     * 
     * <p>e.g. `Sent`, `WaitingForOthers`, `Completed`, etc.
     * 
     * <p>Based on the permissions of the caller, additional envelope details may be retrieved from the
     * [eSignature API](https://developers.docusign.com/docs/esign-rest-api/) using the `envelope_id`.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceEnvelopesResponse getWorkspaceEnvelopes(
            String accountId, String workspaceId,
            Optional<Options> options) throws Exception {
        GetWorkspaceEnvelopesRequest request =
            GetWorkspaceEnvelopesRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .build();
        RequestOperation<GetWorkspaceEnvelopesRequest, GetWorkspaceEnvelopesResponse> operation
              = new GetWorkspaceEnvelopes.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
