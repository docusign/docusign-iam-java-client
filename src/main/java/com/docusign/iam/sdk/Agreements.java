/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.operations.CreateAgreementSummaryRequest;
import com.docusign.iam.sdk.models.operations.CreateAgreementSummaryRequestBuilder;
import com.docusign.iam.sdk.models.operations.CreateAgreementSummaryResponse;
import com.docusign.iam.sdk.models.operations.DeleteAgreementRequest;
import com.docusign.iam.sdk.models.operations.DeleteAgreementRequestBuilder;
import com.docusign.iam.sdk.models.operations.DeleteAgreementResponse;
import com.docusign.iam.sdk.models.operations.GetAgreementRequest;
import com.docusign.iam.sdk.models.operations.GetAgreementRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetAgreementResponse;
import com.docusign.iam.sdk.models.operations.GetAgreementsListRequest;
import com.docusign.iam.sdk.models.operations.GetAgreementsListRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetAgreementsListResponse;
import com.docusign.iam.sdk.operations.CreateAgreementSummary;
import com.docusign.iam.sdk.operations.DeleteAgreement;
import com.docusign.iam.sdk.operations.GetAgreement;
import com.docusign.iam.sdk.operations.GetAgreementsList;
import com.docusign.iam.sdk.utils.Headers;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class Agreements {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    Agreements(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Retrieve a list of agreements
     * 
     * <p>This operation retrieves a list of all agreements available in the system. It provides a high-level
     * overview of each agreement, including its unique identifier (`id`), title, type, status, and
     * involved parties. The list also includes important metadata, such as the agreement's creation and
     * modification timestamps, and information on the agreement's source system (e.g., eSign, CLM).
     * 
     * <p>Each agreement entry includes essential details that allow users to quickly assess the agreements
     * and determine which ones are relevant for their needs. For example, the agreement's status can help
     * users understand whether an agreement is still active, pending, or completed.
     * 
     * <p>The response also includes provisions that outline the key legal, financial, and lifecycle
     * conditions, along with custom user-defined fields, providing a comprehensive understanding of each
     * agreement.
     * 
     * <p>### Use Cases:
     * - **Retrieving a list of agreements for integration into external systems**: Export or sync
     * agreement data into other platforms (e.g., CRM, ERP systems) to align business processes across
     * different tools.
     * - **Providing data for RAG (Retrieval-Augmented Generation) applications or Copilots**: The list of
     * agreements can be a valuable data source for AI/LLM-based applications that answer user queries
     * about agreements.
     * It allows Copilots to understand what agreements exist and offer insights based on their details.
     * - **Filtering agreements by type or status**: Determine which agreements are active, pending, or
     * completed, and gather a summary of key provisions across multiple agreements.
     * - **Auditing or reporting**: Generate a report on agreements based on type, status, or date created,
     * helping with compliance tracking and internal reviews.
     * - **Metadata tracking**: Track when agreements were created, modified, and by whom, ensuring proper
     * governance and version control.
     * 
     * <p>### Key Features:
     * - **Comprehensive Agreement Overview**: Provides high-level visibility into all agreements, with
     * essential details for each one, including status, type, and involved parties.
     * - **Metadata and Provisions**: Returns important metadata and provisions (legal, financial, and
     * custom) for each agreement, helping users understand their obligations and contract terms.
     * - **Source System Information**: Captures details about where the agreement originated (e.g., eSign,
     * CLM), making it easier to integrate and track agreements across different business systems.
     * - **Data for AI Applications**: The operation is designed to support LLM-powered apps, making it
     * ideal for use in RAG-based applications and Copilots that query agreements for decision-making or
     * information purposes.
     * 
     * @return The call builder
     */
    public GetAgreementsListRequestBuilder getAgreementsList() {
        return new GetAgreementsListRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a list of agreements
     * 
     * <p>This operation retrieves a list of all agreements available in the system. It provides a high-level
     * overview of each agreement, including its unique identifier (`id`), title, type, status, and
     * involved parties. The list also includes important metadata, such as the agreement's creation and
     * modification timestamps, and information on the agreement's source system (e.g., eSign, CLM).
     * 
     * <p>Each agreement entry includes essential details that allow users to quickly assess the agreements
     * and determine which ones are relevant for their needs. For example, the agreement's status can help
     * users understand whether an agreement is still active, pending, or completed.
     * 
     * <p>The response also includes provisions that outline the key legal, financial, and lifecycle
     * conditions, along with custom user-defined fields, providing a comprehensive understanding of each
     * agreement.
     * 
     * <p>### Use Cases:
     * - **Retrieving a list of agreements for integration into external systems**: Export or sync
     * agreement data into other platforms (e.g., CRM, ERP systems) to align business processes across
     * different tools.
     * - **Providing data for RAG (Retrieval-Augmented Generation) applications or Copilots**: The list of
     * agreements can be a valuable data source for AI/LLM-based applications that answer user queries
     * about agreements.
     * It allows Copilots to understand what agreements exist and offer insights based on their details.
     * - **Filtering agreements by type or status**: Determine which agreements are active, pending, or
     * completed, and gather a summary of key provisions across multiple agreements.
     * - **Auditing or reporting**: Generate a report on agreements based on type, status, or date created,
     * helping with compliance tracking and internal reviews.
     * - **Metadata tracking**: Track when agreements were created, modified, and by whom, ensuring proper
     * governance and version control.
     * 
     * <p>### Key Features:
     * - **Comprehensive Agreement Overview**: Provides high-level visibility into all agreements, with
     * essential details for each one, including status, type, and involved parties.
     * - **Metadata and Provisions**: Returns important metadata and provisions (legal, financial, and
     * custom) for each agreement, helping users understand their obligations and contract terms.
     * - **Source System Information**: Captures details about where the agreement originated (e.g., eSign,
     * CLM), making it easier to integrate and track agreements across different business systems.
     * - **Data for AI Applications**: The operation is designed to support LLM-powered apps, making it
     * ideal for use in RAG-based applications and Copilots that query agreements for decision-making or
     * information purposes.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgreementsListResponse getAgreementsList(GetAgreementsListRequest request) throws Exception {
        return getAgreementsList(request, Optional.empty());
    }

    /**
     * Retrieve a list of agreements
     * 
     * <p>This operation retrieves a list of all agreements available in the system. It provides a high-level
     * overview of each agreement, including its unique identifier (`id`), title, type, status, and
     * involved parties. The list also includes important metadata, such as the agreement's creation and
     * modification timestamps, and information on the agreement's source system (e.g., eSign, CLM).
     * 
     * <p>Each agreement entry includes essential details that allow users to quickly assess the agreements
     * and determine which ones are relevant for their needs. For example, the agreement's status can help
     * users understand whether an agreement is still active, pending, or completed.
     * 
     * <p>The response also includes provisions that outline the key legal, financial, and lifecycle
     * conditions, along with custom user-defined fields, providing a comprehensive understanding of each
     * agreement.
     * 
     * <p>### Use Cases:
     * - **Retrieving a list of agreements for integration into external systems**: Export or sync
     * agreement data into other platforms (e.g., CRM, ERP systems) to align business processes across
     * different tools.
     * - **Providing data for RAG (Retrieval-Augmented Generation) applications or Copilots**: The list of
     * agreements can be a valuable data source for AI/LLM-based applications that answer user queries
     * about agreements.
     * It allows Copilots to understand what agreements exist and offer insights based on their details.
     * - **Filtering agreements by type or status**: Determine which agreements are active, pending, or
     * completed, and gather a summary of key provisions across multiple agreements.
     * - **Auditing or reporting**: Generate a report on agreements based on type, status, or date created,
     * helping with compliance tracking and internal reviews.
     * - **Metadata tracking**: Track when agreements were created, modified, and by whom, ensuring proper
     * governance and version control.
     * 
     * <p>### Key Features:
     * - **Comprehensive Agreement Overview**: Provides high-level visibility into all agreements, with
     * essential details for each one, including status, type, and involved parties.
     * - **Metadata and Provisions**: Returns important metadata and provisions (legal, financial, and
     * custom) for each agreement, helping users understand their obligations and contract terms.
     * - **Source System Information**: Captures details about where the agreement originated (e.g., eSign,
     * CLM), making it easier to integrate and track agreements across different business systems.
     * - **Data for AI Applications**: The operation is designed to support LLM-powered apps, making it
     * ideal for use in RAG-based applications and Copilots that query agreements for decision-making or
     * information purposes.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgreementsListResponse getAgreementsList(GetAgreementsListRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetAgreementsListRequest, GetAgreementsListResponse> operation
              = new GetAgreementsList.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve detailed information about a specific agreement
     * 
     * <p>This operation retrieves detailed information about a specific agreement, identified by its unique
     * `id`. The response provides a comprehensive view of the agreement, including its title, type,
     * status, summary, and the full list of involved parties.
     * 
     * <p>In addition to general details, the operation returns provisions that define the agreement's legal,
     * financial, lifecycle, and custom conditions. It also provides key metadata, such as creation and
     * modification timestamps, related agreements, and user-defined or custom attributes, which help
     * represent the structure and context of the agreement.
     * 
     * <p>The operation is essential for retrieving the full context of an agreement, enabling users to
     * understand the contract's scope, key provisions, and the legal or financial obligations that have
     * been agreed upon.
     * 
     * <p>### Use Cases:
     * - **Integrating agreement data into external systems**: Sync detailed agreement information, such as
     * legal and financial provisions, into external systems like ERP, CRM, or contract management tools to
     * streamline workflows.
     * - **Providing detailed data for RAG (Retrieval-Augmented Generation) applications or Copilots**:
     * Retrieve detailed agreement data for use in LLM-based applications that answer specific user queries
     * about their agreements, such as the status of a contract, its provisions, or involved parties.
     * - **Retrieving the complete details of a specific agreement**: Use the full details of the
     * agreement, including legal and financial provisions, for auditing, compliance, or review purposes.
     * - **Accessing agreement provisions for verification**: Verify compliance with specific legal or
     * financial terms of the agreement, ensuring that all parties are following the agreed-upon
     * conditions.
     * - **Tracking agreement changes and history**: Fetch metadata and related agreements to understand
     * the evolution of an agreement, including modifications, associated agreements, and additional
     * context provided by custom fields.
     * - **Reviewing user-defined or custom attributes**: Examine custom fields or attributes to get more
     * context about the agreement, particularly where the business has defined custom provisions or
     * attributes.
     * 
     * <p>### Key Features:
     * - **Detailed Agreement Overview**: Provides a comprehensive view of a specific agreement, including
     * its title, type, status, summary, and more.
     * - **Provisions for Legal, Financial, and Lifecycle Conditions**: Includes the full set of provisions
     * that define the terms and conditions of the agreement, making it ideal for compliance and auditing
     * purposes.
     * - **Metadata and History**: Tracks the agreement’s history through metadata such as creation and
     * modification dates and user-defined fields.
     * - **Data Source for AI Applications**: Enables LLM-based applications to access granular agreement
     * data, providing AI/ML-based solutions (such as Copilots) with the necessary context to answer
     * detailed queries about an agreement.
     * - **Involved Parties and Related Agreements**: Lists all parties involved and related agreements,
     * allowing users to see all associated legal documents and relationships between agreements.
     * 
     * @return The call builder
     */
    public GetAgreementRequestBuilder getAgreement() {
        return new GetAgreementRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve detailed information about a specific agreement
     * 
     * <p>This operation retrieves detailed information about a specific agreement, identified by its unique
     * `id`. The response provides a comprehensive view of the agreement, including its title, type,
     * status, summary, and the full list of involved parties.
     * 
     * <p>In addition to general details, the operation returns provisions that define the agreement's legal,
     * financial, lifecycle, and custom conditions. It also provides key metadata, such as creation and
     * modification timestamps, related agreements, and user-defined or custom attributes, which help
     * represent the structure and context of the agreement.
     * 
     * <p>The operation is essential for retrieving the full context of an agreement, enabling users to
     * understand the contract's scope, key provisions, and the legal or financial obligations that have
     * been agreed upon.
     * 
     * <p>### Use Cases:
     * - **Integrating agreement data into external systems**: Sync detailed agreement information, such as
     * legal and financial provisions, into external systems like ERP, CRM, or contract management tools to
     * streamline workflows.
     * - **Providing detailed data for RAG (Retrieval-Augmented Generation) applications or Copilots**:
     * Retrieve detailed agreement data for use in LLM-based applications that answer specific user queries
     * about their agreements, such as the status of a contract, its provisions, or involved parties.
     * - **Retrieving the complete details of a specific agreement**: Use the full details of the
     * agreement, including legal and financial provisions, for auditing, compliance, or review purposes.
     * - **Accessing agreement provisions for verification**: Verify compliance with specific legal or
     * financial terms of the agreement, ensuring that all parties are following the agreed-upon
     * conditions.
     * - **Tracking agreement changes and history**: Fetch metadata and related agreements to understand
     * the evolution of an agreement, including modifications, associated agreements, and additional
     * context provided by custom fields.
     * - **Reviewing user-defined or custom attributes**: Examine custom fields or attributes to get more
     * context about the agreement, particularly where the business has defined custom provisions or
     * attributes.
     * 
     * <p>### Key Features:
     * - **Detailed Agreement Overview**: Provides a comprehensive view of a specific agreement, including
     * its title, type, status, summary, and more.
     * - **Provisions for Legal, Financial, and Lifecycle Conditions**: Includes the full set of provisions
     * that define the terms and conditions of the agreement, making it ideal for compliance and auditing
     * purposes.
     * - **Metadata and History**: Tracks the agreement’s history through metadata such as creation and
     * modification dates and user-defined fields.
     * - **Data Source for AI Applications**: Enables LLM-based applications to access granular agreement
     * data, providing AI/ML-based solutions (such as Copilots) with the necessary context to answer
     * detailed queries about an agreement.
     * - **Involved Parties and Related Agreements**: Lists all parties involved and related agreements,
     * allowing users to see all associated legal documents and relationships between agreements.
     * 
     * @param accountId 
     * @param agreementId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgreementResponse getAgreement(String accountId, String agreementId) throws Exception {
        return getAgreement(accountId, agreementId, Optional.empty());
    }

    /**
     * Retrieve detailed information about a specific agreement
     * 
     * <p>This operation retrieves detailed information about a specific agreement, identified by its unique
     * `id`. The response provides a comprehensive view of the agreement, including its title, type,
     * status, summary, and the full list of involved parties.
     * 
     * <p>In addition to general details, the operation returns provisions that define the agreement's legal,
     * financial, lifecycle, and custom conditions. It also provides key metadata, such as creation and
     * modification timestamps, related agreements, and user-defined or custom attributes, which help
     * represent the structure and context of the agreement.
     * 
     * <p>The operation is essential for retrieving the full context of an agreement, enabling users to
     * understand the contract's scope, key provisions, and the legal or financial obligations that have
     * been agreed upon.
     * 
     * <p>### Use Cases:
     * - **Integrating agreement data into external systems**: Sync detailed agreement information, such as
     * legal and financial provisions, into external systems like ERP, CRM, or contract management tools to
     * streamline workflows.
     * - **Providing detailed data for RAG (Retrieval-Augmented Generation) applications or Copilots**:
     * Retrieve detailed agreement data for use in LLM-based applications that answer specific user queries
     * about their agreements, such as the status of a contract, its provisions, or involved parties.
     * - **Retrieving the complete details of a specific agreement**: Use the full details of the
     * agreement, including legal and financial provisions, for auditing, compliance, or review purposes.
     * - **Accessing agreement provisions for verification**: Verify compliance with specific legal or
     * financial terms of the agreement, ensuring that all parties are following the agreed-upon
     * conditions.
     * - **Tracking agreement changes and history**: Fetch metadata and related agreements to understand
     * the evolution of an agreement, including modifications, associated agreements, and additional
     * context provided by custom fields.
     * - **Reviewing user-defined or custom attributes**: Examine custom fields or attributes to get more
     * context about the agreement, particularly where the business has defined custom provisions or
     * attributes.
     * 
     * <p>### Key Features:
     * - **Detailed Agreement Overview**: Provides a comprehensive view of a specific agreement, including
     * its title, type, status, summary, and more.
     * - **Provisions for Legal, Financial, and Lifecycle Conditions**: Includes the full set of provisions
     * that define the terms and conditions of the agreement, making it ideal for compliance and auditing
     * purposes.
     * - **Metadata and History**: Tracks the agreement’s history through metadata such as creation and
     * modification dates and user-defined fields.
     * - **Data Source for AI Applications**: Enables LLM-based applications to access granular agreement
     * data, providing AI/ML-based solutions (such as Copilots) with the necessary context to answer
     * detailed queries about an agreement.
     * - **Involved Parties and Related Agreements**: Lists all parties involved and related agreements,
     * allowing users to see all associated legal documents and relationships between agreements.
     * 
     * @param accountId 
     * @param agreementId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAgreementResponse getAgreement(
            String accountId, String agreementId,
            Optional<Options> options) throws Exception {
        GetAgreementRequest request =
            GetAgreementRequest
                .builder()
                .accountId(accountId)
                .agreementId(agreementId)
                .build();
        RequestOperation<GetAgreementRequest, GetAgreementResponse> operation
              = new GetAgreement.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete a specific agreement
     * 
     * <p>This operation safely deletes an agreement. This action conforms to GDPR and CCPA compliance
     * requirements.
     * 
     * @return The call builder
     */
    public DeleteAgreementRequestBuilder deleteAgreement() {
        return new DeleteAgreementRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete a specific agreement
     * 
     * <p>This operation safely deletes an agreement. This action conforms to GDPR and CCPA compliance
     * requirements.
     * 
     * @param accountId 
     * @param agreementId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteAgreementResponse deleteAgreement(String accountId, String agreementId) throws Exception {
        return deleteAgreement(accountId, agreementId, Optional.empty());
    }

    /**
     * Delete a specific agreement
     * 
     * <p>This operation safely deletes an agreement. This action conforms to GDPR and CCPA compliance
     * requirements.
     * 
     * @param accountId 
     * @param agreementId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteAgreementResponse deleteAgreement(
            String accountId, String agreementId,
            Optional<Options> options) throws Exception {
        DeleteAgreementRequest request =
            DeleteAgreementRequest
                .builder()
                .accountId(accountId)
                .agreementId(agreementId)
                .build();
        RequestOperation<DeleteAgreementRequest, DeleteAgreementResponse> operation
              = new DeleteAgreement.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create an AI-generated summary of an agreement document
     * 
     * <p>This operation request an AI-generated summary of the specified agreement document.
     * The summary is intended to provide a concise overview of the original agreement’s content
     * and key points; however, it may not capture all details or legal nuances.
     * 
     * <p>**Important**: By invoking this operation, you acknowledge and accept the
     * [Docusign AI Terms and
     * Conditions](https://www.docusign.com/legal/terms-and-conditions/ai-attachment-docusign-services).
     * Please refer to the original agreement for any legally binding information.
     * 
     * @return The call builder
     */
    public CreateAgreementSummaryRequestBuilder createAgreementSummary() {
        return new CreateAgreementSummaryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an AI-generated summary of an agreement document
     * 
     * <p>This operation request an AI-generated summary of the specified agreement document.
     * The summary is intended to provide a concise overview of the original agreement’s content
     * and key points; however, it may not capture all details or legal nuances.
     * 
     * <p>**Important**: By invoking this operation, you acknowledge and accept the
     * [Docusign AI Terms and
     * Conditions](https://www.docusign.com/legal/terms-and-conditions/ai-attachment-docusign-services).
     * Please refer to the original agreement for any legally binding information.
     * 
     * @param accountId 
     * @param agreementId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAgreementSummaryResponse createAgreementSummary(String accountId, String agreementId) throws Exception {
        return createAgreementSummary(accountId, agreementId, Optional.empty());
    }

    /**
     * Create an AI-generated summary of an agreement document
     * 
     * <p>This operation request an AI-generated summary of the specified agreement document.
     * The summary is intended to provide a concise overview of the original agreement’s content
     * and key points; however, it may not capture all details or legal nuances.
     * 
     * <p>**Important**: By invoking this operation, you acknowledge and accept the
     * [Docusign AI Terms and
     * Conditions](https://www.docusign.com/legal/terms-and-conditions/ai-attachment-docusign-services).
     * Please refer to the original agreement for any legally binding information.
     * 
     * @param accountId 
     * @param agreementId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAgreementSummaryResponse createAgreementSummary(
            String accountId, String agreementId,
            Optional<Options> options) throws Exception {
        CreateAgreementSummaryRequest request =
            CreateAgreementSummaryRequest
                .builder()
                .accountId(accountId)
                .agreementId(agreementId)
                .build();
        RequestOperation<CreateAgreementSummaryRequest, CreateAgreementSummaryResponse> operation
              = new CreateAgreementSummary.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
