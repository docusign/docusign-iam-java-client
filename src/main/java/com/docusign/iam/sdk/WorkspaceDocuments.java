/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.components.AddWorkspaceDocumentRequest;
import com.docusign.iam.sdk.models.operations.AddWorkspaceDocumentRequestBuilder;
import com.docusign.iam.sdk.models.operations.AddWorkspaceDocumentResponse;
import com.docusign.iam.sdk.models.operations.DeleteWorkspaceDocumentRequest;
import com.docusign.iam.sdk.models.operations.DeleteWorkspaceDocumentRequestBuilder;
import com.docusign.iam.sdk.models.operations.DeleteWorkspaceDocumentResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentContentsRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentContentsRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentContentsResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentsRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentsRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceDocumentsResponse;
import com.docusign.iam.sdk.operations.AddWorkspaceDocument;
import com.docusign.iam.sdk.operations.DeleteWorkspaceDocument;
import com.docusign.iam.sdk.operations.GetWorkspaceDocument;
import com.docusign.iam.sdk.operations.GetWorkspaceDocumentContents;
import com.docusign.iam.sdk.operations.GetWorkspaceDocuments;
import com.docusign.iam.sdk.utils.Headers;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class WorkspaceDocuments {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    WorkspaceDocuments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Get documents in the workspace accessible to the calling user
     * 
     * <p>This operation retrieves the documents in the workspace that are accessible to the calling user.
     * Documents may be added directly or automatically through tasks such as envelopes. Documents may be
     * used to create envelopes.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @return The call builder
     */
    public GetWorkspaceDocumentsRequestBuilder getWorkspaceDocuments() {
        return new GetWorkspaceDocumentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get documents in the workspace accessible to the calling user
     * 
     * <p>This operation retrieves the documents in the workspace that are accessible to the calling user.
     * Documents may be added directly or automatically through tasks such as envelopes. Documents may be
     * used to create envelopes.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceDocumentsResponse getWorkspaceDocuments(GetWorkspaceDocumentsRequest request) throws Exception {
        return getWorkspaceDocuments(request, Optional.empty());
    }

    /**
     * Get documents in the workspace accessible to the calling user
     * 
     * <p>This operation retrieves the documents in the workspace that are accessible to the calling user.
     * Documents may be added directly or automatically through tasks such as envelopes. Documents may be
     * used to create envelopes.
     * 
     * <p>Pagination is supported by passing `start_position` and `count` in the request. The response will
     * include `resultSetSize`, `start_position`, and `end_position` which may be utilized for subsequent
     * requests.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceDocumentsResponse getWorkspaceDocuments(GetWorkspaceDocumentsRequest request, Optional<Options> options) throws Exception {
        RequestOperation<GetWorkspaceDocumentsRequest, GetWorkspaceDocumentsResponse> operation
              = new GetWorkspaceDocuments.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add a document to a workspace via file contents upload
     * 
     * <p>This operation adds a document to a workspace via file contents upload. The file is passed in the
     * request body as a multipart/form-data file. The file name is used as the document name.
     * 
     * <p>Once added, it may be used to create an envelope associated with the workspace.
     * 
     * @return The call builder
     */
    public AddWorkspaceDocumentRequestBuilder addWorkspaceDocument() {
        return new AddWorkspaceDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a document to a workspace via file contents upload
     * 
     * <p>This operation adds a document to a workspace via file contents upload. The file is passed in the
     * request body as a multipart/form-data file. The file name is used as the document name.
     * 
     * <p>Once added, it may be used to create an envelope associated with the workspace.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWorkspaceDocumentResponse addWorkspaceDocument(String accountId, String workspaceId) throws Exception {
        return addWorkspaceDocument(accountId, workspaceId, Optional.empty(),
            Optional.empty());
    }

    /**
     * Add a document to a workspace via file contents upload
     * 
     * <p>This operation adds a document to a workspace via file contents upload. The file is passed in the
     * request body as a multipart/form-data file. The file name is used as the document name.
     * 
     * <p>Once added, it may be used to create an envelope associated with the workspace.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param addWorkspaceDocumentRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWorkspaceDocumentResponse addWorkspaceDocument(
            String accountId, String workspaceId,
            Optional<? extends AddWorkspaceDocumentRequest> addWorkspaceDocumentRequest, Optional<Options> options) throws Exception {
        com.docusign.iam.sdk.models.operations.AddWorkspaceDocumentRequest request =
            com.docusign.iam.sdk.models.operations.AddWorkspaceDocumentRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .addWorkspaceDocumentRequest(addWorkspaceDocumentRequest)
                .build();
        RequestOperation<com.docusign.iam.sdk.models.operations.AddWorkspaceDocumentRequest, AddWorkspaceDocumentResponse> operation
              = new AddWorkspaceDocument.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get information about the document
     * 
     * <p>This operation retrieves information about the document. The response includes the document ID,
     * name, and metadata.
     * 
     * @return The call builder
     */
    public GetWorkspaceDocumentRequestBuilder getWorkspaceDocument() {
        return new GetWorkspaceDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Get information about the document
     * 
     * <p>This operation retrieves information about the document. The response includes the document ID,
     * name, and metadata.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param documentId The ID of the document
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceDocumentResponse getWorkspaceDocument(
            String accountId, String workspaceId,
            String documentId) throws Exception {
        return getWorkspaceDocument(accountId, workspaceId, documentId,
            Optional.empty());
    }

    /**
     * Get information about the document
     * 
     * <p>This operation retrieves information about the document. The response includes the document ID,
     * name, and metadata.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param documentId The ID of the document
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceDocumentResponse getWorkspaceDocument(
            String accountId, String workspaceId,
            String documentId, Optional<Options> options) throws Exception {
        GetWorkspaceDocumentRequest request =
            GetWorkspaceDocumentRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .documentId(documentId)
                .build();
        RequestOperation<GetWorkspaceDocumentRequest, GetWorkspaceDocumentResponse> operation
              = new GetWorkspaceDocument.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deletes a document in the workspace
     * 
     * <p>This operation permanently deletes a document by ID.
     * 
     * @return The call builder
     */
    public DeleteWorkspaceDocumentRequestBuilder deleteWorkspaceDocument() {
        return new DeleteWorkspaceDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Deletes a document in the workspace
     * 
     * <p>This operation permanently deletes a document by ID.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param documentId The ID of the document
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWorkspaceDocumentResponse deleteWorkspaceDocument(
            String accountId, String workspaceId,
            String documentId) throws Exception {
        return deleteWorkspaceDocument(accountId, workspaceId, documentId,
            Optional.empty());
    }

    /**
     * Deletes a document in the workspace
     * 
     * <p>This operation permanently deletes a document by ID.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param documentId The ID of the document
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWorkspaceDocumentResponse deleteWorkspaceDocument(
            String accountId, String workspaceId,
            String documentId, Optional<Options> options) throws Exception {
        DeleteWorkspaceDocumentRequest request =
            DeleteWorkspaceDocumentRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .documentId(documentId)
                .build();
        RequestOperation<DeleteWorkspaceDocumentRequest, DeleteWorkspaceDocumentResponse> operation
              = new DeleteWorkspaceDocument.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get the file contents of the document
     * 
     * <p>This operation retrieves the file contents of the document. The file is returned as a stream in the
     * response body. The Content-Disposition response header contains the document name as the `filename`.
     * 
     * @return The call builder
     */
    public GetWorkspaceDocumentContentsRequestBuilder getWorkspaceDocumentContents() {
        return new GetWorkspaceDocumentContentsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get the file contents of the document
     * 
     * <p>This operation retrieves the file contents of the document. The file is returned as a stream in the
     * response body. The Content-Disposition response header contains the document name as the `filename`.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param documentId The ID of the document
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceDocumentContentsResponse getWorkspaceDocumentContents(
            String accountId, String workspaceId,
            String documentId) throws Exception {
        return getWorkspaceDocumentContents(accountId, workspaceId, documentId,
            Optional.empty());
    }

    /**
     * Get the file contents of the document
     * 
     * <p>This operation retrieves the file contents of the document. The file is returned as a stream in the
     * response body. The Content-Disposition response header contains the document name as the `filename`.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param documentId The ID of the document
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceDocumentContentsResponse getWorkspaceDocumentContents(
            String accountId, String workspaceId,
            String documentId, Optional<Options> options) throws Exception {
        GetWorkspaceDocumentContentsRequest request =
            GetWorkspaceDocumentContentsRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .documentId(documentId)
                .build();
        RequestOperation<GetWorkspaceDocumentContentsRequest, GetWorkspaceDocumentContentsResponse> operation
              = new GetWorkspaceDocumentContents.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
