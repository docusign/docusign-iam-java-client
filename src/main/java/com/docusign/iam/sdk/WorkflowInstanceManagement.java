/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.operations.CancelWorkflowInstanceRequest;
import com.docusign.iam.sdk.models.operations.CancelWorkflowInstanceRequestBuilder;
import com.docusign.iam.sdk.models.operations.CancelWorkflowInstanceResponse;
import com.docusign.iam.sdk.models.operations.GetWorkflowInstanceRequest;
import com.docusign.iam.sdk.models.operations.GetWorkflowInstanceRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkflowInstanceResponse;
import com.docusign.iam.sdk.models.operations.GetWorkflowInstancesListRequest;
import com.docusign.iam.sdk.models.operations.GetWorkflowInstancesListRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkflowInstancesListResponse;
import com.docusign.iam.sdk.operations.CancelWorkflowInstance;
import com.docusign.iam.sdk.operations.GetWorkflowInstance;
import com.docusign.iam.sdk.operations.GetWorkflowInstancesList;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class WorkflowInstanceManagement {
    private final SDKConfiguration sdkConfiguration;

    WorkflowInstanceManagement(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Retrieve All Workflow Instances
     * 
     * <p>This operation retrieves a list of all available Maestro workflow instances. It returns basic information
     * about each workflow instance, including its unique identifier (`id`), name, status, timestamps, and
     * additional metadata.
     * 
     * <p>The response provides key details that help users understand what workflow instances are in progress
     * or completed, and the relevant data for each. Each workflow instance entry also includes metadata, such
     * as who started it, when it was last modified, and how many steps have been completed.
     * 
     * <p>### Use Cases:
     * - Listing all available workflow instances for manual or automated review
     * - Monitoring which workflow instances are currently running or have finished
     * - Gathering basic metadata about workflow instances for auditing, logging, or reporting purposes
     * 
     * <p>### Key Features:
     * - **Comprehensive Instance Overview**: Provides a full list of workflow instances, giving visibility
     * 
     * <p>  into all ongoing and completed workflows within the Maestro platform
     * - **Metadata for Tracking**: Includes helpful metadata like creation time, last modification date,
     * 
     * <p>  and user details to support audit trails
     * - **Scalable and Future-Proof**: Designed to handle growing numbers of workflow instances as the
     * 
     * <p>  platform scales
     * 
     * @return The call builder
     */
    public GetWorkflowInstancesListRequestBuilder getWorkflowInstancesList() {
        return new GetWorkflowInstancesListRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve All Workflow Instances
     * 
     * <p>This operation retrieves a list of all available Maestro workflow instances. It returns basic information
     * about each workflow instance, including its unique identifier (`id`), name, status, timestamps, and
     * additional metadata.
     * 
     * <p>The response provides key details that help users understand what workflow instances are in progress
     * or completed, and the relevant data for each. Each workflow instance entry also includes metadata, such
     * as who started it, when it was last modified, and how many steps have been completed.
     * 
     * <p>### Use Cases:
     * - Listing all available workflow instances for manual or automated review
     * - Monitoring which workflow instances are currently running or have finished
     * - Gathering basic metadata about workflow instances for auditing, logging, or reporting purposes
     * 
     * <p>### Key Features:
     * - **Comprehensive Instance Overview**: Provides a full list of workflow instances, giving visibility
     * 
     * <p>  into all ongoing and completed workflows within the Maestro platform
     * - **Metadata for Tracking**: Includes helpful metadata like creation time, last modification date,
     * 
     * <p>  and user details to support audit trails
     * - **Scalable and Future-Proof**: Designed to handle growing numbers of workflow instances as the
     * 
     * <p>  platform scales
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowInstancesListResponse getWorkflowInstancesList(String accountId, String workflowId) throws Exception {
        return getWorkflowInstancesList(accountId, workflowId, Optional.empty());
    }

    /**
     * Retrieve All Workflow Instances
     * 
     * <p>This operation retrieves a list of all available Maestro workflow instances. It returns basic information
     * about each workflow instance, including its unique identifier (`id`), name, status, timestamps, and
     * additional metadata.
     * 
     * <p>The response provides key details that help users understand what workflow instances are in progress
     * or completed, and the relevant data for each. Each workflow instance entry also includes metadata, such
     * as who started it, when it was last modified, and how many steps have been completed.
     * 
     * <p>### Use Cases:
     * - Listing all available workflow instances for manual or automated review
     * - Monitoring which workflow instances are currently running or have finished
     * - Gathering basic metadata about workflow instances for auditing, logging, or reporting purposes
     * 
     * <p>### Key Features:
     * - **Comprehensive Instance Overview**: Provides a full list of workflow instances, giving visibility
     * 
     * <p>  into all ongoing and completed workflows within the Maestro platform
     * - **Metadata for Tracking**: Includes helpful metadata like creation time, last modification date,
     * 
     * <p>  and user details to support audit trails
     * - **Scalable and Future-Proof**: Designed to handle growing numbers of workflow instances as the
     * 
     * <p>  platform scales
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowInstancesListResponse getWorkflowInstancesList(
            String accountId, String workflowId,
            Optional<Options> options) throws Exception {
        GetWorkflowInstancesListRequest request =
            GetWorkflowInstancesListRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .build();
        RequestOperation<GetWorkflowInstancesListRequest, GetWorkflowInstancesListResponse> operation
              = new GetWorkflowInstancesList.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a Workflow Instance
     * 
     * <p>This operation retrieves a single Maestro workflow instance by its unique identifier (`id`).
     * It returns the primary details of the workflow instance, including its name, status,
     * starting information, and other metadata.
     * 
     * <p>The response provides key details that help users understand the current state of the workflow
     * instance, when it was started, and who initiated it. Additional metadata is included to support
     * auditing and reporting within the system.
     * 
     * <p>### Use Cases:
     * - Getting the details of a specific workflow instance for further processing or review
     * - Monitoring the status of a running workflow instance to determine completion or cancellation
     * - Accessing metadata for auditing, logging, or reporting on a single workflow instance
     * 
     * <p>### Key Features:
     * - **Single Workflow Instance**: Provides direct access to a specific workflow instance by `id`
     * - **Detailed Status Information**: Includes the workflow's start and end times, status, and other lifecycle timestamps
     * - **Metadata for Tracking**: Useful metadata like who initiated the workflow (`started_by`) and versioning details
     * - **Future-Proof**: Designed to be extensible if additional fields or nested information are required over time
     * 
     * @return The call builder
     */
    public GetWorkflowInstanceRequestBuilder getWorkflowInstance() {
        return new GetWorkflowInstanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a Workflow Instance
     * 
     * <p>This operation retrieves a single Maestro workflow instance by its unique identifier (`id`).
     * It returns the primary details of the workflow instance, including its name, status,
     * starting information, and other metadata.
     * 
     * <p>The response provides key details that help users understand the current state of the workflow
     * instance, when it was started, and who initiated it. Additional metadata is included to support
     * auditing and reporting within the system.
     * 
     * <p>### Use Cases:
     * - Getting the details of a specific workflow instance for further processing or review
     * - Monitoring the status of a running workflow instance to determine completion or cancellation
     * - Accessing metadata for auditing, logging, or reporting on a single workflow instance
     * 
     * <p>### Key Features:
     * - **Single Workflow Instance**: Provides direct access to a specific workflow instance by `id`
     * - **Detailed Status Information**: Includes the workflow's start and end times, status, and other lifecycle timestamps
     * - **Metadata for Tracking**: Useful metadata like who initiated the workflow (`started_by`) and versioning details
     * - **Future-Proof**: Designed to be extensible if additional fields or nested information are required over time
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param instanceId Unique identifier for the workflow instance
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowInstanceResponse getWorkflowInstance(
            String accountId, String workflowId,
            String instanceId) throws Exception {
        return getWorkflowInstance(accountId, workflowId, instanceId,
            Optional.empty());
    }

    /**
     * Retrieve a Workflow Instance
     * 
     * <p>This operation retrieves a single Maestro workflow instance by its unique identifier (`id`).
     * It returns the primary details of the workflow instance, including its name, status,
     * starting information, and other metadata.
     * 
     * <p>The response provides key details that help users understand the current state of the workflow
     * instance, when it was started, and who initiated it. Additional metadata is included to support
     * auditing and reporting within the system.
     * 
     * <p>### Use Cases:
     * - Getting the details of a specific workflow instance for further processing or review
     * - Monitoring the status of a running workflow instance to determine completion or cancellation
     * - Accessing metadata for auditing, logging, or reporting on a single workflow instance
     * 
     * <p>### Key Features:
     * - **Single Workflow Instance**: Provides direct access to a specific workflow instance by `id`
     * - **Detailed Status Information**: Includes the workflow's start and end times, status, and other lifecycle timestamps
     * - **Metadata for Tracking**: Useful metadata like who initiated the workflow (`started_by`) and versioning details
     * - **Future-Proof**: Designed to be extensible if additional fields or nested information are required over time
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param instanceId Unique identifier for the workflow instance
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowInstanceResponse getWorkflowInstance(
            String accountId, String workflowId,
            String instanceId, Optional<Options> options) throws Exception {
        GetWorkflowInstanceRequest request =
            GetWorkflowInstanceRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .instanceId(instanceId)
                .build();
        RequestOperation<GetWorkflowInstanceRequest, GetWorkflowInstanceResponse> operation
              = new GetWorkflowInstance.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Cancel a Running Workflow Instance
     * 
     * <p>This operation cancels a running Maestro workflow instance by its unique identifier (`instanceId`).
     * Once canceled, the workflow instance will no longer continue executing any remaining steps.
     * 
     * <p>### Use Cases:
     * - Stopping a workflow execution when it is no longer needed or relevant
     * - Manually intervening in a workflow to prevent it from reaching completion if conditions change
     * 
     * <p>### Key Features:
     * - **Immediate Termination**: Ensures the workflow instance no longer processes subsequent steps
     * - **Clear Feedback**: Returns a confirmation message including both the instance and workflow identifiers
     * 
     * @return The call builder
     */
    public CancelWorkflowInstanceRequestBuilder cancelWorkflowInstance() {
        return new CancelWorkflowInstanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel a Running Workflow Instance
     * 
     * <p>This operation cancels a running Maestro workflow instance by its unique identifier (`instanceId`).
     * Once canceled, the workflow instance will no longer continue executing any remaining steps.
     * 
     * <p>### Use Cases:
     * - Stopping a workflow execution when it is no longer needed or relevant
     * - Manually intervening in a workflow to prevent it from reaching completion if conditions change
     * 
     * <p>### Key Features:
     * - **Immediate Termination**: Ensures the workflow instance no longer processes subsequent steps
     * - **Clear Feedback**: Returns a confirmation message including both the instance and workflow identifiers
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param instanceId Unique identifier for the workflow instance
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelWorkflowInstanceResponse cancelWorkflowInstance(
            String accountId, String workflowId,
            String instanceId) throws Exception {
        return cancelWorkflowInstance(accountId, workflowId, instanceId,
            Optional.empty());
    }

    /**
     * Cancel a Running Workflow Instance
     * 
     * <p>This operation cancels a running Maestro workflow instance by its unique identifier (`instanceId`).
     * Once canceled, the workflow instance will no longer continue executing any remaining steps.
     * 
     * <p>### Use Cases:
     * - Stopping a workflow execution when it is no longer needed or relevant
     * - Manually intervening in a workflow to prevent it from reaching completion if conditions change
     * 
     * <p>### Key Features:
     * - **Immediate Termination**: Ensures the workflow instance no longer processes subsequent steps
     * - **Clear Feedback**: Returns a confirmation message including both the instance and workflow identifiers
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param instanceId Unique identifier for the workflow instance
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CancelWorkflowInstanceResponse cancelWorkflowInstance(
            String accountId, String workflowId,
            String instanceId, Optional<Options> options) throws Exception {
        CancelWorkflowInstanceRequest request =
            CancelWorkflowInstanceRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .instanceId(instanceId)
                .build();
        RequestOperation<CancelWorkflowInstanceRequest, CancelWorkflowInstanceResponse> operation
              = new CancelWorkflowInstance.Sync(sdkConfiguration, options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
