/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.docusign.iam.sdk;

import com.docusign.iam.sdk.utils.HTTPClient;
import com.docusign.iam.sdk.utils.Headers;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.SpeakeasyHTTPClient;
import com.docusign.iam.sdk.utils.Utils;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Docusign IAM API: Docusign IAM API
 */
public class IamClient {
    private static final Headers _headers = Headers.EMPTY;

    /**
     * AvailableServers contains identifiers for the servers available to the SDK.
     */
    public enum AvailableServers {
        /**
         * DEMO
         * 
         * <p>Demo
         */
        DEMO("demo"),
        /**
         * PROD
         * 
         * <p>Production
         */
        PROD("prod");

        private final String server;

        AvailableServers(String server) {
            this.server = server;
        }

        public String server() {
           return server;
        }
    }

    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    @SuppressWarnings("serial")
    public static final Map<AvailableServers, String> SERVERS = new HashMap<>() { {
        put(AvailableServers.DEMO, "https://api-d.docusign.com");
        put(AvailableServers.PROD, "https://api.docusign.com");
    }};


    private final Auth auth;


    private final Maestro maestro;


    private final Navigator navigator;


    private final ConnectedFields connectedFields;


    private final Workspaces1 workspaces;


    public Auth auth() {
        return auth;
    }


    public Maestro maestro() {
        return maestro;
    }


    public Navigator navigator() {
        return navigator;
    }


    public ConnectedFields connectedFields() {
        return connectedFields;
    }


    public Workspaces1 workspaces() {
        return workspaces;
    }

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param accessToken The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder accessToken(String accessToken) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(com.docusign.iam.sdk.models.components.Security.builder()
              .accessToken(accessToken)
              .build()));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by name.
         *
         * @param server The server to use for all requests.
         * @return The builder instance.
         */
        public Builder server(AvailableServers server) {
            this.server = server.server();
            this.serverUrl = SERVERS.get(server);
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         * <p>
         * Convenience method that calls {@link HTTPClient#enableDebugLogging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         * </p>
         *
         * @param enabled Whether to enable debug logging.
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugLogging(enabled);
            return this;
        }

        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.docusign.iam.sdk.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.docusign.iam.sdk.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }

        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public IamClient build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS.get(AvailableServers.DEMO);
                server = AvailableServers.DEMO.server();
            }
            sdkConfiguration.setServerUrl(serverUrl);
            if (server != null) {
                sdkConfiguration.setServer(server);
            }
            return new IamClient(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    public IamClient(SDKConfiguration sdkConfiguration) {
        sdkConfiguration.initialize();
        this.auth = new Auth(sdkConfiguration);
        this.maestro = new Maestro(sdkConfiguration);
        this.navigator = new Navigator(sdkConfiguration);
        this.connectedFields = new ConnectedFields(sdkConfiguration);
        this.workspaces = new Workspaces1(sdkConfiguration);
        sdkConfiguration = sdkConfiguration.hooks().sdkInit(sdkConfiguration);
    }
}
