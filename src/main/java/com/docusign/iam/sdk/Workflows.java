/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.components.TriggerWorkflow;
import com.docusign.iam.sdk.models.operations.GetWorkflowTriggerRequirementsRequest;
import com.docusign.iam.sdk.models.operations.GetWorkflowTriggerRequirementsRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkflowTriggerRequirementsResponse;
import com.docusign.iam.sdk.models.operations.GetWorkflowsListRequest;
import com.docusign.iam.sdk.models.operations.GetWorkflowsListRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkflowsListResponse;
import com.docusign.iam.sdk.models.operations.PauseNewWorkflowInstancesRequest;
import com.docusign.iam.sdk.models.operations.PauseNewWorkflowInstancesRequestBuilder;
import com.docusign.iam.sdk.models.operations.PauseNewWorkflowInstancesResponse;
import com.docusign.iam.sdk.models.operations.ResumePausedWorkflowRequest;
import com.docusign.iam.sdk.models.operations.ResumePausedWorkflowRequestBuilder;
import com.docusign.iam.sdk.models.operations.ResumePausedWorkflowResponse;
import com.docusign.iam.sdk.models.operations.Status;
import com.docusign.iam.sdk.models.operations.TriggerWorkflowRequest;
import com.docusign.iam.sdk.models.operations.TriggerWorkflowRequestBuilder;
import com.docusign.iam.sdk.models.operations.TriggerWorkflowResponse;
import com.docusign.iam.sdk.operations.GetWorkflowTriggerRequirementsOperation;
import com.docusign.iam.sdk.operations.GetWorkflowsListOperation;
import com.docusign.iam.sdk.operations.PauseNewWorkflowInstancesOperation;
import com.docusign.iam.sdk.operations.ResumePausedWorkflowOperation;
import com.docusign.iam.sdk.operations.TriggerWorkflowOperation;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;


public class Workflows {
    private final SDKConfiguration sdkConfiguration;

    Workflows(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Retrieve a list of available Maestro workflows
     * 
     * <p>This operation retrieves a list of all available Maestro workflows. It returns basic information
     * about each workflow, including its unique identifier (`id`), name, description, and the input
     * schema required to trigger the workflow.
     * 
     * <p>The response provides key details that help users identify which workflows are available
     * and understand the input requirements for triggering each one. Each workflow entry also includes
     * metadata, such as when it was created, last modified, and by whom.
     * 
     * <p>This operation is useful for obtaining an overview of all workflows within the system, helping
     * users and systems know what workflows are defined, what inputs they require, and how they can
     * be triggered.
     * 
     * <p>### Use Cases:
     * - Listing all available workflows in a system for manual or automated workflow initiation.
     * - Reviewing the input requirements for a workflow before triggering it programmatically.
     * - Gathering basic metadata about workflows for auditing, logging, or reporting purposes.
     * 
     * <p>### Key Features:
     * - **Comprehensive Workflow Overview**: Provides a full list of workflows, giving visibility
     * 
     * <p>  into all the automated processes available within the Maestro platform.
     * - **Input Schema Information**: Each workflow includes its trigger input schema, showing
     * 
     * <p>  what data must be provided when triggering the workflow.
     * - **Metadata for Tracking**: Useful metadata like creation time, last modification date,
     * 
     * <p>  and user details are included to support tracking and auditing workflows.
     * - **Future-Proof**: The operation is designed to be expandable as more workflows are added
     * 
     * <p>  or the platform grows, ensuring scalability in the workflow management process.
     * 
     * @return The call builder
     */
    public GetWorkflowsListRequestBuilder getWorkflowsList() {
        return new GetWorkflowsListRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a list of available Maestro workflows
     * 
     * <p>This operation retrieves a list of all available Maestro workflows. It returns basic information
     * about each workflow, including its unique identifier (`id`), name, description, and the input
     * schema required to trigger the workflow.
     * 
     * <p>The response provides key details that help users identify which workflows are available
     * and understand the input requirements for triggering each one. Each workflow entry also includes
     * metadata, such as when it was created, last modified, and by whom.
     * 
     * <p>This operation is useful for obtaining an overview of all workflows within the system, helping
     * users and systems know what workflows are defined, what inputs they require, and how they can
     * be triggered.
     * 
     * <p>### Use Cases:
     * - Listing all available workflows in a system for manual or automated workflow initiation.
     * - Reviewing the input requirements for a workflow before triggering it programmatically.
     * - Gathering basic metadata about workflows for auditing, logging, or reporting purposes.
     * 
     * <p>### Key Features:
     * - **Comprehensive Workflow Overview**: Provides a full list of workflows, giving visibility
     * 
     * <p>  into all the automated processes available within the Maestro platform.
     * - **Input Schema Information**: Each workflow includes its trigger input schema, showing
     * 
     * <p>  what data must be provided when triggering the workflow.
     * - **Metadata for Tracking**: Useful metadata like creation time, last modification date,
     * 
     * <p>  and user details are included to support tracking and auditing workflows.
     * - **Future-Proof**: The operation is designed to be expandable as more workflows are added
     * 
     * <p>  or the platform grows, ensuring scalability in the workflow management process.
     * 
     * @param accountId The unique identifier of the account.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowsListResponse getWorkflowsList(String accountId) throws Exception {
        return getWorkflowsList(accountId, Optional.empty(), Optional.empty());
    }

    /**
     * Retrieve a list of available Maestro workflows
     * 
     * <p>This operation retrieves a list of all available Maestro workflows. It returns basic information
     * about each workflow, including its unique identifier (`id`), name, description, and the input
     * schema required to trigger the workflow.
     * 
     * <p>The response provides key details that help users identify which workflows are available
     * and understand the input requirements for triggering each one. Each workflow entry also includes
     * metadata, such as when it was created, last modified, and by whom.
     * 
     * <p>This operation is useful for obtaining an overview of all workflows within the system, helping
     * users and systems know what workflows are defined, what inputs they require, and how they can
     * be triggered.
     * 
     * <p>### Use Cases:
     * - Listing all available workflows in a system for manual or automated workflow initiation.
     * - Reviewing the input requirements for a workflow before triggering it programmatically.
     * - Gathering basic metadata about workflows for auditing, logging, or reporting purposes.
     * 
     * <p>### Key Features:
     * - **Comprehensive Workflow Overview**: Provides a full list of workflows, giving visibility
     * 
     * <p>  into all the automated processes available within the Maestro platform.
     * - **Input Schema Information**: Each workflow includes its trigger input schema, showing
     * 
     * <p>  what data must be provided when triggering the workflow.
     * - **Metadata for Tracking**: Useful metadata like creation time, last modification date,
     * 
     * <p>  and user details are included to support tracking and auditing workflows.
     * - **Future-Proof**: The operation is designed to be expandable as more workflows are added
     * 
     * <p>  or the platform grows, ensuring scalability in the workflow management process.
     * 
     * @param accountId The unique identifier of the account.
     * @param status Filter workflows by their status. If provided, only workflows with the specified status will be returned.
     *         - `active`: Returns only active workflows.
     *         - `inactive`: Returns only inactive workflows.
     *         - `publishing`: Returns workflows currently being published.
     *         - `unpublishing`: Returns workflows currently being unpublished.
     *         - `archived`: Returns workflows that have been archived.
     *         - `archiving`: Returns workflows currently being archived.        
     *         
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowsListResponse getWorkflowsList(
            String accountId,
            Optional<? extends Status> status,
            Optional<Options> options) throws Exception {
        GetWorkflowsListRequest request =
            GetWorkflowsListRequest
                .builder()
                .accountId(accountId)
                .status(status)
                .build();
        RequestOperation<GetWorkflowsListRequest, GetWorkflowsListResponse> operation
              = new GetWorkflowsListOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve trigger requirements for a specific Maestro workflow
     * 
     * <p>This operation retrieves the configuration and input requirements necessary to trigger a specific
     * Maestro workflow. It provides detailed information about the `trigger_event_type`, such as HTTP
     * or other supported types, and specifies the required input schema, including field names, data types,
     * and any default values.
     * 
     * <p>This information is essential for understanding the data and parameters required to initiate the
     * workflow. It enables developers to prepare the necessary inputs and configuration before triggering
     * the workflow instance, ensuring seamless execution and compliance with workflow requirements.
     * 
     * <p>### Use Cases:
     * - Identifying the required input fields and their data types to successfully trigger the workflow.
     * - Reviewing the trigger configuration for validation and compliance with expected input.
     * - Preparing and validating data in advance of triggering the workflow, minimizing runtime errors.
     * 
     * <p>### Key Features:
     * - **Detailed Trigger Input Requirements**: Provides an exhaustive schema of required fields,
     * 
     * <p>  their data types, and optional default values for easy reference and data validation.
     * - **Trigger Event Type Information**: Specifies the type of event required to initiate the workflow
     * 
     * <p>  (e.g., HTTP), helping developers configure their systems to invoke the workflow appropriately.
     * - **Configurable for Custom Triggers**: Suitable for custom configurations, enabling flexibility
     * 
     * <p>  in how workflows can be triggered according to system needs.
     * 
     * @return The call builder
     */
    public GetWorkflowTriggerRequirementsRequestBuilder getWorkflowTriggerRequirements() {
        return new GetWorkflowTriggerRequirementsRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve trigger requirements for a specific Maestro workflow
     * 
     * <p>This operation retrieves the configuration and input requirements necessary to trigger a specific
     * Maestro workflow. It provides detailed information about the `trigger_event_type`, such as HTTP
     * or other supported types, and specifies the required input schema, including field names, data types,
     * and any default values.
     * 
     * <p>This information is essential for understanding the data and parameters required to initiate the
     * workflow. It enables developers to prepare the necessary inputs and configuration before triggering
     * the workflow instance, ensuring seamless execution and compliance with workflow requirements.
     * 
     * <p>### Use Cases:
     * - Identifying the required input fields and their data types to successfully trigger the workflow.
     * - Reviewing the trigger configuration for validation and compliance with expected input.
     * - Preparing and validating data in advance of triggering the workflow, minimizing runtime errors.
     * 
     * <p>### Key Features:
     * - **Detailed Trigger Input Requirements**: Provides an exhaustive schema of required fields,
     * 
     * <p>  their data types, and optional default values for easy reference and data validation.
     * - **Trigger Event Type Information**: Specifies the type of event required to initiate the workflow
     * 
     * <p>  (e.g., HTTP), helping developers configure their systems to invoke the workflow appropriately.
     * - **Configurable for Custom Triggers**: Suitable for custom configurations, enabling flexibility
     * 
     * <p>  in how workflows can be triggered according to system needs.
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowTriggerRequirementsResponse getWorkflowTriggerRequirements(
            String accountId,
            String workflowId) throws Exception {
        return getWorkflowTriggerRequirements(accountId, workflowId, Optional.empty());
    }

    /**
     * Retrieve trigger requirements for a specific Maestro workflow
     * 
     * <p>This operation retrieves the configuration and input requirements necessary to trigger a specific
     * Maestro workflow. It provides detailed information about the `trigger_event_type`, such as HTTP
     * or other supported types, and specifies the required input schema, including field names, data types,
     * and any default values.
     * 
     * <p>This information is essential for understanding the data and parameters required to initiate the
     * workflow. It enables developers to prepare the necessary inputs and configuration before triggering
     * the workflow instance, ensuring seamless execution and compliance with workflow requirements.
     * 
     * <p>### Use Cases:
     * - Identifying the required input fields and their data types to successfully trigger the workflow.
     * - Reviewing the trigger configuration for validation and compliance with expected input.
     * - Preparing and validating data in advance of triggering the workflow, minimizing runtime errors.
     * 
     * <p>### Key Features:
     * - **Detailed Trigger Input Requirements**: Provides an exhaustive schema of required fields,
     * 
     * <p>  their data types, and optional default values for easy reference and data validation.
     * - **Trigger Event Type Information**: Specifies the type of event required to initiate the workflow
     * 
     * <p>  (e.g., HTTP), helping developers configure their systems to invoke the workflow appropriately.
     * - **Configurable for Custom Triggers**: Suitable for custom configurations, enabling flexibility
     * 
     * <p>  in how workflows can be triggered according to system needs.
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkflowTriggerRequirementsResponse getWorkflowTriggerRequirements(
            String accountId,
            String workflowId,
            Optional<Options> options) throws Exception {
        GetWorkflowTriggerRequirementsRequest request =
            GetWorkflowTriggerRequirementsRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .build();
        RequestOperation<GetWorkflowTriggerRequirementsRequest, GetWorkflowTriggerRequirementsResponse> operation
              = new GetWorkflowTriggerRequirementsOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Trigger a new instance of a Maestro workflow
     * 
     * <p>This operation triggers a new instance of a specified Maestro workflow. When invoked,
     * the workflow is started based on the provided input data, and the workflow instance
     * begins executing according to its defined logic and configuration.
     * 
     * <p>The request requires an `instance_name` and any input data necessary to start the workflow,
     * as described by the workflow's `trigger_input_schema`. The `instance_name` is a user-defined
     * label for tracking the workflow run, while the input data fields should match the schema defined
     * in the workflow.
     * 
     * <p>The operation is event-driven and typically triggered by an external HTTP event or system call,
     * allowing for the automatic execution of complex processes that span multiple systems or components.
     * 
     * <p>Upon successful execution, the response returns the unique identifier (`id`) for the newly
     * created workflow instance, along with a URL (`workflow_instance_url`) that can be used to
     * interact with or track the running instance.
     * 
     * <p>### Use Cases:
     * - Automating user registration workflows where input fields like `name` and `email` are provided.
     * - Processing financial transactions where details such as `amount` and `currency` are required.
     * - Sending notifications based on user interactions in other systems.
     * 
     * <p>### Key Features:
     * - **Automated Execution**: Once triggered, the workflow runs until a step requires manual intervention.
     * - **Input-Driven**: Workflow execution is based on the provided input data, which is validated
     * 
     * <p>  against the workflow's input schema.
     * - **Real-Time Triggering**: Designed to be invoked as part of an event-driven architecture,
     * 
     * <p>  allowing for workflows to respond to external events.
     * - **Tracking and Interaction**: The response includes a URL that allows users to check the status
     * 
     * <p>  of the workflow instance or take further actions while it runs.
     * 
     * @return The call builder
     */
    public TriggerWorkflowRequestBuilder triggerWorkflow() {
        return new TriggerWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Trigger a new instance of a Maestro workflow
     * 
     * <p>This operation triggers a new instance of a specified Maestro workflow. When invoked,
     * the workflow is started based on the provided input data, and the workflow instance
     * begins executing according to its defined logic and configuration.
     * 
     * <p>The request requires an `instance_name` and any input data necessary to start the workflow,
     * as described by the workflow's `trigger_input_schema`. The `instance_name` is a user-defined
     * label for tracking the workflow run, while the input data fields should match the schema defined
     * in the workflow.
     * 
     * <p>The operation is event-driven and typically triggered by an external HTTP event or system call,
     * allowing for the automatic execution of complex processes that span multiple systems or components.
     * 
     * <p>Upon successful execution, the response returns the unique identifier (`id`) for the newly
     * created workflow instance, along with a URL (`workflow_instance_url`) that can be used to
     * interact with or track the running instance.
     * 
     * <p>### Use Cases:
     * - Automating user registration workflows where input fields like `name` and `email` are provided.
     * - Processing financial transactions where details such as `amount` and `currency` are required.
     * - Sending notifications based on user interactions in other systems.
     * 
     * <p>### Key Features:
     * - **Automated Execution**: Once triggered, the workflow runs until a step requires manual intervention.
     * - **Input-Driven**: Workflow execution is based on the provided input data, which is validated
     * 
     * <p>  against the workflow's input schema.
     * - **Real-Time Triggering**: Designed to be invoked as part of an event-driven architecture,
     * 
     * <p>  allowing for workflows to respond to external events.
     * - **Tracking and Interaction**: The response includes a URL that allows users to check the status
     * 
     * <p>  of the workflow instance or take further actions while it runs.
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param triggerWorkflow The input information needed to trigger a new instance of a Maestro workflow.
     *         This request body contains the metadata to describe the instance being created,
     *         along with the input data required to trigger the workflow.
     *         
     *         - `instance_name` provides a user-defined name for the workflow instance.
     *         - `trigger_inputs` contains the key-value pairs corresponding to the inputs required by the workflow, as described in the `trigger_input_schema` from the workflow definition.
     *         
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public TriggerWorkflowResponse triggerWorkflow(
            String accountId,
            String workflowId,
            TriggerWorkflow triggerWorkflow) throws Exception {
        return triggerWorkflow(accountId, workflowId, triggerWorkflow, Optional.empty());
    }

    /**
     * Trigger a new instance of a Maestro workflow
     * 
     * <p>This operation triggers a new instance of a specified Maestro workflow. When invoked,
     * the workflow is started based on the provided input data, and the workflow instance
     * begins executing according to its defined logic and configuration.
     * 
     * <p>The request requires an `instance_name` and any input data necessary to start the workflow,
     * as described by the workflow's `trigger_input_schema`. The `instance_name` is a user-defined
     * label for tracking the workflow run, while the input data fields should match the schema defined
     * in the workflow.
     * 
     * <p>The operation is event-driven and typically triggered by an external HTTP event or system call,
     * allowing for the automatic execution of complex processes that span multiple systems or components.
     * 
     * <p>Upon successful execution, the response returns the unique identifier (`id`) for the newly
     * created workflow instance, along with a URL (`workflow_instance_url`) that can be used to
     * interact with or track the running instance.
     * 
     * <p>### Use Cases:
     * - Automating user registration workflows where input fields like `name` and `email` are provided.
     * - Processing financial transactions where details such as `amount` and `currency` are required.
     * - Sending notifications based on user interactions in other systems.
     * 
     * <p>### Key Features:
     * - **Automated Execution**: Once triggered, the workflow runs until a step requires manual intervention.
     * - **Input-Driven**: Workflow execution is based on the provided input data, which is validated
     * 
     * <p>  against the workflow's input schema.
     * - **Real-Time Triggering**: Designed to be invoked as part of an event-driven architecture,
     * 
     * <p>  allowing for workflows to respond to external events.
     * - **Tracking and Interaction**: The response includes a URL that allows users to check the status
     * 
     * <p>  of the workflow instance or take further actions while it runs.
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param triggerWorkflow The input information needed to trigger a new instance of a Maestro workflow.
     *         This request body contains the metadata to describe the instance being created,
     *         along with the input data required to trigger the workflow.
     *         
     *         - `instance_name` provides a user-defined name for the workflow instance.
     *         - `trigger_inputs` contains the key-value pairs corresponding to the inputs required by the workflow, as described in the `trigger_input_schema` from the workflow definition.
     *         
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public TriggerWorkflowResponse triggerWorkflow(
            String accountId,
            String workflowId,
            TriggerWorkflow triggerWorkflow,
            Optional<Options> options) throws Exception {
        TriggerWorkflowRequest request =
            TriggerWorkflowRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .triggerWorkflow(triggerWorkflow)
                .build();
        RequestOperation<TriggerWorkflowRequest, TriggerWorkflowResponse> operation
              = new TriggerWorkflowOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Pause an Active Workflow
     * 
     * <p>This operation pauses new workflow instances from being created. Any running workflows instances will be unaffected.
     * 
     * @return The call builder
     */
    public PauseNewWorkflowInstancesRequestBuilder pauseNewWorkflowInstances() {
        return new PauseNewWorkflowInstancesRequestBuilder(sdkConfiguration);
    }

    /**
     * Pause an Active Workflow
     * 
     * <p>This operation pauses new workflow instances from being created. Any running workflows instances will be unaffected.
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PauseNewWorkflowInstancesResponse pauseNewWorkflowInstances(
            String accountId,
            String workflowId) throws Exception {
        return pauseNewWorkflowInstances(accountId, workflowId, Optional.empty());
    }

    /**
     * Pause an Active Workflow
     * 
     * <p>This operation pauses new workflow instances from being created. Any running workflows instances will be unaffected.
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PauseNewWorkflowInstancesResponse pauseNewWorkflowInstances(
            String accountId,
            String workflowId,
            Optional<Options> options) throws Exception {
        PauseNewWorkflowInstancesRequest request =
            PauseNewWorkflowInstancesRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .build();
        RequestOperation<PauseNewWorkflowInstancesRequest, PauseNewWorkflowInstancesResponse> operation
              = new PauseNewWorkflowInstancesOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Resume a Paused Workflow
     * 
     * <p>This operation enables new workflow instances to be created
     * 
     * @return The call builder
     */
    public ResumePausedWorkflowRequestBuilder resumePausedWorkflow() {
        return new ResumePausedWorkflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Resume a Paused Workflow
     * 
     * <p>This operation enables new workflow instances to be created
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResumePausedWorkflowResponse resumePausedWorkflow(
            String accountId,
            String workflowId) throws Exception {
        return resumePausedWorkflow(accountId, workflowId, Optional.empty());
    }

    /**
     * Resume a Paused Workflow
     * 
     * <p>This operation enables new workflow instances to be created
     * 
     * @param accountId The unique identifier of the account.
     * @param workflowId 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResumePausedWorkflowResponse resumePausedWorkflow(
            String accountId,
            String workflowId,
            Optional<Options> options) throws Exception {
        ResumePausedWorkflowRequest request =
            ResumePausedWorkflowRequest
                .builder()
                .accountId(accountId)
                .workflowId(workflowId)
                .build();
        RequestOperation<ResumePausedWorkflowRequest, ResumePausedWorkflowResponse> operation
              = new ResumePausedWorkflowOperation(
                 sdkConfiguration,
                 options);
        return operation.handleResponse(operation.doRequest(request));
    }

}
