/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.models.components.AddWorkspaceUploadRequestDocumentRequest;
import com.docusign.iam.sdk.models.components.CreateWorkspaceUploadRequestBody;
import com.docusign.iam.sdk.models.components.UpdateWorkspaceUploadRequestBody;
import com.docusign.iam.sdk.models.operations.AddWorkspaceUploadRequestDocumentRequestBuilder;
import com.docusign.iam.sdk.models.operations.AddWorkspaceUploadRequestDocumentResponse;
import com.docusign.iam.sdk.models.operations.CompleteWorkspaceUploadRequestRequest;
import com.docusign.iam.sdk.models.operations.CompleteWorkspaceUploadRequestRequestBuilder;
import com.docusign.iam.sdk.models.operations.CompleteWorkspaceUploadRequestResponse;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceUploadRequestRequest;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceUploadRequestRequestBuilder;
import com.docusign.iam.sdk.models.operations.CreateWorkspaceUploadRequestResponse;
import com.docusign.iam.sdk.models.operations.DeleteWorkspaceUploadRequestRequest;
import com.docusign.iam.sdk.models.operations.DeleteWorkspaceUploadRequestRequestBuilder;
import com.docusign.iam.sdk.models.operations.DeleteWorkspaceUploadRequestResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUploadRequestRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUploadRequestRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUploadRequestResponse;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUploadRequestsRequest;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUploadRequestsRequestBuilder;
import com.docusign.iam.sdk.models.operations.GetWorkspaceUploadRequestsResponse;
import com.docusign.iam.sdk.models.operations.UpdateWorkspaceUploadRequestRequest;
import com.docusign.iam.sdk.models.operations.UpdateWorkspaceUploadRequestRequestBuilder;
import com.docusign.iam.sdk.models.operations.UpdateWorkspaceUploadRequestResponse;
import com.docusign.iam.sdk.operations.AddWorkspaceUploadRequestDocument;
import com.docusign.iam.sdk.operations.CompleteWorkspaceUploadRequest;
import com.docusign.iam.sdk.operations.CreateWorkspaceUploadRequest;
import com.docusign.iam.sdk.operations.DeleteWorkspaceUploadRequest;
import com.docusign.iam.sdk.operations.GetWorkspaceUploadRequest;
import com.docusign.iam.sdk.operations.GetWorkspaceUploadRequests;
import com.docusign.iam.sdk.operations.UpdateWorkspaceUploadRequest;
import com.docusign.iam.sdk.utils.Headers;
import com.docusign.iam.sdk.utils.Options;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class WorkspaceUploadRequest {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;

    WorkspaceUploadRequest(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Creates a new upload request within a workspace
     * 
     * <p>This operation creates a new upload request within a workspace. The upload request includes name,
     * description, due date, and user assignments. Upload requests can be created as drafts or sent
     * immediately based on the status field.
     * 
     * @return The call builder
     */
    public CreateWorkspaceUploadRequestRequestBuilder createWorkspaceUploadRequest() {
        return new CreateWorkspaceUploadRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Creates a new upload request within a workspace
     * 
     * <p>This operation creates a new upload request within a workspace. The upload request includes name,
     * description, due date, and user assignments. Upload requests can be created as drafts or sent
     * immediately based on the status field.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param createWorkspaceUploadRequestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkspaceUploadRequestResponse createWorkspaceUploadRequest(
            String accountId, String workspaceId,
            CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody) throws Exception {
        return createWorkspaceUploadRequest(accountId, workspaceId, createWorkspaceUploadRequestBody,
            Optional.empty());
    }

    /**
     * Creates a new upload request within a workspace
     * 
     * <p>This operation creates a new upload request within a workspace. The upload request includes name,
     * description, due date, and user assignments. Upload requests can be created as drafts or sent
     * immediately based on the status field.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param createWorkspaceUploadRequestBody 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateWorkspaceUploadRequestResponse createWorkspaceUploadRequest(
            String accountId, String workspaceId,
            CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody, Optional<Options> options) throws Exception {
        CreateWorkspaceUploadRequestRequest request =
            CreateWorkspaceUploadRequestRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .createWorkspaceUploadRequestBody(createWorkspaceUploadRequestBody)
                .build();
        RequestOperation<CreateWorkspaceUploadRequestRequest, CreateWorkspaceUploadRequestResponse> operation
              = new CreateWorkspaceUploadRequest.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Gets upload requests within a workspace
     * 
     * <p>This operation retrieves a list of upload requests within a workspace. Each upload request includes
     * details such as ID, name, description, status, owner information, associated documents, assignments,
     * and various dates.
     * 
     * @return The call builder
     */
    public GetWorkspaceUploadRequestsRequestBuilder getWorkspaceUploadRequests() {
        return new GetWorkspaceUploadRequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * Gets upload requests within a workspace
     * 
     * <p>This operation retrieves a list of upload requests within a workspace. Each upload request includes
     * details such as ID, name, description, status, owner information, associated documents, assignments,
     * and various dates.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceUploadRequestsResponse getWorkspaceUploadRequests(String accountId, String workspaceId) throws Exception {
        return getWorkspaceUploadRequests(accountId, workspaceId, Optional.empty());
    }

    /**
     * Gets upload requests within a workspace
     * 
     * <p>This operation retrieves a list of upload requests within a workspace. Each upload request includes
     * details such as ID, name, description, status, owner information, associated documents, assignments,
     * and various dates.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceUploadRequestsResponse getWorkspaceUploadRequests(
            String accountId, String workspaceId,
            Optional<Options> options) throws Exception {
        GetWorkspaceUploadRequestsRequest request =
            GetWorkspaceUploadRequestsRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .build();
        RequestOperation<GetWorkspaceUploadRequestsRequest, GetWorkspaceUploadRequestsResponse> operation
              = new GetWorkspaceUploadRequests.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Gets details for a specific upload request
     * 
     * <p>This operation retrieves details about a specific upload request within a workspace. The response
     * includes comprehensive information about the upload request including status, assigned users,
     * associated documents, owner details, and various dates.
     * 
     * @return The call builder
     */
    public GetWorkspaceUploadRequestRequestBuilder getWorkspaceUploadRequest() {
        return new GetWorkspaceUploadRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Gets details for a specific upload request
     * 
     * <p>This operation retrieves details about a specific upload request within a workspace. The response
     * includes comprehensive information about the upload request including status, assigned users,
     * associated documents, owner details, and various dates.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceUploadRequestResponse getWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId) throws Exception {
        return getWorkspaceUploadRequest(accountId, workspaceId, uploadRequestId,
            Optional.empty());
    }

    /**
     * Gets details for a specific upload request
     * 
     * <p>This operation retrieves details about a specific upload request within a workspace. The response
     * includes comprehensive information about the upload request including status, assigned users,
     * associated documents, owner details, and various dates.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetWorkspaceUploadRequestResponse getWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId, Optional<Options> options) throws Exception {
        GetWorkspaceUploadRequestRequest request =
            GetWorkspaceUploadRequestRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .uploadRequestId(uploadRequestId)
                .build();
        RequestOperation<GetWorkspaceUploadRequestRequest, GetWorkspaceUploadRequestResponse> operation
              = new GetWorkspaceUploadRequest.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Updates a specific upload request
     * 
     * <p>This operation updates a specific upload request within a workspace. Only draft upload requests can
     * be edited. The editable fields are name, description, due date, and status.
     * 
     * <p>Status changes are restricted - only transitions from draft to in_progress are allowed. Attempting
     * to update a non-draft upload request will result in an INVALID_STATUS error. Attempting an invalid
     * status change will result in an INVALID_STATUS_CHANGE error.
     * 
     * @return The call builder
     */
    public UpdateWorkspaceUploadRequestRequestBuilder updateWorkspaceUploadRequest() {
        return new UpdateWorkspaceUploadRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Updates a specific upload request
     * 
     * <p>This operation updates a specific upload request within a workspace. Only draft upload requests can
     * be edited. The editable fields are name, description, due date, and status.
     * 
     * <p>Status changes are restricted - only transitions from draft to in_progress are allowed. Attempting
     * to update a non-draft upload request will result in an INVALID_STATUS error. Attempting an invalid
     * status change will result in an INVALID_STATUS_CHANGE error.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request to update
     * @param updateWorkspaceUploadRequestBody Upload request details for update operations
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWorkspaceUploadRequestResponse updateWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId, UpdateWorkspaceUploadRequestBody updateWorkspaceUploadRequestBody) throws Exception {
        return updateWorkspaceUploadRequest(accountId, workspaceId, uploadRequestId,
            updateWorkspaceUploadRequestBody, Optional.empty());
    }

    /**
     * Updates a specific upload request
     * 
     * <p>This operation updates a specific upload request within a workspace. Only draft upload requests can
     * be edited. The editable fields are name, description, due date, and status.
     * 
     * <p>Status changes are restricted - only transitions from draft to in_progress are allowed. Attempting
     * to update a non-draft upload request will result in an INVALID_STATUS error. Attempting an invalid
     * status change will result in an INVALID_STATUS_CHANGE error.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request to update
     * @param updateWorkspaceUploadRequestBody Upload request details for update operations
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateWorkspaceUploadRequestResponse updateWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId, UpdateWorkspaceUploadRequestBody updateWorkspaceUploadRequestBody,
            Optional<Options> options) throws Exception {
        UpdateWorkspaceUploadRequestRequest request =
            UpdateWorkspaceUploadRequestRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .uploadRequestId(uploadRequestId)
                .updateWorkspaceUploadRequestBody(updateWorkspaceUploadRequestBody)
                .build();
        RequestOperation<UpdateWorkspaceUploadRequestRequest, UpdateWorkspaceUploadRequestResponse> operation
              = new UpdateWorkspaceUploadRequest.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Deletes a specific upload request
     * 
     * <p>This operation deletes a specific upload request within a workspace. Upload requests cannot be
     * deleted if they are complete or have associated documents.
     * 
     * @return The call builder
     */
    public DeleteWorkspaceUploadRequestRequestBuilder deleteWorkspaceUploadRequest() {
        return new DeleteWorkspaceUploadRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Deletes a specific upload request
     * 
     * <p>This operation deletes a specific upload request within a workspace. Upload requests cannot be
     * deleted if they are complete or have associated documents.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request to delete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWorkspaceUploadRequestResponse deleteWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId) throws Exception {
        return deleteWorkspaceUploadRequest(accountId, workspaceId, uploadRequestId,
            Optional.empty());
    }

    /**
     * Deletes a specific upload request
     * 
     * <p>This operation deletes a specific upload request within a workspace. Upload requests cannot be
     * deleted if they are complete or have associated documents.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request to delete
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteWorkspaceUploadRequestResponse deleteWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId, Optional<Options> options) throws Exception {
        DeleteWorkspaceUploadRequestRequest request =
            DeleteWorkspaceUploadRequestRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .uploadRequestId(uploadRequestId)
                .build();
        RequestOperation<DeleteWorkspaceUploadRequestRequest, DeleteWorkspaceUploadRequestResponse> operation
              = new DeleteWorkspaceUploadRequest.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Add a document to an upload request via file upload
     * 
     * <p>This operation adds a document to a specific upload request within a workspace via file upload. The
     * file is passed in the request body as multipart/form-data. The file name is used as the document
     * name.
     * 
     * @return The call builder
     */
    public AddWorkspaceUploadRequestDocumentRequestBuilder addWorkspaceUploadRequestDocument() {
        return new AddWorkspaceUploadRequestDocumentRequestBuilder(sdkConfiguration);
    }

    /**
     * Add a document to an upload request via file upload
     * 
     * <p>This operation adds a document to a specific upload request within a workspace via file upload. The
     * file is passed in the request body as multipart/form-data. The file name is used as the document
     * name.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWorkspaceUploadRequestDocumentResponse addWorkspaceUploadRequestDocument(
            String accountId, String workspaceId,
            String uploadRequestId) throws Exception {
        return addWorkspaceUploadRequestDocument(accountId, workspaceId, uploadRequestId,
            Optional.empty(), Optional.empty());
    }

    /**
     * Add a document to an upload request via file upload
     * 
     * <p>This operation adds a document to a specific upload request within a workspace via file upload. The
     * file is passed in the request body as multipart/form-data. The file name is used as the document
     * name.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request
     * @param addWorkspaceUploadRequestDocumentRequest 
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddWorkspaceUploadRequestDocumentResponse addWorkspaceUploadRequestDocument(
            String accountId, String workspaceId,
            String uploadRequestId, Optional<? extends AddWorkspaceUploadRequestDocumentRequest> addWorkspaceUploadRequestDocumentRequest,
            Optional<Options> options) throws Exception {
        com.docusign.iam.sdk.models.operations.AddWorkspaceUploadRequestDocumentRequest request =
            com.docusign.iam.sdk.models.operations.AddWorkspaceUploadRequestDocumentRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .uploadRequestId(uploadRequestId)
                .addWorkspaceUploadRequestDocumentRequest(addWorkspaceUploadRequestDocumentRequest)
                .build();
        RequestOperation<com.docusign.iam.sdk.models.operations.AddWorkspaceUploadRequestDocumentRequest, AddWorkspaceUploadRequestDocumentResponse> operation
              = new AddWorkspaceUploadRequestDocument.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Complete an upload request
     * 
     * <p>This operation completes a specific upload request within a workspace and is intended to be called
     * by the user completing the upload request. Only upload requests that are in progress can be
     * completed.
     * 
     * @return The call builder
     */
    public CompleteWorkspaceUploadRequestRequestBuilder completeWorkspaceUploadRequest() {
        return new CompleteWorkspaceUploadRequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Complete an upload request
     * 
     * <p>This operation completes a specific upload request within a workspace and is intended to be called
     * by the user completing the upload request. Only upload requests that are in progress can be
     * completed.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request to complete
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CompleteWorkspaceUploadRequestResponse completeWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId) throws Exception {
        return completeWorkspaceUploadRequest(accountId, workspaceId, uploadRequestId,
            Optional.empty());
    }

    /**
     * Complete an upload request
     * 
     * <p>This operation completes a specific upload request within a workspace and is intended to be called
     * by the user completing the upload request. Only upload requests that are in progress can be
     * completed.
     * 
     * @param accountId The ID of the account
     * @param workspaceId The ID of the workspace
     * @param uploadRequestId The ID of the upload request to complete
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CompleteWorkspaceUploadRequestResponse completeWorkspaceUploadRequest(
            String accountId, String workspaceId,
            String uploadRequestId, Optional<Options> options) throws Exception {
        CompleteWorkspaceUploadRequestRequest request =
            CompleteWorkspaceUploadRequestRequest
                .builder()
                .accountId(accountId)
                .workspaceId(workspaceId)
                .uploadRequestId(uploadRequestId)
                .build();
        RequestOperation<CompleteWorkspaceUploadRequestRequest, CompleteWorkspaceUploadRequestResponse> operation
              = new CompleteWorkspaceUploadRequest.Sync(sdkConfiguration, options, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
