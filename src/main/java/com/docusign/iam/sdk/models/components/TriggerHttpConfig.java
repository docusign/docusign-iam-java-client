/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * TriggerHttpConfig
 * 
 * <p>Configuration details specific to HTTP-triggered workflows. This object describes the
 * HTTP method and URL that will trigger the workflow, providing the endpoint and method
 * that should be used to initiate the workflow.
 */
public class TriggerHttpConfig {
    /**
     * The HTTP method used to trigger the workflow. This defines the type of request
     * that will initiate the workflow (e.g., GET, POST).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("method")
    private Optional<? extends Method> method;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public TriggerHttpConfig(
            @JsonProperty("method") Optional<? extends Method> method,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(url, "url");
        this.method = method;
        this.url = url;
    }
    
    public TriggerHttpConfig() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The HTTP method used to trigger the workflow. This defines the type of request
     * that will initiate the workflow (e.g., GET, POST).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Method> method() {
        return (Optional<Method>) method;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The HTTP method used to trigger the workflow. This defines the type of request
     * that will initiate the workflow (e.g., GET, POST).
     */
    public TriggerHttpConfig withMethod(Method method) {
        Utils.checkNotNull(method, "method");
        this.method = Optional.ofNullable(method);
        return this;
    }


    /**
     * The HTTP method used to trigger the workflow. This defines the type of request
     * that will initiate the workflow (e.g., GET, POST).
     */
    public TriggerHttpConfig withMethod(Optional<? extends Method> method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public TriggerHttpConfig withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }


    public TriggerHttpConfig withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TriggerHttpConfig other = (TriggerHttpConfig) o;
        return 
            Utils.enhancedDeepEquals(this.method, other.method) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            method, url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TriggerHttpConfig.class,
                "method", method,
                "url", url);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends Method> method = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The HTTP method used to trigger the workflow. This defines the type of request
         * that will initiate the workflow (e.g., GET, POST).
         */
        public Builder method(Method method) {
            Utils.checkNotNull(method, "method");
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * The HTTP method used to trigger the workflow. This defines the type of request
         * that will initiate the workflow (e.g., GET, POST).
         */
        public Builder method(Optional<? extends Method> method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }


        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public TriggerHttpConfig build() {

            return new TriggerHttpConfig(
                method, url);
        }

    }
}
