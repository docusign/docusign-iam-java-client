/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * WorkflowTriggerRequirementsSuccess
 * 
 * <p>Control information and metadata for the response.
 */
public class WorkflowTriggerRequirementsSuccess {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger_id")
    private Optional<String> triggerId;

    /**
     * The type of event that triggers the workflow. In this case, the workflow is initiated
     * by an HTTP request. Future iterations may support additional event types beyond HTTP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger_event_type")
    private Optional<? extends TriggerEventType> triggerEventType;

    /**
     * Configuration details specific to HTTP-triggered workflows. This object describes the
     * HTTP method and URL that will trigger the workflow, providing the endpoint and method
     * that should be used to initiate the workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger_http_config")
    private Optional<? extends TriggerHttpConfig> triggerHttpConfig;

    /**
     * A list of input fields that define the structure of the data required to trigger the workflow.
     * Each item describes a field that must be included in the request when the workflow is triggered.
     * The schema includes the field name, expected data type, and any default values for the input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger_input_schema")
    private Optional<? extends List<TriggerInputSchema>> triggerInputSchema;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ResourceMetadata> metadata;

    /**
     * The maximum number of items that can be returned in a single page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_limit")
    private JsonNullable<Integer> pageLimit;

    /**
     * The continuation token used to retrieve a page in a paginated response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_token_next")
    private JsonNullable<String> pageTokenNext;

    /**
     * Unique identifier for the request, useful for tracking and debugging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    private JsonNullable<String> requestId;

    /**
     * The timestamp indicating when the response was generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_timestamp")
    private JsonNullable<OffsetDateTime> responseTimestamp;

    /**
     * The duration of time, in milliseconds, that the server took to process and respond
     * to the request. This is measured from the time the server received the request
     * until the time the response was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_duration_ms")
    private JsonNullable<Integer> responseDurationMs;

    @JsonCreator
    public WorkflowTriggerRequirementsSuccess(
            @JsonProperty("trigger_id") Optional<String> triggerId,
            @JsonProperty("trigger_event_type") Optional<? extends TriggerEventType> triggerEventType,
            @JsonProperty("trigger_http_config") Optional<? extends TriggerHttpConfig> triggerHttpConfig,
            @JsonProperty("trigger_input_schema") Optional<? extends List<TriggerInputSchema>> triggerInputSchema,
            @JsonProperty("metadata") Optional<? extends ResourceMetadata> metadata,
            @JsonProperty("page_limit") JsonNullable<Integer> pageLimit,
            @JsonProperty("page_token_next") JsonNullable<String> pageTokenNext,
            @JsonProperty("request_id") JsonNullable<String> requestId,
            @JsonProperty("response_timestamp") JsonNullable<OffsetDateTime> responseTimestamp,
            @JsonProperty("response_duration_ms") JsonNullable<Integer> responseDurationMs) {
        Utils.checkNotNull(triggerId, "triggerId");
        Utils.checkNotNull(triggerEventType, "triggerEventType");
        Utils.checkNotNull(triggerHttpConfig, "triggerHttpConfig");
        Utils.checkNotNull(triggerInputSchema, "triggerInputSchema");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(pageLimit, "pageLimit");
        Utils.checkNotNull(pageTokenNext, "pageTokenNext");
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(responseTimestamp, "responseTimestamp");
        Utils.checkNotNull(responseDurationMs, "responseDurationMs");
        this.triggerId = triggerId;
        this.triggerEventType = triggerEventType;
        this.triggerHttpConfig = triggerHttpConfig;
        this.triggerInputSchema = triggerInputSchema;
        this.metadata = metadata;
        this.pageLimit = pageLimit;
        this.pageTokenNext = pageTokenNext;
        this.requestId = requestId;
        this.responseTimestamp = responseTimestamp;
        this.responseDurationMs = responseDurationMs;
    }
    
    public WorkflowTriggerRequirementsSuccess() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    @JsonIgnore
    public Optional<String> triggerId() {
        return triggerId;
    }

    /**
     * The type of event that triggers the workflow. In this case, the workflow is initiated
     * by an HTTP request. Future iterations may support additional event types beyond HTTP.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TriggerEventType> triggerEventType() {
        return (Optional<TriggerEventType>) triggerEventType;
    }

    /**
     * Configuration details specific to HTTP-triggered workflows. This object describes the
     * HTTP method and URL that will trigger the workflow, providing the endpoint and method
     * that should be used to initiate the workflow.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TriggerHttpConfig> triggerHttpConfig() {
        return (Optional<TriggerHttpConfig>) triggerHttpConfig;
    }

    /**
     * A list of input fields that define the structure of the data required to trigger the workflow.
     * Each item describes a field that must be included in the request when the workflow is triggered.
     * The schema includes the field name, expected data type, and any default values for the input.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TriggerInputSchema>> triggerInputSchema() {
        return (Optional<List<TriggerInputSchema>>) triggerInputSchema;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceMetadata> metadata() {
        return (Optional<ResourceMetadata>) metadata;
    }

    /**
     * The maximum number of items that can be returned in a single page.
     */
    @JsonIgnore
    public JsonNullable<Integer> pageLimit() {
        return pageLimit;
    }

    /**
     * The continuation token used to retrieve a page in a paginated response.
     */
    @JsonIgnore
    public JsonNullable<String> pageTokenNext() {
        return pageTokenNext;
    }

    /**
     * Unique identifier for the request, useful for tracking and debugging.
     */
    @JsonIgnore
    public JsonNullable<String> requestId() {
        return requestId;
    }

    /**
     * The timestamp indicating when the response was generated.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> responseTimestamp() {
        return responseTimestamp;
    }

    /**
     * The duration of time, in milliseconds, that the server took to process and respond
     * to the request. This is measured from the time the server received the request
     * until the time the response was sent.
     */
    @JsonIgnore
    public JsonNullable<Integer> responseDurationMs() {
        return responseDurationMs;
    }

    public static Builder builder() {
        return new Builder();
    }


    public WorkflowTriggerRequirementsSuccess withTriggerId(String triggerId) {
        Utils.checkNotNull(triggerId, "triggerId");
        this.triggerId = Optional.ofNullable(triggerId);
        return this;
    }


    public WorkflowTriggerRequirementsSuccess withTriggerId(Optional<String> triggerId) {
        Utils.checkNotNull(triggerId, "triggerId");
        this.triggerId = triggerId;
        return this;
    }

    /**
     * The type of event that triggers the workflow. In this case, the workflow is initiated
     * by an HTTP request. Future iterations may support additional event types beyond HTTP.
     */
    public WorkflowTriggerRequirementsSuccess withTriggerEventType(TriggerEventType triggerEventType) {
        Utils.checkNotNull(triggerEventType, "triggerEventType");
        this.triggerEventType = Optional.ofNullable(triggerEventType);
        return this;
    }


    /**
     * The type of event that triggers the workflow. In this case, the workflow is initiated
     * by an HTTP request. Future iterations may support additional event types beyond HTTP.
     */
    public WorkflowTriggerRequirementsSuccess withTriggerEventType(Optional<? extends TriggerEventType> triggerEventType) {
        Utils.checkNotNull(triggerEventType, "triggerEventType");
        this.triggerEventType = triggerEventType;
        return this;
    }

    /**
     * Configuration details specific to HTTP-triggered workflows. This object describes the
     * HTTP method and URL that will trigger the workflow, providing the endpoint and method
     * that should be used to initiate the workflow.
     */
    public WorkflowTriggerRequirementsSuccess withTriggerHttpConfig(TriggerHttpConfig triggerHttpConfig) {
        Utils.checkNotNull(triggerHttpConfig, "triggerHttpConfig");
        this.triggerHttpConfig = Optional.ofNullable(triggerHttpConfig);
        return this;
    }


    /**
     * Configuration details specific to HTTP-triggered workflows. This object describes the
     * HTTP method and URL that will trigger the workflow, providing the endpoint and method
     * that should be used to initiate the workflow.
     */
    public WorkflowTriggerRequirementsSuccess withTriggerHttpConfig(Optional<? extends TriggerHttpConfig> triggerHttpConfig) {
        Utils.checkNotNull(triggerHttpConfig, "triggerHttpConfig");
        this.triggerHttpConfig = triggerHttpConfig;
        return this;
    }

    /**
     * A list of input fields that define the structure of the data required to trigger the workflow.
     * Each item describes a field that must be included in the request when the workflow is triggered.
     * The schema includes the field name, expected data type, and any default values for the input.
     */
    public WorkflowTriggerRequirementsSuccess withTriggerInputSchema(List<TriggerInputSchema> triggerInputSchema) {
        Utils.checkNotNull(triggerInputSchema, "triggerInputSchema");
        this.triggerInputSchema = Optional.ofNullable(triggerInputSchema);
        return this;
    }


    /**
     * A list of input fields that define the structure of the data required to trigger the workflow.
     * Each item describes a field that must be included in the request when the workflow is triggered.
     * The schema includes the field name, expected data type, and any default values for the input.
     */
    public WorkflowTriggerRequirementsSuccess withTriggerInputSchema(Optional<? extends List<TriggerInputSchema>> triggerInputSchema) {
        Utils.checkNotNull(triggerInputSchema, "triggerInputSchema");
        this.triggerInputSchema = triggerInputSchema;
        return this;
    }

    public WorkflowTriggerRequirementsSuccess withMetadata(ResourceMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }


    public WorkflowTriggerRequirementsSuccess withMetadata(Optional<? extends ResourceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The maximum number of items that can be returned in a single page.
     */
    public WorkflowTriggerRequirementsSuccess withPageLimit(int pageLimit) {
        Utils.checkNotNull(pageLimit, "pageLimit");
        this.pageLimit = JsonNullable.of(pageLimit);
        return this;
    }

    /**
     * The maximum number of items that can be returned in a single page.
     */
    public WorkflowTriggerRequirementsSuccess withPageLimit(JsonNullable<Integer> pageLimit) {
        Utils.checkNotNull(pageLimit, "pageLimit");
        this.pageLimit = pageLimit;
        return this;
    }

    /**
     * The continuation token used to retrieve a page in a paginated response.
     */
    public WorkflowTriggerRequirementsSuccess withPageTokenNext(String pageTokenNext) {
        Utils.checkNotNull(pageTokenNext, "pageTokenNext");
        this.pageTokenNext = JsonNullable.of(pageTokenNext);
        return this;
    }

    /**
     * The continuation token used to retrieve a page in a paginated response.
     */
    public WorkflowTriggerRequirementsSuccess withPageTokenNext(JsonNullable<String> pageTokenNext) {
        Utils.checkNotNull(pageTokenNext, "pageTokenNext");
        this.pageTokenNext = pageTokenNext;
        return this;
    }

    /**
     * Unique identifier for the request, useful for tracking and debugging.
     */
    public WorkflowTriggerRequirementsSuccess withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = JsonNullable.of(requestId);
        return this;
    }

    /**
     * Unique identifier for the request, useful for tracking and debugging.
     */
    public WorkflowTriggerRequirementsSuccess withRequestId(JsonNullable<String> requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    /**
     * The timestamp indicating when the response was generated.
     */
    public WorkflowTriggerRequirementsSuccess withResponseTimestamp(OffsetDateTime responseTimestamp) {
        Utils.checkNotNull(responseTimestamp, "responseTimestamp");
        this.responseTimestamp = JsonNullable.of(responseTimestamp);
        return this;
    }

    /**
     * The timestamp indicating when the response was generated.
     */
    public WorkflowTriggerRequirementsSuccess withResponseTimestamp(JsonNullable<OffsetDateTime> responseTimestamp) {
        Utils.checkNotNull(responseTimestamp, "responseTimestamp");
        this.responseTimestamp = responseTimestamp;
        return this;
    }

    /**
     * The duration of time, in milliseconds, that the server took to process and respond
     * to the request. This is measured from the time the server received the request
     * until the time the response was sent.
     */
    public WorkflowTriggerRequirementsSuccess withResponseDurationMs(int responseDurationMs) {
        Utils.checkNotNull(responseDurationMs, "responseDurationMs");
        this.responseDurationMs = JsonNullable.of(responseDurationMs);
        return this;
    }

    /**
     * The duration of time, in milliseconds, that the server took to process and respond
     * to the request. This is measured from the time the server received the request
     * until the time the response was sent.
     */
    public WorkflowTriggerRequirementsSuccess withResponseDurationMs(JsonNullable<Integer> responseDurationMs) {
        Utils.checkNotNull(responseDurationMs, "responseDurationMs");
        this.responseDurationMs = responseDurationMs;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowTriggerRequirementsSuccess other = (WorkflowTriggerRequirementsSuccess) o;
        return 
            Utils.enhancedDeepEquals(this.triggerId, other.triggerId) &&
            Utils.enhancedDeepEquals(this.triggerEventType, other.triggerEventType) &&
            Utils.enhancedDeepEquals(this.triggerHttpConfig, other.triggerHttpConfig) &&
            Utils.enhancedDeepEquals(this.triggerInputSchema, other.triggerInputSchema) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.pageLimit, other.pageLimit) &&
            Utils.enhancedDeepEquals(this.pageTokenNext, other.pageTokenNext) &&
            Utils.enhancedDeepEquals(this.requestId, other.requestId) &&
            Utils.enhancedDeepEquals(this.responseTimestamp, other.responseTimestamp) &&
            Utils.enhancedDeepEquals(this.responseDurationMs, other.responseDurationMs);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            triggerId, triggerEventType, triggerHttpConfig,
            triggerInputSchema, metadata, pageLimit,
            pageTokenNext, requestId, responseTimestamp,
            responseDurationMs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowTriggerRequirementsSuccess.class,
                "triggerId", triggerId,
                "triggerEventType", triggerEventType,
                "triggerHttpConfig", triggerHttpConfig,
                "triggerInputSchema", triggerInputSchema,
                "metadata", metadata,
                "pageLimit", pageLimit,
                "pageTokenNext", pageTokenNext,
                "requestId", requestId,
                "responseTimestamp", responseTimestamp,
                "responseDurationMs", responseDurationMs);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> triggerId = Optional.empty();

        private Optional<? extends TriggerEventType> triggerEventType = Optional.empty();

        private Optional<? extends TriggerHttpConfig> triggerHttpConfig = Optional.empty();

        private Optional<? extends List<TriggerInputSchema>> triggerInputSchema = Optional.empty();

        private Optional<? extends ResourceMetadata> metadata = Optional.empty();

        private JsonNullable<Integer> pageLimit = JsonNullable.undefined();

        private JsonNullable<String> pageTokenNext = JsonNullable.undefined();

        private JsonNullable<String> requestId = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> responseTimestamp = JsonNullable.undefined();

        private JsonNullable<Integer> responseDurationMs = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        public Builder triggerId(String triggerId) {
            Utils.checkNotNull(triggerId, "triggerId");
            this.triggerId = Optional.ofNullable(triggerId);
            return this;
        }

        public Builder triggerId(Optional<String> triggerId) {
            Utils.checkNotNull(triggerId, "triggerId");
            this.triggerId = triggerId;
            return this;
        }


        /**
         * The type of event that triggers the workflow. In this case, the workflow is initiated
         * by an HTTP request. Future iterations may support additional event types beyond HTTP.
         */
        public Builder triggerEventType(TriggerEventType triggerEventType) {
            Utils.checkNotNull(triggerEventType, "triggerEventType");
            this.triggerEventType = Optional.ofNullable(triggerEventType);
            return this;
        }

        /**
         * The type of event that triggers the workflow. In this case, the workflow is initiated
         * by an HTTP request. Future iterations may support additional event types beyond HTTP.
         */
        public Builder triggerEventType(Optional<? extends TriggerEventType> triggerEventType) {
            Utils.checkNotNull(triggerEventType, "triggerEventType");
            this.triggerEventType = triggerEventType;
            return this;
        }


        /**
         * Configuration details specific to HTTP-triggered workflows. This object describes the
         * HTTP method and URL that will trigger the workflow, providing the endpoint and method
         * that should be used to initiate the workflow.
         */
        public Builder triggerHttpConfig(TriggerHttpConfig triggerHttpConfig) {
            Utils.checkNotNull(triggerHttpConfig, "triggerHttpConfig");
            this.triggerHttpConfig = Optional.ofNullable(triggerHttpConfig);
            return this;
        }

        /**
         * Configuration details specific to HTTP-triggered workflows. This object describes the
         * HTTP method and URL that will trigger the workflow, providing the endpoint and method
         * that should be used to initiate the workflow.
         */
        public Builder triggerHttpConfig(Optional<? extends TriggerHttpConfig> triggerHttpConfig) {
            Utils.checkNotNull(triggerHttpConfig, "triggerHttpConfig");
            this.triggerHttpConfig = triggerHttpConfig;
            return this;
        }


        /**
         * A list of input fields that define the structure of the data required to trigger the workflow.
         * Each item describes a field that must be included in the request when the workflow is triggered.
         * The schema includes the field name, expected data type, and any default values for the input.
         */
        public Builder triggerInputSchema(List<TriggerInputSchema> triggerInputSchema) {
            Utils.checkNotNull(triggerInputSchema, "triggerInputSchema");
            this.triggerInputSchema = Optional.ofNullable(triggerInputSchema);
            return this;
        }

        /**
         * A list of input fields that define the structure of the data required to trigger the workflow.
         * Each item describes a field that must be included in the request when the workflow is triggered.
         * The schema includes the field name, expected data type, and any default values for the input.
         */
        public Builder triggerInputSchema(Optional<? extends List<TriggerInputSchema>> triggerInputSchema) {
            Utils.checkNotNull(triggerInputSchema, "triggerInputSchema");
            this.triggerInputSchema = triggerInputSchema;
            return this;
        }


        public Builder metadata(ResourceMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends ResourceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The maximum number of items that can be returned in a single page.
         */
        public Builder pageLimit(int pageLimit) {
            Utils.checkNotNull(pageLimit, "pageLimit");
            this.pageLimit = JsonNullable.of(pageLimit);
            return this;
        }

        /**
         * The maximum number of items that can be returned in a single page.
         */
        public Builder pageLimit(JsonNullable<Integer> pageLimit) {
            Utils.checkNotNull(pageLimit, "pageLimit");
            this.pageLimit = pageLimit;
            return this;
        }


        /**
         * The continuation token used to retrieve a page in a paginated response.
         */
        public Builder pageTokenNext(String pageTokenNext) {
            Utils.checkNotNull(pageTokenNext, "pageTokenNext");
            this.pageTokenNext = JsonNullable.of(pageTokenNext);
            return this;
        }

        /**
         * The continuation token used to retrieve a page in a paginated response.
         */
        public Builder pageTokenNext(JsonNullable<String> pageTokenNext) {
            Utils.checkNotNull(pageTokenNext, "pageTokenNext");
            this.pageTokenNext = pageTokenNext;
            return this;
        }


        /**
         * Unique identifier for the request, useful for tracking and debugging.
         */
        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = JsonNullable.of(requestId);
            return this;
        }

        /**
         * Unique identifier for the request, useful for tracking and debugging.
         */
        public Builder requestId(JsonNullable<String> requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }


        /**
         * The timestamp indicating when the response was generated.
         */
        public Builder responseTimestamp(OffsetDateTime responseTimestamp) {
            Utils.checkNotNull(responseTimestamp, "responseTimestamp");
            this.responseTimestamp = JsonNullable.of(responseTimestamp);
            return this;
        }

        /**
         * The timestamp indicating when the response was generated.
         */
        public Builder responseTimestamp(JsonNullable<OffsetDateTime> responseTimestamp) {
            Utils.checkNotNull(responseTimestamp, "responseTimestamp");
            this.responseTimestamp = responseTimestamp;
            return this;
        }


        /**
         * The duration of time, in milliseconds, that the server took to process and respond
         * to the request. This is measured from the time the server received the request
         * until the time the response was sent.
         */
        public Builder responseDurationMs(int responseDurationMs) {
            Utils.checkNotNull(responseDurationMs, "responseDurationMs");
            this.responseDurationMs = JsonNullable.of(responseDurationMs);
            return this;
        }

        /**
         * The duration of time, in milliseconds, that the server took to process and respond
         * to the request. This is measured from the time the server received the request
         * until the time the response was sent.
         */
        public Builder responseDurationMs(JsonNullable<Integer> responseDurationMs) {
            Utils.checkNotNull(responseDurationMs, "responseDurationMs");
            this.responseDurationMs = responseDurationMs;
            return this;
        }

        public WorkflowTriggerRequirementsSuccess build() {

            return new WorkflowTriggerRequirementsSuccess(
                triggerId, triggerEventType, triggerHttpConfig,
                triggerInputSchema, metadata, pageLimit,
                pageTokenNext, requestId, responseTimestamp,
                responseDurationMs);
        }

    }
}
