/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.SDKConfiguration;
import com.docusign.iam.sdk.models.components.WorkspaceEnvelopeForCreate;
import com.docusign.iam.sdk.operations.CreateWorkspaceEnvelope;
import com.docusign.iam.sdk.utils.Options;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class CreateWorkspaceEnvelopeRequestBuilder {

    private String accountId;
    private String workspaceId;
    private WorkspaceEnvelopeForCreate workspaceEnvelopeForCreate;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public CreateWorkspaceEnvelopeRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateWorkspaceEnvelopeRequestBuilder accountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public CreateWorkspaceEnvelopeRequestBuilder workspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    public CreateWorkspaceEnvelopeRequestBuilder workspaceEnvelopeForCreate(WorkspaceEnvelopeForCreate workspaceEnvelopeForCreate) {
        Utils.checkNotNull(workspaceEnvelopeForCreate, "workspaceEnvelopeForCreate");
        this.workspaceEnvelopeForCreate = workspaceEnvelopeForCreate;
        return this;
    }
                
    public CreateWorkspaceEnvelopeRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public CreateWorkspaceEnvelopeRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private CreateWorkspaceEnvelopeRequest buildRequest() {

        CreateWorkspaceEnvelopeRequest request = new CreateWorkspaceEnvelopeRequest(accountId,
            workspaceId,
            workspaceEnvelopeForCreate);

        return request;
    }

    public CreateWorkspaceEnvelopeResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<CreateWorkspaceEnvelopeRequest, CreateWorkspaceEnvelopeResponse> operation
              = new CreateWorkspaceEnvelope.Sync(sdkConfiguration, options);
        CreateWorkspaceEnvelopeRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
