/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

public class RelatedAgreementDocuments {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_agreement_document_id")
    private Optional<String> parentAgreementDocumentId;

    @JsonCreator
    public RelatedAgreementDocuments(
            @JsonProperty("parent_agreement_document_id") Optional<String> parentAgreementDocumentId) {
        Utils.checkNotNull(parentAgreementDocumentId, "parentAgreementDocumentId");
        this.parentAgreementDocumentId = parentAgreementDocumentId;
    }
    
    public RelatedAgreementDocuments() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> parentAgreementDocumentId() {
        return parentAgreementDocumentId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public RelatedAgreementDocuments withParentAgreementDocumentId(String parentAgreementDocumentId) {
        Utils.checkNotNull(parentAgreementDocumentId, "parentAgreementDocumentId");
        this.parentAgreementDocumentId = Optional.ofNullable(parentAgreementDocumentId);
        return this;
    }

    public RelatedAgreementDocuments withParentAgreementDocumentId(Optional<String> parentAgreementDocumentId) {
        Utils.checkNotNull(parentAgreementDocumentId, "parentAgreementDocumentId");
        this.parentAgreementDocumentId = parentAgreementDocumentId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RelatedAgreementDocuments other = (RelatedAgreementDocuments) o;
        return 
            Utils.enhancedDeepEquals(this.parentAgreementDocumentId, other.parentAgreementDocumentId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parentAgreementDocumentId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RelatedAgreementDocuments.class,
                "parentAgreementDocumentId", parentAgreementDocumentId);
    }
    
    public final static class Builder {
 
        private Optional<String> parentAgreementDocumentId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder parentAgreementDocumentId(String parentAgreementDocumentId) {
            Utils.checkNotNull(parentAgreementDocumentId, "parentAgreementDocumentId");
            this.parentAgreementDocumentId = Optional.ofNullable(parentAgreementDocumentId);
            return this;
        }

        public Builder parentAgreementDocumentId(Optional<String> parentAgreementDocumentId) {
            Utils.checkNotNull(parentAgreementDocumentId, "parentAgreementDocumentId");
            this.parentAgreementDocumentId = parentAgreementDocumentId;
            return this;
        }
        
        public RelatedAgreementDocuments build() {
            return new RelatedAgreementDocuments(
                parentAgreementDocumentId);
        }
    }
}
