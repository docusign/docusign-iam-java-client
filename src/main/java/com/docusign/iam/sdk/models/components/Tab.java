/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

public class Tab {

    @JsonProperty("extensionData")
    private TabExtensionData extensionData;

    /**
     * Indicates the type of tab
     */
    @JsonProperty("tabType")
    private String tabType;

    /**
     * A regular expression used to validate input for the tab.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationPattern")
    private Optional<String> validationPattern;

    /**
     * The message displayed if the custom tab fails input validation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationMessage")
    private Optional<String> validationMessage;

    /**
     * The label associated to a verification field in a document.
     */
    @JsonProperty("tabLabel")
    private String tabLabel;

    /**
     * The radio button properties for the tab (if the tab is of radio type)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radios")
    private Optional<? extends List<String>> radios;

    @JsonCreator
    public Tab(
            @JsonProperty("extensionData") TabExtensionData extensionData,
            @JsonProperty("tabType") String tabType,
            @JsonProperty("validationPattern") Optional<String> validationPattern,
            @JsonProperty("validationMessage") Optional<String> validationMessage,
            @JsonProperty("tabLabel") String tabLabel,
            @JsonProperty("radios") Optional<? extends List<String>> radios) {
        Utils.checkNotNull(extensionData, "extensionData");
        Utils.checkNotNull(tabType, "tabType");
        Utils.checkNotNull(validationPattern, "validationPattern");
        Utils.checkNotNull(validationMessage, "validationMessage");
        Utils.checkNotNull(tabLabel, "tabLabel");
        Utils.checkNotNull(radios, "radios");
        this.extensionData = extensionData;
        this.tabType = tabType;
        this.validationPattern = validationPattern;
        this.validationMessage = validationMessage;
        this.tabLabel = tabLabel;
        this.radios = radios;
    }
    
    public Tab(
            TabExtensionData extensionData,
            String tabType,
            String tabLabel) {
        this(extensionData, tabType, Optional.empty(), Optional.empty(), tabLabel, Optional.empty());
    }

    @JsonIgnore
    public TabExtensionData extensionData() {
        return extensionData;
    }

    /**
     * Indicates the type of tab
     */
    @JsonIgnore
    public String tabType() {
        return tabType;
    }

    /**
     * A regular expression used to validate input for the tab.
     */
    @JsonIgnore
    public Optional<String> validationPattern() {
        return validationPattern;
    }

    /**
     * The message displayed if the custom tab fails input validation
     */
    @JsonIgnore
    public Optional<String> validationMessage() {
        return validationMessage;
    }

    /**
     * The label associated to a verification field in a document.
     */
    @JsonIgnore
    public String tabLabel() {
        return tabLabel;
    }

    /**
     * The radio button properties for the tab (if the tab is of radio type)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> radios() {
        return (Optional<List<String>>) radios;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Tab withExtensionData(TabExtensionData extensionData) {
        Utils.checkNotNull(extensionData, "extensionData");
        this.extensionData = extensionData;
        return this;
    }

    /**
     * Indicates the type of tab
     */
    public Tab withTabType(String tabType) {
        Utils.checkNotNull(tabType, "tabType");
        this.tabType = tabType;
        return this;
    }

    /**
     * A regular expression used to validate input for the tab.
     */
    public Tab withValidationPattern(String validationPattern) {
        Utils.checkNotNull(validationPattern, "validationPattern");
        this.validationPattern = Optional.ofNullable(validationPattern);
        return this;
    }

    /**
     * A regular expression used to validate input for the tab.
     */
    public Tab withValidationPattern(Optional<String> validationPattern) {
        Utils.checkNotNull(validationPattern, "validationPattern");
        this.validationPattern = validationPattern;
        return this;
    }

    /**
     * The message displayed if the custom tab fails input validation
     */
    public Tab withValidationMessage(String validationMessage) {
        Utils.checkNotNull(validationMessage, "validationMessage");
        this.validationMessage = Optional.ofNullable(validationMessage);
        return this;
    }

    /**
     * The message displayed if the custom tab fails input validation
     */
    public Tab withValidationMessage(Optional<String> validationMessage) {
        Utils.checkNotNull(validationMessage, "validationMessage");
        this.validationMessage = validationMessage;
        return this;
    }

    /**
     * The label associated to a verification field in a document.
     */
    public Tab withTabLabel(String tabLabel) {
        Utils.checkNotNull(tabLabel, "tabLabel");
        this.tabLabel = tabLabel;
        return this;
    }

    /**
     * The radio button properties for the tab (if the tab is of radio type)
     */
    public Tab withRadios(List<String> radios) {
        Utils.checkNotNull(radios, "radios");
        this.radios = Optional.ofNullable(radios);
        return this;
    }

    /**
     * The radio button properties for the tab (if the tab is of radio type)
     */
    public Tab withRadios(Optional<? extends List<String>> radios) {
        Utils.checkNotNull(radios, "radios");
        this.radios = radios;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Tab other = (Tab) o;
        return 
            Utils.enhancedDeepEquals(this.extensionData, other.extensionData) &&
            Utils.enhancedDeepEquals(this.tabType, other.tabType) &&
            Utils.enhancedDeepEquals(this.validationPattern, other.validationPattern) &&
            Utils.enhancedDeepEquals(this.validationMessage, other.validationMessage) &&
            Utils.enhancedDeepEquals(this.tabLabel, other.tabLabel) &&
            Utils.enhancedDeepEquals(this.radios, other.radios);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            extensionData,
            tabType,
            validationPattern,
            validationMessage,
            tabLabel,
            radios);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Tab.class,
                "extensionData", extensionData,
                "tabType", tabType,
                "validationPattern", validationPattern,
                "validationMessage", validationMessage,
                "tabLabel", tabLabel,
                "radios", radios);
    }
    
    public final static class Builder {
 
        private TabExtensionData extensionData;
 
        private String tabType;
 
        private Optional<String> validationPattern = Optional.empty();
 
        private Optional<String> validationMessage = Optional.empty();
 
        private String tabLabel;
 
        private Optional<? extends List<String>> radios = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder extensionData(TabExtensionData extensionData) {
            Utils.checkNotNull(extensionData, "extensionData");
            this.extensionData = extensionData;
            return this;
        }

        /**
         * Indicates the type of tab
         */
        public Builder tabType(String tabType) {
            Utils.checkNotNull(tabType, "tabType");
            this.tabType = tabType;
            return this;
        }

        /**
         * A regular expression used to validate input for the tab.
         */
        public Builder validationPattern(String validationPattern) {
            Utils.checkNotNull(validationPattern, "validationPattern");
            this.validationPattern = Optional.ofNullable(validationPattern);
            return this;
        }

        /**
         * A regular expression used to validate input for the tab.
         */
        public Builder validationPattern(Optional<String> validationPattern) {
            Utils.checkNotNull(validationPattern, "validationPattern");
            this.validationPattern = validationPattern;
            return this;
        }

        /**
         * The message displayed if the custom tab fails input validation
         */
        public Builder validationMessage(String validationMessage) {
            Utils.checkNotNull(validationMessage, "validationMessage");
            this.validationMessage = Optional.ofNullable(validationMessage);
            return this;
        }

        /**
         * The message displayed if the custom tab fails input validation
         */
        public Builder validationMessage(Optional<String> validationMessage) {
            Utils.checkNotNull(validationMessage, "validationMessage");
            this.validationMessage = validationMessage;
            return this;
        }

        /**
         * The label associated to a verification field in a document.
         */
        public Builder tabLabel(String tabLabel) {
            Utils.checkNotNull(tabLabel, "tabLabel");
            this.tabLabel = tabLabel;
            return this;
        }

        /**
         * The radio button properties for the tab (if the tab is of radio type)
         */
        public Builder radios(List<String> radios) {
            Utils.checkNotNull(radios, "radios");
            this.radios = Optional.ofNullable(radios);
            return this;
        }

        /**
         * The radio button properties for the tab (if the tab is of radio type)
         */
        public Builder radios(Optional<? extends List<String>> radios) {
            Utils.checkNotNull(radios, "radios");
            this.radios = radios;
            return this;
        }
        
        public Tab build() {
            return new Tab(
                extensionData,
                tabType,
                validationPattern,
                validationMessage,
                tabLabel,
                radios);
        }
    }
}
