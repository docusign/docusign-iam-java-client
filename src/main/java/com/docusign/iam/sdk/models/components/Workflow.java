/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Workflow {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    /**
     * A user-provided name for this workflow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private JsonNullable<String> accountId;

    /**
     * Indicates the readiness and deployment status of a workflow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ResourceMetadata> metadata;

    @JsonCreator
    public Workflow(
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("account_id") JsonNullable<String> accountId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("metadata") Optional<? extends ResourceMetadata> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(metadata, "metadata");
        this.id = id;
        this.name = name;
        this.accountId = accountId;
        this.status = status;
        this.metadata = metadata;
    }
    
    public Workflow() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    /**
     * A user-provided name for this workflow
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> accountId() {
        return accountId;
    }

    /**
     * Indicates the readiness and deployment status of a workflow
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceMetadata> metadata() {
        return (Optional<ResourceMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Workflow withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    public Workflow withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A user-provided name for this workflow
     */
    public Workflow withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * A user-provided name for this workflow
     */
    public Workflow withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Workflow withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = JsonNullable.of(accountId);
        return this;
    }

    public Workflow withAccountId(JsonNullable<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Indicates the readiness and deployment status of a workflow
     */
    public Workflow withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Indicates the readiness and deployment status of a workflow
     */
    public Workflow withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public Workflow withMetadata(ResourceMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public Workflow withMetadata(Optional<? extends ResourceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Workflow other = (Workflow) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            accountId,
            status,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Workflow.class,
                "id", id,
                "name", name,
                "accountId", accountId,
                "status", status,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> id;
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<String> accountId;
 
        private Optional<String> status = Optional.empty();
 
        private Optional<? extends ResourceMetadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A user-provided name for this workflow
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * A user-provided name for this workflow
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = JsonNullable.of(accountId);
            return this;
        }

        public Builder accountId(JsonNullable<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * Indicates the readiness and deployment status of a workflow
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Indicates the readiness and deployment status of a workflow
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder metadata(ResourceMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends ResourceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public Workflow build() {
            if (id == null) {
                id = _SINGLETON_VALUE_Id.value();
            }
            if (accountId == null) {
                accountId = _SINGLETON_VALUE_AccountId.value();
            }
            return new Workflow(
                id,
                name,
                accountId,
                status,
                metadata);
        }

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_Id =
                new LazySingletonValue<>(
                        "id",
                        "\"00000000-0000-0000-0000-000000000000\"",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_AccountId =
                new LazySingletonValue<>(
                        "account_id",
                        "\"00000000-0000-0000-0000-000000000000\"",
                        new TypeReference<JsonNullable<String>>() {});
    }
}
