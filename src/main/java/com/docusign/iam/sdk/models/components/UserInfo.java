/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class UserInfo {

    @JsonProperty("sub")
    private String sub;


    @JsonProperty("name")
    private String name;


    @JsonProperty("given_name")
    private String givenName;


    @JsonProperty("family_name")
    private String familyName;


    @JsonProperty("created")
    private String created;


    @JsonProperty("email")
    private String email;


    @JsonProperty("accounts")
    private List<Account> accounts;

    @JsonCreator
    public UserInfo(
            @JsonProperty("sub") String sub,
            @JsonProperty("name") String name,
            @JsonProperty("given_name") String givenName,
            @JsonProperty("family_name") String familyName,
            @JsonProperty("created") String created,
            @JsonProperty("email") String email,
            @JsonProperty("accounts") List<Account> accounts) {
        Utils.checkNotNull(sub, "sub");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(accounts, "accounts");
        this.sub = sub;
        this.name = name;
        this.givenName = givenName;
        this.familyName = familyName;
        this.created = created;
        this.email = email;
        this.accounts = accounts;
    }

    @JsonIgnore
    public String sub() {
        return sub;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String givenName() {
        return givenName;
    }

    @JsonIgnore
    public String familyName() {
        return familyName;
    }

    @JsonIgnore
    public String created() {
        return created;
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    @JsonIgnore
    public List<Account> accounts() {
        return accounts;
    }

    public static Builder builder() {
        return new Builder();
    }


    public UserInfo withSub(String sub) {
        Utils.checkNotNull(sub, "sub");
        this.sub = sub;
        return this;
    }

    public UserInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public UserInfo withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    public UserInfo withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    public UserInfo withCreated(String created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public UserInfo withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public UserInfo withAccounts(List<Account> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserInfo other = (UserInfo) o;
        return 
            Utils.enhancedDeepEquals(this.sub, other.sub) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.givenName, other.givenName) &&
            Utils.enhancedDeepEquals(this.familyName, other.familyName) &&
            Utils.enhancedDeepEquals(this.created, other.created) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.accounts, other.accounts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            sub, name, givenName,
            familyName, created, email,
            accounts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserInfo.class,
                "sub", sub,
                "name", name,
                "givenName", givenName,
                "familyName", familyName,
                "created", created,
                "email", email,
                "accounts", accounts);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String sub;

        private String name;

        private String givenName;

        private String familyName;

        private String created;

        private String email;

        private List<Account> accounts;

        private Builder() {
          // force use of static builder() method
        }


        public Builder sub(String sub) {
            Utils.checkNotNull(sub, "sub");
            this.sub = sub;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }


        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }


        public Builder created(String created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }


        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        public Builder accounts(List<Account> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }

        public UserInfo build() {

            return new UserInfo(
                sub, name, givenName,
                familyName, created, email,
                accounts);
        }

    }
}
