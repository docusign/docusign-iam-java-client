/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class WorkspaceEnvelopeForCreate {
    /**
     * The name for the envelope
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("envelope_name")
    private Optional<String> envelopeName;

    /**
     * The optional list of document IDs to be added to the envelope
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_ids")
    private JsonNullable<? extends List<String>> documentIds;

    @JsonCreator
    public WorkspaceEnvelopeForCreate(
            @JsonProperty("envelope_name") Optional<String> envelopeName,
            @JsonProperty("document_ids") JsonNullable<? extends List<String>> documentIds) {
        Utils.checkNotNull(envelopeName, "envelopeName");
        Utils.checkNotNull(documentIds, "documentIds");
        this.envelopeName = envelopeName;
        this.documentIds = documentIds;
    }
    
    public WorkspaceEnvelopeForCreate() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The name for the envelope
     */
    @JsonIgnore
    public Optional<String> envelopeName() {
        return envelopeName;
    }

    /**
     * The optional list of document IDs to be added to the envelope
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> documentIds() {
        return (JsonNullable<List<String>>) documentIds;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name for the envelope
     */
    public WorkspaceEnvelopeForCreate withEnvelopeName(String envelopeName) {
        Utils.checkNotNull(envelopeName, "envelopeName");
        this.envelopeName = Optional.ofNullable(envelopeName);
        return this;
    }


    /**
     * The name for the envelope
     */
    public WorkspaceEnvelopeForCreate withEnvelopeName(Optional<String> envelopeName) {
        Utils.checkNotNull(envelopeName, "envelopeName");
        this.envelopeName = envelopeName;
        return this;
    }

    /**
     * The optional list of document IDs to be added to the envelope
     */
    public WorkspaceEnvelopeForCreate withDocumentIds(List<String> documentIds) {
        Utils.checkNotNull(documentIds, "documentIds");
        this.documentIds = JsonNullable.of(documentIds);
        return this;
    }

    /**
     * The optional list of document IDs to be added to the envelope
     */
    public WorkspaceEnvelopeForCreate withDocumentIds(JsonNullable<? extends List<String>> documentIds) {
        Utils.checkNotNull(documentIds, "documentIds");
        this.documentIds = documentIds;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceEnvelopeForCreate other = (WorkspaceEnvelopeForCreate) o;
        return 
            Utils.enhancedDeepEquals(this.envelopeName, other.envelopeName) &&
            Utils.enhancedDeepEquals(this.documentIds, other.documentIds);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            envelopeName, documentIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceEnvelopeForCreate.class,
                "envelopeName", envelopeName,
                "documentIds", documentIds);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> envelopeName = Optional.empty();

        private JsonNullable<? extends List<String>> documentIds = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name for the envelope
         */
        public Builder envelopeName(String envelopeName) {
            Utils.checkNotNull(envelopeName, "envelopeName");
            this.envelopeName = Optional.ofNullable(envelopeName);
            return this;
        }

        /**
         * The name for the envelope
         */
        public Builder envelopeName(Optional<String> envelopeName) {
            Utils.checkNotNull(envelopeName, "envelopeName");
            this.envelopeName = envelopeName;
            return this;
        }


        /**
         * The optional list of document IDs to be added to the envelope
         */
        public Builder documentIds(List<String> documentIds) {
            Utils.checkNotNull(documentIds, "documentIds");
            this.documentIds = JsonNullable.of(documentIds);
            return this;
        }

        /**
         * The optional list of document IDs to be added to the envelope
         */
        public Builder documentIds(JsonNullable<? extends List<String>> documentIds) {
            Utils.checkNotNull(documentIds, "documentIds");
            this.documentIds = documentIds;
            return this;
        }

        public WorkspaceEnvelopeForCreate build() {

            return new WorkspaceEnvelopeForCreate(
                envelopeName, documentIds);
        }

    }
}
