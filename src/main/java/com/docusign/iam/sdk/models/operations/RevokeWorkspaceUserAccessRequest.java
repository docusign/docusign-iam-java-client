/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.models.components.RevokeWorkspaceUserDetails;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class RevokeWorkspaceUserAccessRequest {
    /**
     * The ID of the account
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private String accountId;

    /**
     * The ID of the workspace to revoke access from
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspaceId")
    private String workspaceId;

    /**
     * The ID of the user to be revoked from the workspace
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=userId")
    private String userId;

    /**
     * Optional details. Allows scheduling the revocation for the future
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails;

    @JsonCreator
    public RevokeWorkspaceUserAccessRequest(
            String accountId,
            String workspaceId,
            String userId,
            Optional<? extends RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(revokeWorkspaceUserDetails, "revokeWorkspaceUserDetails");
        this.accountId = accountId;
        this.workspaceId = workspaceId;
        this.userId = userId;
        this.revokeWorkspaceUserDetails = revokeWorkspaceUserDetails;
    }
    
    public RevokeWorkspaceUserAccessRequest(
            String accountId,
            String workspaceId,
            String userId) {
        this(accountId, workspaceId, userId,
            Optional.empty());
    }

    /**
     * The ID of the account
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * The ID of the workspace to revoke access from
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    /**
     * The ID of the user to be revoked from the workspace
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    /**
     * Optional details. Allows scheduling the revocation for the future
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails() {
        return (Optional<RevokeWorkspaceUserDetails>) revokeWorkspaceUserDetails;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the account
     */
    public RevokeWorkspaceUserAccessRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The ID of the workspace to revoke access from
     */
    public RevokeWorkspaceUserAccessRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The ID of the user to be revoked from the workspace
     */
    public RevokeWorkspaceUserAccessRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Optional details. Allows scheduling the revocation for the future
     */
    public RevokeWorkspaceUserAccessRequest withRevokeWorkspaceUserDetails(RevokeWorkspaceUserDetails revokeWorkspaceUserDetails) {
        Utils.checkNotNull(revokeWorkspaceUserDetails, "revokeWorkspaceUserDetails");
        this.revokeWorkspaceUserDetails = Optional.ofNullable(revokeWorkspaceUserDetails);
        return this;
    }


    /**
     * Optional details. Allows scheduling the revocation for the future
     */
    public RevokeWorkspaceUserAccessRequest withRevokeWorkspaceUserDetails(Optional<? extends RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails) {
        Utils.checkNotNull(revokeWorkspaceUserDetails, "revokeWorkspaceUserDetails");
        this.revokeWorkspaceUserDetails = revokeWorkspaceUserDetails;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RevokeWorkspaceUserAccessRequest other = (RevokeWorkspaceUserAccessRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.revokeWorkspaceUserDetails, other.revokeWorkspaceUserDetails);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, workspaceId, userId,
            revokeWorkspaceUserDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RevokeWorkspaceUserAccessRequest.class,
                "accountId", accountId,
                "workspaceId", workspaceId,
                "userId", userId,
                "revokeWorkspaceUserDetails", revokeWorkspaceUserDetails);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountId;

        private String workspaceId;

        private String userId;

        private Optional<? extends RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the account
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The ID of the workspace to revoke access from
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * The ID of the user to be revoked from the workspace
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }


        /**
         * Optional details. Allows scheduling the revocation for the future
         */
        public Builder revokeWorkspaceUserDetails(RevokeWorkspaceUserDetails revokeWorkspaceUserDetails) {
            Utils.checkNotNull(revokeWorkspaceUserDetails, "revokeWorkspaceUserDetails");
            this.revokeWorkspaceUserDetails = Optional.ofNullable(revokeWorkspaceUserDetails);
            return this;
        }

        /**
         * Optional details. Allows scheduling the revocation for the future
         */
        public Builder revokeWorkspaceUserDetails(Optional<? extends RevokeWorkspaceUserDetails> revokeWorkspaceUserDetails) {
            Utils.checkNotNull(revokeWorkspaceUserDetails, "revokeWorkspaceUserDetails");
            this.revokeWorkspaceUserDetails = revokeWorkspaceUserDetails;
            return this;
        }

        public RevokeWorkspaceUserAccessRequest build() {

            return new RevokeWorkspaceUserAccessRequest(
                accountId, workspaceId, userId,
                revokeWorkspaceUserDetails);
        }

    }
}
