/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.utils.HasSecurity;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;

public class GetTokenFromConfidentialAuthCodeSecurity implements HasSecurity {

    @JsonProperty("clientId")
    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=custom,name=clientId")
    private String clientId;

    @JsonProperty("secretKey")
    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=custom,name=secretKey")
    private String secretKey;

    @JsonCreator
    public GetTokenFromConfidentialAuthCodeSecurity(
            @JsonProperty("clientId") String clientId,
            @JsonProperty("secretKey") String secretKey) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(secretKey, "secretKey");
        this.clientId = clientId;
        this.secretKey = secretKey;
    }

    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    @JsonIgnore
    public String secretKey() {
        return secretKey;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetTokenFromConfidentialAuthCodeSecurity withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    public GetTokenFromConfidentialAuthCodeSecurity withSecretKey(String secretKey) {
        Utils.checkNotNull(secretKey, "secretKey");
        this.secretKey = secretKey;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTokenFromConfidentialAuthCodeSecurity other = (GetTokenFromConfidentialAuthCodeSecurity) o;
        return 
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.secretKey, other.secretKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientId,
            secretKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTokenFromConfidentialAuthCodeSecurity.class,
                "clientId", clientId,
                "secretKey", secretKey);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String secretKey;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        public Builder secretKey(String secretKey) {
            Utils.checkNotNull(secretKey, "secretKey");
            this.secretKey = secretKey;
            return this;
        }
        
        public GetTokenFromConfidentialAuthCodeSecurity build() {
            return new GetTokenFromConfidentialAuthCodeSecurity(
                clientId,
                secretKey);
        }
    }
}
