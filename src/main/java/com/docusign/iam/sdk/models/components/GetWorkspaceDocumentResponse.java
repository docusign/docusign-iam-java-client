/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetWorkspaceDocumentResponse {
    /**
     * The ID of the workspace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace_id")
    private JsonNullable<String> workspaceId;

    /**
     * The ID of the document
     */
    @JsonProperty("document_id")
    private String documentId;

    /**
     * The name of the document
     */
    @JsonProperty("name")
    private String name;

    /**
     * The ID of the owner of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;

    /**
     * The size of the document in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private JsonNullable<Long> size;

    /**
     * The date the document was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_date")
    private JsonNullable<OffsetDateTime> createdDate;

    /**
     * The document content type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_type")
    private JsonNullable<String> contentType;

    @JsonCreator
    public GetWorkspaceDocumentResponse(
            @JsonProperty("workspace_id") JsonNullable<String> workspaceId,
            @JsonProperty("document_id") String documentId,
            @JsonProperty("name") String name,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("size") JsonNullable<Long> size,
            @JsonProperty("created_date") JsonNullable<OffsetDateTime> createdDate,
            @JsonProperty("content_type") JsonNullable<String> contentType) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(contentType, "contentType");
        this.workspaceId = workspaceId;
        this.documentId = documentId;
        this.name = name;
        this.ownerId = ownerId;
        this.size = size;
        this.createdDate = createdDate;
        this.contentType = contentType;
    }
    
    public GetWorkspaceDocumentResponse(
            String documentId,
            String name) {
        this(JsonNullable.undefined(), documentId, name,
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public JsonNullable<String> workspaceId() {
        return workspaceId;
    }

    /**
     * The ID of the document
     */
    @JsonIgnore
    public String documentId() {
        return documentId;
    }

    /**
     * The name of the document
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The ID of the owner of the document
     */
    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    /**
     * The size of the document in bytes
     */
    @JsonIgnore
    public JsonNullable<Long> size() {
        return size;
    }

    /**
     * The date the document was created
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdDate() {
        return createdDate;
    }

    /**
     * The document content type
     */
    @JsonIgnore
    public JsonNullable<String> contentType() {
        return contentType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the workspace
     */
    public GetWorkspaceDocumentResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = JsonNullable.of(workspaceId);
        return this;
    }

    /**
     * The ID of the workspace
     */
    public GetWorkspaceDocumentResponse withWorkspaceId(JsonNullable<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The ID of the document
     */
    public GetWorkspaceDocumentResponse withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The name of the document
     */
    public GetWorkspaceDocumentResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the owner of the document
     */
    public GetWorkspaceDocumentResponse withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    /**
     * The ID of the owner of the document
     */
    public GetWorkspaceDocumentResponse withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    /**
     * The size of the document in bytes
     */
    public GetWorkspaceDocumentResponse withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = JsonNullable.of(size);
        return this;
    }

    /**
     * The size of the document in bytes
     */
    public GetWorkspaceDocumentResponse withSize(JsonNullable<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * The date the document was created
     */
    public GetWorkspaceDocumentResponse withCreatedDate(OffsetDateTime createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = JsonNullable.of(createdDate);
        return this;
    }

    /**
     * The date the document was created
     */
    public GetWorkspaceDocumentResponse withCreatedDate(JsonNullable<OffsetDateTime> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    /**
     * The document content type
     */
    public GetWorkspaceDocumentResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = JsonNullable.of(contentType);
        return this;
    }

    /**
     * The document content type
     */
    public GetWorkspaceDocumentResponse withContentType(JsonNullable<String> contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkspaceDocumentResponse other = (GetWorkspaceDocumentResponse) o;
        return 
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.documentId, other.documentId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.createdDate, other.createdDate) &&
            Utils.enhancedDeepEquals(this.contentType, other.contentType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            workspaceId, documentId, name,
            ownerId, size, createdDate,
            contentType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkspaceDocumentResponse.class,
                "workspaceId", workspaceId,
                "documentId", documentId,
                "name", name,
                "ownerId", ownerId,
                "size", size,
                "createdDate", createdDate,
                "contentType", contentType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> workspaceId = JsonNullable.undefined();

        private String documentId;

        private String name;

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<Long> size = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdDate = JsonNullable.undefined();

        private JsonNullable<String> contentType = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = JsonNullable.of(workspaceId);
            return this;
        }

        /**
         * The ID of the workspace
         */
        public Builder workspaceId(JsonNullable<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * The ID of the document
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }


        /**
         * The name of the document
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The ID of the owner of the document
         */
        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        /**
         * The ID of the owner of the document
         */
        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        /**
         * The size of the document in bytes
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = JsonNullable.of(size);
            return this;
        }

        /**
         * The size of the document in bytes
         */
        public Builder size(JsonNullable<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        /**
         * The date the document was created
         */
        public Builder createdDate(OffsetDateTime createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = JsonNullable.of(createdDate);
            return this;
        }

        /**
         * The date the document was created
         */
        public Builder createdDate(JsonNullable<OffsetDateTime> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }


        /**
         * The document content type
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = JsonNullable.of(contentType);
            return this;
        }

        /**
         * The document content type
         */
        public Builder contentType(JsonNullable<String> contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        public GetWorkspaceDocumentResponse build() {

            return new GetWorkspaceDocumentResponse(
                workspaceId, documentId, name,
                ownerId, size, createdDate,
                contentType);
        }

    }
}
