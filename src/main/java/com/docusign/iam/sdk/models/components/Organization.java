/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class Organization {

    @JsonProperty("organization_id")
    private String organizationId;

    @JsonProperty("links")
    private List<Link> links;

    @JsonCreator
    public Organization(
            @JsonProperty("organization_id") String organizationId,
            @JsonProperty("links") List<Link> links) {
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(links, "links");
        this.organizationId = organizationId;
        this.links = links;
    }

    @JsonIgnore
    public String organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public List<Link> links() {
        return links;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Organization withOrganizationId(String organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public Organization withLinks(List<Link> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Organization other = (Organization) o;
        return 
            Objects.deepEquals(this.organizationId, other.organizationId) &&
            Objects.deepEquals(this.links, other.links);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            organizationId,
            links);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Organization.class,
                "organizationId", organizationId,
                "links", links);
    }
    
    public final static class Builder {
 
        private String organizationId;
 
        private List<Link> links;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder organizationId(String organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder links(List<Link> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }
        
        public Organization build() {
            return new Organization(
                organizationId,
                links);
        }
    }
}
