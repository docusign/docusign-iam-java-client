/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * WorkspaceEnvelopeSummary
 * 
 * <p>The summary of the envelope in the workspace
 */
public class WorkspaceEnvelopeSummary {
    /**
     * The ID of the envelope
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("envelope_id")
    private Optional<String> envelopeId;

    /**
     * The status of the envelope in the workspace
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The envelope name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The envelope subject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private JsonNullable<String> subject;

    /**
     * The date the envelope was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_date")
    private JsonNullable<OffsetDateTime> createdDate;

    /**
     * The date the envelope was last updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_updated_date")
    private JsonNullable<OffsetDateTime> lastUpdatedDate;

    @JsonCreator
    public WorkspaceEnvelopeSummary(
            @JsonProperty("envelope_id") Optional<String> envelopeId,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("subject") JsonNullable<String> subject,
            @JsonProperty("created_date") JsonNullable<OffsetDateTime> createdDate,
            @JsonProperty("last_updated_date") JsonNullable<OffsetDateTime> lastUpdatedDate) {
        Utils.checkNotNull(envelopeId, "envelopeId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
        this.envelopeId = envelopeId;
        this.status = status;
        this.name = name;
        this.subject = subject;
        this.createdDate = createdDate;
        this.lastUpdatedDate = lastUpdatedDate;
    }
    
    public WorkspaceEnvelopeSummary() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the envelope
     */
    @JsonIgnore
    public Optional<String> envelopeId() {
        return envelopeId;
    }

    /**
     * The status of the envelope in the workspace
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The envelope name
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The envelope subject
     */
    @JsonIgnore
    public JsonNullable<String> subject() {
        return subject;
    }

    /**
     * The date the envelope was created
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdDate() {
        return createdDate;
    }

    /**
     * The date the envelope was last updated
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastUpdatedDate() {
        return lastUpdatedDate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the envelope
     */
    public WorkspaceEnvelopeSummary withEnvelopeId(String envelopeId) {
        Utils.checkNotNull(envelopeId, "envelopeId");
        this.envelopeId = Optional.ofNullable(envelopeId);
        return this;
    }


    /**
     * The ID of the envelope
     */
    public WorkspaceEnvelopeSummary withEnvelopeId(Optional<String> envelopeId) {
        Utils.checkNotNull(envelopeId, "envelopeId");
        this.envelopeId = envelopeId;
        return this;
    }

    /**
     * The status of the envelope in the workspace
     */
    public WorkspaceEnvelopeSummary withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * The status of the envelope in the workspace
     */
    public WorkspaceEnvelopeSummary withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The envelope name
     */
    public WorkspaceEnvelopeSummary withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The envelope name
     */
    public WorkspaceEnvelopeSummary withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The envelope subject
     */
    public WorkspaceEnvelopeSummary withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = JsonNullable.of(subject);
        return this;
    }

    /**
     * The envelope subject
     */
    public WorkspaceEnvelopeSummary withSubject(JsonNullable<String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    /**
     * The date the envelope was created
     */
    public WorkspaceEnvelopeSummary withCreatedDate(OffsetDateTime createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = JsonNullable.of(createdDate);
        return this;
    }

    /**
     * The date the envelope was created
     */
    public WorkspaceEnvelopeSummary withCreatedDate(JsonNullable<OffsetDateTime> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    /**
     * The date the envelope was last updated
     */
    public WorkspaceEnvelopeSummary withLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
        Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
        this.lastUpdatedDate = JsonNullable.of(lastUpdatedDate);
        return this;
    }

    /**
     * The date the envelope was last updated
     */
    public WorkspaceEnvelopeSummary withLastUpdatedDate(JsonNullable<OffsetDateTime> lastUpdatedDate) {
        Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceEnvelopeSummary other = (WorkspaceEnvelopeSummary) o;
        return 
            Utils.enhancedDeepEquals(this.envelopeId, other.envelopeId) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.createdDate, other.createdDate) &&
            Utils.enhancedDeepEquals(this.lastUpdatedDate, other.lastUpdatedDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            envelopeId, status, name,
            subject, createdDate, lastUpdatedDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceEnvelopeSummary.class,
                "envelopeId", envelopeId,
                "status", status,
                "name", name,
                "subject", subject,
                "createdDate", createdDate,
                "lastUpdatedDate", lastUpdatedDate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> envelopeId = Optional.empty();

        private Optional<String> status = Optional.empty();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> subject = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> lastUpdatedDate = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the envelope
         */
        public Builder envelopeId(String envelopeId) {
            Utils.checkNotNull(envelopeId, "envelopeId");
            this.envelopeId = Optional.ofNullable(envelopeId);
            return this;
        }

        /**
         * The ID of the envelope
         */
        public Builder envelopeId(Optional<String> envelopeId) {
            Utils.checkNotNull(envelopeId, "envelopeId");
            this.envelopeId = envelopeId;
            return this;
        }


        /**
         * The status of the envelope in the workspace
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the envelope in the workspace
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * The envelope name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The envelope name
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The envelope subject
         */
        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = JsonNullable.of(subject);
            return this;
        }

        /**
         * The envelope subject
         */
        public Builder subject(JsonNullable<String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }


        /**
         * The date the envelope was created
         */
        public Builder createdDate(OffsetDateTime createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = JsonNullable.of(createdDate);
            return this;
        }

        /**
         * The date the envelope was created
         */
        public Builder createdDate(JsonNullable<OffsetDateTime> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }


        /**
         * The date the envelope was last updated
         */
        public Builder lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
            Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
            this.lastUpdatedDate = JsonNullable.of(lastUpdatedDate);
            return this;
        }

        /**
         * The date the envelope was last updated
         */
        public Builder lastUpdatedDate(JsonNullable<OffsetDateTime> lastUpdatedDate) {
            Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
            this.lastUpdatedDate = lastUpdatedDate;
            return this;
        }

        public WorkspaceEnvelopeSummary build() {

            return new WorkspaceEnvelopeSummary(
                envelopeId, status, name,
                subject, createdDate, lastUpdatedDate);
        }

    }
}
