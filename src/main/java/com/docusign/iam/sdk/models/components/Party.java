/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Party
 * 
 * <p>A party is a person, group, or organization that is involved in a contract and has legally binding obligations and responsibilities. They also seek to benefit from the agreement.
 */
public class Party {

    /**
     * Unique identifier for the party, mapped to the party entity reference.
     */
    @JsonProperty("id")
    private String id;

    /**
     * Name of the party as it appears in the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_in_agreement")
    private JsonNullable<String> nameInAgreement;

    /**
     * Formal name of the party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_name")
    private JsonNullable<String> preferredName;

    @JsonCreator
    public Party(
            @JsonProperty("id") String id,
            @JsonProperty("name_in_agreement") JsonNullable<String> nameInAgreement,
            @JsonProperty("preferred_name") JsonNullable<String> preferredName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(nameInAgreement, "nameInAgreement");
        Utils.checkNotNull(preferredName, "preferredName");
        this.id = id;
        this.nameInAgreement = nameInAgreement;
        this.preferredName = preferredName;
    }
    
    public Party(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Unique identifier for the party, mapped to the party entity reference.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Name of the party as it appears in the agreement.
     */
    @JsonIgnore
    public JsonNullable<String> nameInAgreement() {
        return nameInAgreement;
    }

    /**
     * Formal name of the party.
     */
    @JsonIgnore
    public JsonNullable<String> preferredName() {
        return preferredName;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for the party, mapped to the party entity reference.
     */
    public Party withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the party as it appears in the agreement.
     */
    public Party withNameInAgreement(String nameInAgreement) {
        Utils.checkNotNull(nameInAgreement, "nameInAgreement");
        this.nameInAgreement = JsonNullable.of(nameInAgreement);
        return this;
    }

    /**
     * Name of the party as it appears in the agreement.
     */
    public Party withNameInAgreement(JsonNullable<String> nameInAgreement) {
        Utils.checkNotNull(nameInAgreement, "nameInAgreement");
        this.nameInAgreement = nameInAgreement;
        return this;
    }

    /**
     * Formal name of the party.
     */
    public Party withPreferredName(String preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = JsonNullable.of(preferredName);
        return this;
    }

    /**
     * Formal name of the party.
     */
    public Party withPreferredName(JsonNullable<String> preferredName) {
        Utils.checkNotNull(preferredName, "preferredName");
        this.preferredName = preferredName;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Party other = (Party) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.nameInAgreement, other.nameInAgreement) &&
            Utils.enhancedDeepEquals(this.preferredName, other.preferredName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            nameInAgreement,
            preferredName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Party.class,
                "id", id,
                "nameInAgreement", nameInAgreement,
                "preferredName", preferredName);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<String> nameInAgreement = JsonNullable.undefined();
 
        private JsonNullable<String> preferredName = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the party, mapped to the party entity reference.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the party as it appears in the agreement.
         */
        public Builder nameInAgreement(String nameInAgreement) {
            Utils.checkNotNull(nameInAgreement, "nameInAgreement");
            this.nameInAgreement = JsonNullable.of(nameInAgreement);
            return this;
        }

        /**
         * Name of the party as it appears in the agreement.
         */
        public Builder nameInAgreement(JsonNullable<String> nameInAgreement) {
            Utils.checkNotNull(nameInAgreement, "nameInAgreement");
            this.nameInAgreement = nameInAgreement;
            return this;
        }

        /**
         * Formal name of the party.
         */
        public Builder preferredName(String preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = JsonNullable.of(preferredName);
            return this;
        }

        /**
         * Formal name of the party.
         */
        public Builder preferredName(JsonNullable<String> preferredName) {
            Utils.checkNotNull(preferredName, "preferredName");
            this.preferredName = preferredName;
            return this;
        }
        
        public Party build() {
            return new Party(
                id,
                nameInAgreement,
                preferredName);
        }
    }
}
