/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class GetWorkflowsListRequest {
    /**
     * The unique identifier of the account.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private String accountId;

    /**
     * Filter workflows by their status. If provided, only workflows with the specified status will be
     * returned.
     * - `active`: Returns only active workflows.
     * - `inactive`: Returns only inactive workflows.
     * - `publishing`: Returns workflows currently being published.
     * - `unpublishing`: Returns workflows currently being unpublished.
     * - `archived`: Returns workflows that have been archived.
     * - `archiving`: Returns workflows currently being archived.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    private Optional<? extends Status> status;

    @JsonCreator
    public GetWorkflowsListRequest(
            String accountId,
            Optional<? extends Status> status) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(status, "status");
        this.accountId = accountId;
        this.status = status;
    }
    
    public GetWorkflowsListRequest(
            String accountId) {
        this(accountId, Optional.empty());
    }

    /**
     * The unique identifier of the account.
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * Filter workflows by their status. If provided, only workflows with the specified status will be
     * returned.
     * - `active`: Returns only active workflows.
     * - `inactive`: Returns only inactive workflows.
     * - `publishing`: Returns workflows currently being published.
     * - `unpublishing`: Returns workflows currently being unpublished.
     * - `archived`: Returns workflows that have been archived.
     * - `archiving`: Returns workflows currently being archived.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The unique identifier of the account.
     */
    public GetWorkflowsListRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Filter workflows by their status. If provided, only workflows with the specified status will be
     * returned.
     * - `active`: Returns only active workflows.
     * - `inactive`: Returns only inactive workflows.
     * - `publishing`: Returns workflows currently being published.
     * - `unpublishing`: Returns workflows currently being unpublished.
     * - `archived`: Returns workflows that have been archived.
     * - `archiving`: Returns workflows currently being archived.
     */
    public GetWorkflowsListRequest withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    /**
     * Filter workflows by their status. If provided, only workflows with the specified status will be
     * returned.
     * - `active`: Returns only active workflows.
     * - `inactive`: Returns only inactive workflows.
     * - `publishing`: Returns workflows currently being published.
     * - `unpublishing`: Returns workflows currently being unpublished.
     * - `archived`: Returns workflows that have been archived.
     * - `archiving`: Returns workflows currently being archived.
     */
    public GetWorkflowsListRequest withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkflowsListRequest other = (GetWorkflowsListRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkflowsListRequest.class,
                "accountId", accountId,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountId;

        private Optional<? extends Status> status = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The unique identifier of the account.
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * Filter workflows by their status. If provided, only workflows with the specified status will be
         * returned.
         * - `active`: Returns only active workflows.
         * - `inactive`: Returns only inactive workflows.
         * - `publishing`: Returns workflows currently being published.
         * - `unpublishing`: Returns workflows currently being unpublished.
         * - `archived`: Returns workflows that have been archived.
         * - `archiving`: Returns workflows currently being archived.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Filter workflows by their status. If provided, only workflows with the specified status will be
         * returned.
         * - `active`: Returns only active workflows.
         * - `inactive`: Returns only inactive workflows.
         * - `publishing`: Returns workflows currently being published.
         * - `unpublishing`: Returns workflows currently being unpublished.
         * - `archived`: Returns workflows that have been archived.
         * - `archiving`: Returns workflows currently being archived.
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public GetWorkflowsListRequest build() {

            return new GetWorkflowsListRequest(
                accountId, status);
        }

    }
}
