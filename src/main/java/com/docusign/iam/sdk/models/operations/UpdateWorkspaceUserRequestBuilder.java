/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.SDKConfiguration;
import com.docusign.iam.sdk.models.components.WorkspaceUserForUpdate;
import com.docusign.iam.sdk.operations.UpdateWorkspaceUser;
import com.docusign.iam.sdk.utils.Headers;
import com.docusign.iam.sdk.utils.Options;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class UpdateWorkspaceUserRequestBuilder {

    private String accountId;
    private String workspaceId;
    private String userId;
    private Optional<? extends WorkspaceUserForUpdate> workspaceUserForUpdate = Optional.empty();
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public UpdateWorkspaceUserRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UpdateWorkspaceUserRequestBuilder accountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public UpdateWorkspaceUserRequestBuilder workspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    public UpdateWorkspaceUserRequestBuilder userId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
                
    public UpdateWorkspaceUserRequestBuilder workspaceUserForUpdate(WorkspaceUserForUpdate workspaceUserForUpdate) {
        Utils.checkNotNull(workspaceUserForUpdate, "workspaceUserForUpdate");
        this.workspaceUserForUpdate = Optional.of(workspaceUserForUpdate);
        return this;
    }

    public UpdateWorkspaceUserRequestBuilder workspaceUserForUpdate(Optional<? extends WorkspaceUserForUpdate> workspaceUserForUpdate) {
        Utils.checkNotNull(workspaceUserForUpdate, "workspaceUserForUpdate");
        this.workspaceUserForUpdate = workspaceUserForUpdate;
        return this;
    }
                
    public UpdateWorkspaceUserRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public UpdateWorkspaceUserRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private UpdateWorkspaceUserRequest buildRequest() {

        UpdateWorkspaceUserRequest request = new UpdateWorkspaceUserRequest(accountId,
            workspaceId,
            userId,
            workspaceUserForUpdate);

        return request;
    }

    public UpdateWorkspaceUserResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<UpdateWorkspaceUserRequest, UpdateWorkspaceUserResponse> operation
              = new UpdateWorkspaceUser.Sync(sdkConfiguration, options, _headers);
        UpdateWorkspaceUserRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
