/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.models.components.CreateWorkspaceBody;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;


public class CreateWorkspaceRequest {
    /**
     * The ID of the account
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private String accountId;

    /**
     * The details of the workspace to be created including the name
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateWorkspaceBody createWorkspaceBody;

    @JsonCreator
    public CreateWorkspaceRequest(
            String accountId,
            CreateWorkspaceBody createWorkspaceBody) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(createWorkspaceBody, "createWorkspaceBody");
        this.accountId = accountId;
        this.createWorkspaceBody = createWorkspaceBody;
    }

    /**
     * The ID of the account
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * The details of the workspace to be created including the name
     */
    @JsonIgnore
    public CreateWorkspaceBody createWorkspaceBody() {
        return createWorkspaceBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the account
     */
    public CreateWorkspaceRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The details of the workspace to be created including the name
     */
    public CreateWorkspaceRequest withCreateWorkspaceBody(CreateWorkspaceBody createWorkspaceBody) {
        Utils.checkNotNull(createWorkspaceBody, "createWorkspaceBody");
        this.createWorkspaceBody = createWorkspaceBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWorkspaceRequest other = (CreateWorkspaceRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.createWorkspaceBody, other.createWorkspaceBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, createWorkspaceBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWorkspaceRequest.class,
                "accountId", accountId,
                "createWorkspaceBody", createWorkspaceBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountId;

        private CreateWorkspaceBody createWorkspaceBody;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the account
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The details of the workspace to be created including the name
         */
        public Builder createWorkspaceBody(CreateWorkspaceBody createWorkspaceBody) {
            Utils.checkNotNull(createWorkspaceBody, "createWorkspaceBody");
            this.createWorkspaceBody = createWorkspaceBody;
            return this;
        }

        public CreateWorkspaceRequest build() {

            return new CreateWorkspaceRequest(
                accountId, createWorkspaceBody);
        }

    }
}
