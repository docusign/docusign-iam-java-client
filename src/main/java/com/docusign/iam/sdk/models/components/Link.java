/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;


public class Link {

    @JsonProperty("rel")
    private String rel;


    @JsonProperty("href")
    private String href;

    @JsonCreator
    public Link(
            @JsonProperty("rel") String rel,
            @JsonProperty("href") String href) {
        Utils.checkNotNull(rel, "rel");
        Utils.checkNotNull(href, "href");
        this.rel = rel;
        this.href = href;
    }

    @JsonIgnore
    public String rel() {
        return rel;
    }

    @JsonIgnore
    public String href() {
        return href;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Link withRel(String rel) {
        Utils.checkNotNull(rel, "rel");
        this.rel = rel;
        return this;
    }

    public Link withHref(String href) {
        Utils.checkNotNull(href, "href");
        this.href = href;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Link other = (Link) o;
        return 
            Utils.enhancedDeepEquals(this.rel, other.rel) &&
            Utils.enhancedDeepEquals(this.href, other.href);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            rel, href);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Link.class,
                "rel", rel,
                "href", href);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String rel;

        private String href;

        private Builder() {
          // force use of static builder() method
        }


        public Builder rel(String rel) {
            Utils.checkNotNull(rel, "rel");
            this.rel = rel;
            return this;
        }


        public Builder href(String href) {
            Utils.checkNotNull(href, "href");
            this.href = href;
            return this;
        }

        public Link build() {

            return new Link(
                rel, href);
        }

    }
}
