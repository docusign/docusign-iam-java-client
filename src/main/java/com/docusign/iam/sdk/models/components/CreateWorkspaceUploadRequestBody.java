/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;


public class CreateWorkspaceUploadRequestBody {
    /**
     * The name of the upload request
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of the upload request
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The due date for the upload request
     */
    @JsonProperty("due_date")
    private OffsetDateTime dueDate;

    /**
     * List of user assignments for the upload request
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("assignments")
    private Optional<? extends List<CreateWorkspaceUploadRequestAssignment>> assignments;

    /**
     * Enum representing the status of a workspace upload request
     */
    @JsonProperty("status")
    private WorkspaceUploadRequestStatus status;

    @JsonCreator
    public CreateWorkspaceUploadRequestBody(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("due_date") OffsetDateTime dueDate,
            @JsonProperty("assignments") Optional<? extends List<CreateWorkspaceUploadRequestAssignment>> assignments,
            @JsonProperty("status") WorkspaceUploadRequestStatus status) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(assignments, "assignments");
        Utils.checkNotNull(status, "status");
        this.name = name;
        this.description = description;
        this.dueDate = dueDate;
        this.assignments = assignments;
        this.status = status;
    }
    
    public CreateWorkspaceUploadRequestBody(
            OffsetDateTime dueDate,
            WorkspaceUploadRequestStatus status) {
        this(Optional.empty(), Optional.empty(), dueDate,
            Optional.empty(), status);
    }

    /**
     * The name of the upload request
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of the upload request
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The due date for the upload request
     */
    @JsonIgnore
    public OffsetDateTime dueDate() {
        return dueDate;
    }

    /**
     * List of user assignments for the upload request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CreateWorkspaceUploadRequestAssignment>> assignments() {
        return (Optional<List<CreateWorkspaceUploadRequestAssignment>>) assignments;
    }

    /**
     * Enum representing the status of a workspace upload request
     */
    @JsonIgnore
    public WorkspaceUploadRequestStatus status() {
        return status;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the upload request
     */
    public CreateWorkspaceUploadRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of the upload request
     */
    public CreateWorkspaceUploadRequestBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the upload request
     */
    public CreateWorkspaceUploadRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    /**
     * The description of the upload request
     */
    public CreateWorkspaceUploadRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The due date for the upload request
     */
    public CreateWorkspaceUploadRequestBody withDueDate(OffsetDateTime dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * List of user assignments for the upload request
     */
    public CreateWorkspaceUploadRequestBody withAssignments(List<CreateWorkspaceUploadRequestAssignment> assignments) {
        Utils.checkNotNull(assignments, "assignments");
        this.assignments = Optional.ofNullable(assignments);
        return this;
    }


    /**
     * List of user assignments for the upload request
     */
    public CreateWorkspaceUploadRequestBody withAssignments(Optional<? extends List<CreateWorkspaceUploadRequestAssignment>> assignments) {
        Utils.checkNotNull(assignments, "assignments");
        this.assignments = assignments;
        return this;
    }

    /**
     * Enum representing the status of a workspace upload request
     */
    public CreateWorkspaceUploadRequestBody withStatus(WorkspaceUploadRequestStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWorkspaceUploadRequestBody other = (CreateWorkspaceUploadRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.assignments, other.assignments) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, description, dueDate,
            assignments, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWorkspaceUploadRequestBody.class,
                "name", name,
                "description", description,
                "dueDate", dueDate,
                "assignments", assignments,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private OffsetDateTime dueDate;

        private Optional<? extends List<CreateWorkspaceUploadRequestAssignment>> assignments = Optional.empty();

        private WorkspaceUploadRequestStatus status;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the upload request
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the upload request
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The description of the upload request
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the upload request
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        /**
         * The due date for the upload request
         */
        public Builder dueDate(OffsetDateTime dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }


        /**
         * List of user assignments for the upload request
         */
        public Builder assignments(List<CreateWorkspaceUploadRequestAssignment> assignments) {
            Utils.checkNotNull(assignments, "assignments");
            this.assignments = Optional.ofNullable(assignments);
            return this;
        }

        /**
         * List of user assignments for the upload request
         */
        public Builder assignments(Optional<? extends List<CreateWorkspaceUploadRequestAssignment>> assignments) {
            Utils.checkNotNull(assignments, "assignments");
            this.assignments = assignments;
            return this;
        }


        /**
         * Enum representing the status of a workspace upload request
         */
        public Builder status(WorkspaceUploadRequestStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public CreateWorkspaceUploadRequestBody build() {

            return new CreateWorkspaceUploadRequestBody(
                name, description, dueDate,
                assignments, status);
        }

    }
}
