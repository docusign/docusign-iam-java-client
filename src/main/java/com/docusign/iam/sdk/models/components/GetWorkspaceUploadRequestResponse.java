/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetWorkspaceUploadRequestResponse
 * 
 * <p>Upload request details - single upload request response
 */
public class GetWorkspaceUploadRequestResponse {
    /**
     * The ID of the upload request
     */
    @JsonProperty("upload_request_id")
    private String uploadRequestId;

    /**
     * The ID of the workspace
     */
    @JsonProperty("workspace_id")
    private String workspaceId;

    /**
     * The name of the upload request
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of the upload request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;


    @JsonProperty("upload_request_owner")
    private WorkspaceUploadRequestOwner uploadRequestOwner;

    /**
     * Enum representing the status of a workspace upload request
     */
    @JsonProperty("status")
    private WorkspaceUploadRequestStatus status;

    /**
     * List of documents associated with the upload request
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("documents")
    private Optional<? extends List<WorkspaceUploadRequestDocument>> documents;

    /**
     * List of user assignments for the upload request
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("assignments")
    private Optional<? extends List<WorkspaceUploadRequestAssignment>> assignments;

    /**
     * The date the upload request was created
     */
    @JsonProperty("created_date")
    private OffsetDateTime createdDate;

    /**
     * The date the upload request was last updated
     */
    @JsonProperty("updated_date")
    private OffsetDateTime updatedDate;

    /**
     * The due date for the upload request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")
    private JsonNullable<OffsetDateTime> dueDate;

    /**
     * The date the upload request was sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sent_date")
    private JsonNullable<OffsetDateTime> sentDate;

    /**
     * The date the upload request was completed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_date")
    private JsonNullable<OffsetDateTime> completedDate;

    /**
     * Whether the current user can view the upload request
     */
    @JsonProperty("can_view")
    private boolean canView;

    /**
     * Whether the current user can edit the upload request
     */
    @JsonProperty("can_edit")
    private boolean canEdit;

    /**
     * Whether the current user can delete the upload request
     */
    @JsonProperty("can_delete")
    private boolean canDelete;

    @JsonCreator
    public GetWorkspaceUploadRequestResponse(
            @JsonProperty("upload_request_id") String uploadRequestId,
            @JsonProperty("workspace_id") String workspaceId,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("upload_request_owner") WorkspaceUploadRequestOwner uploadRequestOwner,
            @JsonProperty("status") WorkspaceUploadRequestStatus status,
            @JsonProperty("documents") Optional<? extends List<WorkspaceUploadRequestDocument>> documents,
            @JsonProperty("assignments") Optional<? extends List<WorkspaceUploadRequestAssignment>> assignments,
            @JsonProperty("created_date") OffsetDateTime createdDate,
            @JsonProperty("updated_date") OffsetDateTime updatedDate,
            @JsonProperty("due_date") JsonNullable<OffsetDateTime> dueDate,
            @JsonProperty("sent_date") JsonNullable<OffsetDateTime> sentDate,
            @JsonProperty("completed_date") JsonNullable<OffsetDateTime> completedDate,
            @JsonProperty("can_view") boolean canView,
            @JsonProperty("can_edit") boolean canEdit,
            @JsonProperty("can_delete") boolean canDelete) {
        Utils.checkNotNull(uploadRequestId, "uploadRequestId");
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(uploadRequestOwner, "uploadRequestOwner");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(assignments, "assignments");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(updatedDate, "updatedDate");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(sentDate, "sentDate");
        Utils.checkNotNull(completedDate, "completedDate");
        Utils.checkNotNull(canView, "canView");
        Utils.checkNotNull(canEdit, "canEdit");
        Utils.checkNotNull(canDelete, "canDelete");
        this.uploadRequestId = uploadRequestId;
        this.workspaceId = workspaceId;
        this.name = name;
        this.description = description;
        this.uploadRequestOwner = uploadRequestOwner;
        this.status = status;
        this.documents = documents;
        this.assignments = assignments;
        this.createdDate = createdDate;
        this.updatedDate = updatedDate;
        this.dueDate = dueDate;
        this.sentDate = sentDate;
        this.completedDate = completedDate;
        this.canView = canView;
        this.canEdit = canEdit;
        this.canDelete = canDelete;
    }
    
    public GetWorkspaceUploadRequestResponse(
            String uploadRequestId,
            String workspaceId,
            WorkspaceUploadRequestOwner uploadRequestOwner,
            WorkspaceUploadRequestStatus status,
            OffsetDateTime createdDate,
            OffsetDateTime updatedDate,
            boolean canView,
            boolean canEdit,
            boolean canDelete) {
        this(uploadRequestId, workspaceId, Optional.empty(),
            JsonNullable.undefined(), uploadRequestOwner, status,
            Optional.empty(), Optional.empty(), createdDate,
            updatedDate, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), canView, canEdit,
            canDelete);
    }

    /**
     * The ID of the upload request
     */
    @JsonIgnore
    public String uploadRequestId() {
        return uploadRequestId;
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    /**
     * The name of the upload request
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of the upload request
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    @JsonIgnore
    public WorkspaceUploadRequestOwner uploadRequestOwner() {
        return uploadRequestOwner;
    }

    /**
     * Enum representing the status of a workspace upload request
     */
    @JsonIgnore
    public WorkspaceUploadRequestStatus status() {
        return status;
    }

    /**
     * List of documents associated with the upload request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<WorkspaceUploadRequestDocument>> documents() {
        return (Optional<List<WorkspaceUploadRequestDocument>>) documents;
    }

    /**
     * List of user assignments for the upload request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<WorkspaceUploadRequestAssignment>> assignments() {
        return (Optional<List<WorkspaceUploadRequestAssignment>>) assignments;
    }

    /**
     * The date the upload request was created
     */
    @JsonIgnore
    public OffsetDateTime createdDate() {
        return createdDate;
    }

    /**
     * The date the upload request was last updated
     */
    @JsonIgnore
    public OffsetDateTime updatedDate() {
        return updatedDate;
    }

    /**
     * The due date for the upload request
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> dueDate() {
        return dueDate;
    }

    /**
     * The date the upload request was sent
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> sentDate() {
        return sentDate;
    }

    /**
     * The date the upload request was completed
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> completedDate() {
        return completedDate;
    }

    /**
     * Whether the current user can view the upload request
     */
    @JsonIgnore
    public boolean canView() {
        return canView;
    }

    /**
     * Whether the current user can edit the upload request
     */
    @JsonIgnore
    public boolean canEdit() {
        return canEdit;
    }

    /**
     * Whether the current user can delete the upload request
     */
    @JsonIgnore
    public boolean canDelete() {
        return canDelete;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the upload request
     */
    public GetWorkspaceUploadRequestResponse withUploadRequestId(String uploadRequestId) {
        Utils.checkNotNull(uploadRequestId, "uploadRequestId");
        this.uploadRequestId = uploadRequestId;
        return this;
    }

    /**
     * The ID of the workspace
     */
    public GetWorkspaceUploadRequestResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The name of the upload request
     */
    public GetWorkspaceUploadRequestResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of the upload request
     */
    public GetWorkspaceUploadRequestResponse withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the upload request
     */
    public GetWorkspaceUploadRequestResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the upload request
     */
    public GetWorkspaceUploadRequestResponse withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public GetWorkspaceUploadRequestResponse withUploadRequestOwner(WorkspaceUploadRequestOwner uploadRequestOwner) {
        Utils.checkNotNull(uploadRequestOwner, "uploadRequestOwner");
        this.uploadRequestOwner = uploadRequestOwner;
        return this;
    }

    /**
     * Enum representing the status of a workspace upload request
     */
    public GetWorkspaceUploadRequestResponse withStatus(WorkspaceUploadRequestStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * List of documents associated with the upload request
     */
    public GetWorkspaceUploadRequestResponse withDocuments(List<WorkspaceUploadRequestDocument> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }


    /**
     * List of documents associated with the upload request
     */
    public GetWorkspaceUploadRequestResponse withDocuments(Optional<? extends List<WorkspaceUploadRequestDocument>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * List of user assignments for the upload request
     */
    public GetWorkspaceUploadRequestResponse withAssignments(List<WorkspaceUploadRequestAssignment> assignments) {
        Utils.checkNotNull(assignments, "assignments");
        this.assignments = Optional.ofNullable(assignments);
        return this;
    }


    /**
     * List of user assignments for the upload request
     */
    public GetWorkspaceUploadRequestResponse withAssignments(Optional<? extends List<WorkspaceUploadRequestAssignment>> assignments) {
        Utils.checkNotNull(assignments, "assignments");
        this.assignments = assignments;
        return this;
    }

    /**
     * The date the upload request was created
     */
    public GetWorkspaceUploadRequestResponse withCreatedDate(OffsetDateTime createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    /**
     * The date the upload request was last updated
     */
    public GetWorkspaceUploadRequestResponse withUpdatedDate(OffsetDateTime updatedDate) {
        Utils.checkNotNull(updatedDate, "updatedDate");
        this.updatedDate = updatedDate;
        return this;
    }

    /**
     * The due date for the upload request
     */
    public GetWorkspaceUploadRequestResponse withDueDate(OffsetDateTime dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = JsonNullable.of(dueDate);
        return this;
    }

    /**
     * The due date for the upload request
     */
    public GetWorkspaceUploadRequestResponse withDueDate(JsonNullable<OffsetDateTime> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * The date the upload request was sent
     */
    public GetWorkspaceUploadRequestResponse withSentDate(OffsetDateTime sentDate) {
        Utils.checkNotNull(sentDate, "sentDate");
        this.sentDate = JsonNullable.of(sentDate);
        return this;
    }

    /**
     * The date the upload request was sent
     */
    public GetWorkspaceUploadRequestResponse withSentDate(JsonNullable<OffsetDateTime> sentDate) {
        Utils.checkNotNull(sentDate, "sentDate");
        this.sentDate = sentDate;
        return this;
    }

    /**
     * The date the upload request was completed
     */
    public GetWorkspaceUploadRequestResponse withCompletedDate(OffsetDateTime completedDate) {
        Utils.checkNotNull(completedDate, "completedDate");
        this.completedDate = JsonNullable.of(completedDate);
        return this;
    }

    /**
     * The date the upload request was completed
     */
    public GetWorkspaceUploadRequestResponse withCompletedDate(JsonNullable<OffsetDateTime> completedDate) {
        Utils.checkNotNull(completedDate, "completedDate");
        this.completedDate = completedDate;
        return this;
    }

    /**
     * Whether the current user can view the upload request
     */
    public GetWorkspaceUploadRequestResponse withCanView(boolean canView) {
        Utils.checkNotNull(canView, "canView");
        this.canView = canView;
        return this;
    }

    /**
     * Whether the current user can edit the upload request
     */
    public GetWorkspaceUploadRequestResponse withCanEdit(boolean canEdit) {
        Utils.checkNotNull(canEdit, "canEdit");
        this.canEdit = canEdit;
        return this;
    }

    /**
     * Whether the current user can delete the upload request
     */
    public GetWorkspaceUploadRequestResponse withCanDelete(boolean canDelete) {
        Utils.checkNotNull(canDelete, "canDelete");
        this.canDelete = canDelete;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkspaceUploadRequestResponse other = (GetWorkspaceUploadRequestResponse) o;
        return 
            Utils.enhancedDeepEquals(this.uploadRequestId, other.uploadRequestId) &&
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.uploadRequestOwner, other.uploadRequestOwner) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.documents, other.documents) &&
            Utils.enhancedDeepEquals(this.assignments, other.assignments) &&
            Utils.enhancedDeepEquals(this.createdDate, other.createdDate) &&
            Utils.enhancedDeepEquals(this.updatedDate, other.updatedDate) &&
            Utils.enhancedDeepEquals(this.dueDate, other.dueDate) &&
            Utils.enhancedDeepEquals(this.sentDate, other.sentDate) &&
            Utils.enhancedDeepEquals(this.completedDate, other.completedDate) &&
            Utils.enhancedDeepEquals(this.canView, other.canView) &&
            Utils.enhancedDeepEquals(this.canEdit, other.canEdit) &&
            Utils.enhancedDeepEquals(this.canDelete, other.canDelete);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uploadRequestId, workspaceId, name,
            description, uploadRequestOwner, status,
            documents, assignments, createdDate,
            updatedDate, dueDate, sentDate,
            completedDate, canView, canEdit,
            canDelete);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkspaceUploadRequestResponse.class,
                "uploadRequestId", uploadRequestId,
                "workspaceId", workspaceId,
                "name", name,
                "description", description,
                "uploadRequestOwner", uploadRequestOwner,
                "status", status,
                "documents", documents,
                "assignments", assignments,
                "createdDate", createdDate,
                "updatedDate", updatedDate,
                "dueDate", dueDate,
                "sentDate", sentDate,
                "completedDate", completedDate,
                "canView", canView,
                "canEdit", canEdit,
                "canDelete", canDelete);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String uploadRequestId;

        private String workspaceId;

        private Optional<String> name = Optional.empty();

        private JsonNullable<String> description = JsonNullable.undefined();

        private WorkspaceUploadRequestOwner uploadRequestOwner;

        private WorkspaceUploadRequestStatus status;

        private Optional<? extends List<WorkspaceUploadRequestDocument>> documents = Optional.empty();

        private Optional<? extends List<WorkspaceUploadRequestAssignment>> assignments = Optional.empty();

        private OffsetDateTime createdDate;

        private OffsetDateTime updatedDate;

        private JsonNullable<OffsetDateTime> dueDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> sentDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> completedDate = JsonNullable.undefined();

        private Boolean canView;

        private Boolean canEdit;

        private Boolean canDelete;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the upload request
         */
        public Builder uploadRequestId(String uploadRequestId) {
            Utils.checkNotNull(uploadRequestId, "uploadRequestId");
            this.uploadRequestId = uploadRequestId;
            return this;
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * The name of the upload request
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the upload request
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The description of the upload request
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the upload request
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder uploadRequestOwner(WorkspaceUploadRequestOwner uploadRequestOwner) {
            Utils.checkNotNull(uploadRequestOwner, "uploadRequestOwner");
            this.uploadRequestOwner = uploadRequestOwner;
            return this;
        }


        /**
         * Enum representing the status of a workspace upload request
         */
        public Builder status(WorkspaceUploadRequestStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * List of documents associated with the upload request
         */
        public Builder documents(List<WorkspaceUploadRequestDocument> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * List of documents associated with the upload request
         */
        public Builder documents(Optional<? extends List<WorkspaceUploadRequestDocument>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }


        /**
         * List of user assignments for the upload request
         */
        public Builder assignments(List<WorkspaceUploadRequestAssignment> assignments) {
            Utils.checkNotNull(assignments, "assignments");
            this.assignments = Optional.ofNullable(assignments);
            return this;
        }

        /**
         * List of user assignments for the upload request
         */
        public Builder assignments(Optional<? extends List<WorkspaceUploadRequestAssignment>> assignments) {
            Utils.checkNotNull(assignments, "assignments");
            this.assignments = assignments;
            return this;
        }


        /**
         * The date the upload request was created
         */
        public Builder createdDate(OffsetDateTime createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }


        /**
         * The date the upload request was last updated
         */
        public Builder updatedDate(OffsetDateTime updatedDate) {
            Utils.checkNotNull(updatedDate, "updatedDate");
            this.updatedDate = updatedDate;
            return this;
        }


        /**
         * The due date for the upload request
         */
        public Builder dueDate(OffsetDateTime dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = JsonNullable.of(dueDate);
            return this;
        }

        /**
         * The due date for the upload request
         */
        public Builder dueDate(JsonNullable<OffsetDateTime> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }


        /**
         * The date the upload request was sent
         */
        public Builder sentDate(OffsetDateTime sentDate) {
            Utils.checkNotNull(sentDate, "sentDate");
            this.sentDate = JsonNullable.of(sentDate);
            return this;
        }

        /**
         * The date the upload request was sent
         */
        public Builder sentDate(JsonNullable<OffsetDateTime> sentDate) {
            Utils.checkNotNull(sentDate, "sentDate");
            this.sentDate = sentDate;
            return this;
        }


        /**
         * The date the upload request was completed
         */
        public Builder completedDate(OffsetDateTime completedDate) {
            Utils.checkNotNull(completedDate, "completedDate");
            this.completedDate = JsonNullable.of(completedDate);
            return this;
        }

        /**
         * The date the upload request was completed
         */
        public Builder completedDate(JsonNullable<OffsetDateTime> completedDate) {
            Utils.checkNotNull(completedDate, "completedDate");
            this.completedDate = completedDate;
            return this;
        }


        /**
         * Whether the current user can view the upload request
         */
        public Builder canView(boolean canView) {
            Utils.checkNotNull(canView, "canView");
            this.canView = canView;
            return this;
        }


        /**
         * Whether the current user can edit the upload request
         */
        public Builder canEdit(boolean canEdit) {
            Utils.checkNotNull(canEdit, "canEdit");
            this.canEdit = canEdit;
            return this;
        }


        /**
         * Whether the current user can delete the upload request
         */
        public Builder canDelete(boolean canDelete) {
            Utils.checkNotNull(canDelete, "canDelete");
            this.canDelete = canDelete;
            return this;
        }

        public GetWorkspaceUploadRequestResponse build() {

            return new GetWorkspaceUploadRequestResponse(
                uploadRequestId, workspaceId, name,
                description, uploadRequestOwner, status,
                documents, assignments, createdDate,
                updatedDate, dueDate, sentDate,
                completedDate, canView, canEdit,
                canDelete);
        }

    }
}
