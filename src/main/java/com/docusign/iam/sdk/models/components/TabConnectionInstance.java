/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;

public class TabConnectionInstance {

    /**
     * Identifies an extension app's unique connection key.
     */
    @JsonProperty("connectionKey")
    private String connectionKey;

    /**
     * Identifies an extension app's connection instance.
     */
    @JsonProperty("connectionValue")
    private String connectionValue;

    @JsonCreator
    public TabConnectionInstance(
            @JsonProperty("connectionKey") String connectionKey,
            @JsonProperty("connectionValue") String connectionValue) {
        Utils.checkNotNull(connectionKey, "connectionKey");
        Utils.checkNotNull(connectionValue, "connectionValue");
        this.connectionKey = connectionKey;
        this.connectionValue = connectionValue;
    }

    /**
     * Identifies an extension app's unique connection key.
     */
    @JsonIgnore
    public String connectionKey() {
        return connectionKey;
    }

    /**
     * Identifies an extension app's connection instance.
     */
    @JsonIgnore
    public String connectionValue() {
        return connectionValue;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Identifies an extension app's unique connection key.
     */
    public TabConnectionInstance withConnectionKey(String connectionKey) {
        Utils.checkNotNull(connectionKey, "connectionKey");
        this.connectionKey = connectionKey;
        return this;
    }

    /**
     * Identifies an extension app's connection instance.
     */
    public TabConnectionInstance withConnectionValue(String connectionValue) {
        Utils.checkNotNull(connectionValue, "connectionValue");
        this.connectionValue = connectionValue;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TabConnectionInstance other = (TabConnectionInstance) o;
        return 
            Utils.enhancedDeepEquals(this.connectionKey, other.connectionKey) &&
            Utils.enhancedDeepEquals(this.connectionValue, other.connectionValue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            connectionKey,
            connectionValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TabConnectionInstance.class,
                "connectionKey", connectionKey,
                "connectionValue", connectionValue);
    }
    
    public final static class Builder {
 
        private String connectionKey;
 
        private String connectionValue;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Identifies an extension app's unique connection key.
         */
        public Builder connectionKey(String connectionKey) {
            Utils.checkNotNull(connectionKey, "connectionKey");
            this.connectionKey = connectionKey;
            return this;
        }

        /**
         * Identifies an extension app's connection instance.
         */
        public Builder connectionValue(String connectionValue) {
            Utils.checkNotNull(connectionValue, "connectionValue");
            this.connectionValue = connectionValue;
            return this;
        }
        
        public TabConnectionInstance build() {
            return new TabConnectionInstance(
                connectionKey,
                connectionValue);
        }
    }
}
