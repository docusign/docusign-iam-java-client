/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.models.components.GetWorkspaceUsersSortingOption;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class GetWorkspaceUsersRequest {
    /**
     * The ID of the account
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private String accountId;

    /**
     * The ID of the workspace
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspaceId")
    private String workspaceId;

    /**
     * Number of workspace users to return. Defaults to the maximum which is 100.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=count")
    private Optional<Integer> count;

    /**
     * Position of the first item in the total results. Defaults to 0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_position")
    private Optional<Integer> startPosition;

    /**
     * Returns workspace users filtered by Name and Email
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filter")
    private Optional<String> filter;

    /**
     * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<? extends GetWorkspaceUsersSortingOption> sort;

    @JsonCreator
    public GetWorkspaceUsersRequest(
            String accountId,
            String workspaceId,
            Optional<Integer> count,
            Optional<Integer> startPosition,
            Optional<String> filter,
            Optional<? extends GetWorkspaceUsersSortingOption> sort) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(startPosition, "startPosition");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(sort, "sort");
        this.accountId = accountId;
        this.workspaceId = workspaceId;
        this.count = count;
        this.startPosition = startPosition;
        this.filter = filter;
        this.sort = sort;
    }
    
    public GetWorkspaceUsersRequest(
            String accountId,
            String workspaceId) {
        this(accountId, workspaceId, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the account
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    /**
     * Number of workspace users to return. Defaults to the maximum which is 100.
     */
    @JsonIgnore
    public Optional<Integer> count() {
        return count;
    }

    /**
     * Position of the first item in the total results. Defaults to 0.
     */
    @JsonIgnore
    public Optional<Integer> startPosition() {
        return startPosition;
    }

    /**
     * Returns workspace users filtered by Name and Email
     */
    @JsonIgnore
    public Optional<String> filter() {
        return filter;
    }

    /**
     * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetWorkspaceUsersSortingOption> sort() {
        return (Optional<GetWorkspaceUsersSortingOption>) sort;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the account
     */
    public GetWorkspaceUsersRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The ID of the workspace
     */
    public GetWorkspaceUsersRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * Number of workspace users to return. Defaults to the maximum which is 100.
     */
    public GetWorkspaceUsersRequest withCount(int count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    /**
     * Number of workspace users to return. Defaults to the maximum which is 100.
     */
    public GetWorkspaceUsersRequest withCount(Optional<Integer> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * Position of the first item in the total results. Defaults to 0.
     */
    public GetWorkspaceUsersRequest withStartPosition(int startPosition) {
        Utils.checkNotNull(startPosition, "startPosition");
        this.startPosition = Optional.ofNullable(startPosition);
        return this;
    }


    /**
     * Position of the first item in the total results. Defaults to 0.
     */
    public GetWorkspaceUsersRequest withStartPosition(Optional<Integer> startPosition) {
        Utils.checkNotNull(startPosition, "startPosition");
        this.startPosition = startPosition;
        return this;
    }

    /**
     * Returns workspace users filtered by Name and Email
     */
    public GetWorkspaceUsersRequest withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.ofNullable(filter);
        return this;
    }


    /**
     * Returns workspace users filtered by Name and Email
     */
    public GetWorkspaceUsersRequest withFilter(Optional<String> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    /**
     * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
     */
    public GetWorkspaceUsersRequest withSort(GetWorkspaceUsersSortingOption sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }


    /**
     * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
     */
    public GetWorkspaceUsersRequest withSort(Optional<? extends GetWorkspaceUsersSortingOption> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkspaceUsersRequest other = (GetWorkspaceUsersRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.startPosition, other.startPosition) &&
            Utils.enhancedDeepEquals(this.filter, other.filter) &&
            Utils.enhancedDeepEquals(this.sort, other.sort);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, workspaceId, count,
            startPosition, filter, sort);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkspaceUsersRequest.class,
                "accountId", accountId,
                "workspaceId", workspaceId,
                "count", count,
                "startPosition", startPosition,
                "filter", filter,
                "sort", sort);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountId;

        private String workspaceId;

        private Optional<Integer> count = Optional.empty();

        private Optional<Integer> startPosition = Optional.empty();

        private Optional<String> filter = Optional.empty();

        private Optional<? extends GetWorkspaceUsersSortingOption> sort = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the account
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * Number of workspace users to return. Defaults to the maximum which is 100.
         */
        public Builder count(int count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Number of workspace users to return. Defaults to the maximum which is 100.
         */
        public Builder count(Optional<Integer> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        /**
         * Position of the first item in the total results. Defaults to 0.
         */
        public Builder startPosition(int startPosition) {
            Utils.checkNotNull(startPosition, "startPosition");
            this.startPosition = Optional.ofNullable(startPosition);
            return this;
        }

        /**
         * Position of the first item in the total results. Defaults to 0.
         */
        public Builder startPosition(Optional<Integer> startPosition) {
            Utils.checkNotNull(startPosition, "startPosition");
            this.startPosition = startPosition;
            return this;
        }


        /**
         * Returns workspace users filtered by Name and Email
         */
        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        /**
         * Returns workspace users filtered by Name and Email
         */
        public Builder filter(Optional<String> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }


        /**
         * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
         */
        public Builder sort(GetWorkspaceUsersSortingOption sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
         */
        public Builder sort(Optional<? extends GetWorkspaceUsersSortingOption> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        public GetWorkspaceUsersRequest build() {

            return new GetWorkspaceUsersRequest(
                accountId, workspaceId, count,
                startPosition, filter, sort);
        }

    }
}
