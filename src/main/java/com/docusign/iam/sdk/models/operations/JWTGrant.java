/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * JWTGrant
 * 
 * <p>JSON Web Token (JWT) Grant is an OAuth 2.0 flow that is used to grant an access token to service integrations
 */
public class JWTGrant {
    /**
     * The grant type.
     */
    @SpeakeasyMetadata("form:name=grant_type")
    private Optional<? extends GetTokenFromJWTGrantGrantType> grantType;

    /**
     * Your JWT
     */
    @SpeakeasyMetadata("form:name=assertion")
    private String assertion;

    @JsonCreator
    public JWTGrant(
            Optional<? extends GetTokenFromJWTGrantGrantType> grantType,
            String assertion) {
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(assertion, "assertion");
        this.grantType = grantType;
        this.assertion = assertion;
    }
    
    public JWTGrant(
            String assertion) {
        this(Optional.empty(), assertion);
    }

    /**
     * The grant type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetTokenFromJWTGrantGrantType> grantType() {
        return (Optional<GetTokenFromJWTGrantGrantType>) grantType;
    }

    /**
     * Your JWT
     */
    @JsonIgnore
    public String assertion() {
        return assertion;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The grant type.
     */
    public JWTGrant withGrantType(GetTokenFromJWTGrantGrantType grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = Optional.ofNullable(grantType);
        return this;
    }


    /**
     * The grant type.
     */
    public JWTGrant withGrantType(Optional<? extends GetTokenFromJWTGrantGrantType> grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    /**
     * Your JWT
     */
    public JWTGrant withAssertion(String assertion) {
        Utils.checkNotNull(assertion, "assertion");
        this.assertion = assertion;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JWTGrant other = (JWTGrant) o;
        return 
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.assertion, other.assertion);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            grantType, assertion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JWTGrant.class,
                "grantType", grantType,
                "assertion", assertion);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends GetTokenFromJWTGrantGrantType> grantType;

        private String assertion;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The grant type.
         */
        public Builder grantType(GetTokenFromJWTGrantGrantType grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = Optional.ofNullable(grantType);
            return this;
        }

        /**
         * The grant type.
         */
        public Builder grantType(Optional<? extends GetTokenFromJWTGrantGrantType> grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }


        /**
         * Your JWT
         */
        public Builder assertion(String assertion) {
            Utils.checkNotNull(assertion, "assertion");
            this.assertion = assertion;
            return this;
        }

        public JWTGrant build() {
            if (grantType == null) {
                grantType = _SINGLETON_VALUE_GrantType.value();
            }

            return new JWTGrant(
                grantType, assertion);
        }


        private static final LazySingletonValue<Optional<? extends GetTokenFromJWTGrantGrantType>> _SINGLETON_VALUE_GrantType =
                new LazySingletonValue<>(
                        "grant_type",
                        "\"urn:ietf:params:oauth:grant-type:jwt-bearer\"",
                        new TypeReference<Optional<? extends GetTokenFromJWTGrantGrantType>>() {});
    }
}
