/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Agreement
 * 
 * <p>The Agreement component represents a comprehensive overview of a contractual document, detailing its
 * unique identifiers, key properties, parties involved,
 * and specific provisions. It includes general information such as the title, type, status, and
 * important dates like effective and expiration dates.
 * The component also incorporates various provisions—legal, financial, lifecycle, and custom—along
 * with metadata, external references, and related documents
 * to offer a full representation of the structure and context of an agreement.
 */
public class Agreement {

    @JsonProperty("id")
    private String id;

    /**
     * Title of the agreement document, summarizing its purpose.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    /**
     * The file name of the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_name")
    private JsonNullable<String> fileName;

    /**
     * The type of agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<String> type;

    /**
     * Server-defined category based on the agreement type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private JsonNullable<String> category;

    /**
     * A detailed summary of the agreement's key provisions and scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private JsonNullable<String> summary;

    /**
     * Current status of the agreement (e.g., PENDING, COMPLETE, INACTIVE)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<String> status;

    /**
     * A list of parties involved in the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parties")
    private JsonNullable<? extends List<Party>> parties;

    /**
     * "The conditions or rules written in a legal agreement. The set of possible provisions is determined
     * by the agreement type."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisions")
    private JsonNullable<? extends Provisions> provisions;

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_provisions")
    private JsonNullable<? extends Map<String, CustomProperty>> customProvisions;

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_user_defined_data")
    private JsonNullable<? extends Map<String, CustomProperty>> additionalUserDefinedData;

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_custom_clm_data")
    private JsonNullable<? extends Map<String, CustomProperty>> additionalCustomClmData;

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_custom_esign_data")
    private JsonNullable<? extends Map<String, CustomProperty>> additionalCustomEsignData;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("related_agreement_documents")
    private Optional<? extends RelatedAgreementDocuments> relatedAgreementDocuments;

    /**
     * List of languages applicable to the agreement, identified using BCP-47 language codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages")
    private JsonNullable<? extends List<String>> languages;

    /**
     * The name of the source system who creates this entity, e.g. eSign, CLM, or Salesforce.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_name")
    private JsonNullable<String> sourceName;

    /**
     * The ID of the entity in the source system that this entity is associated with. For example, it could
     * be an ID of the envelope in eSign.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_id")
    private JsonNullable<String> sourceId;

    /**
     * The Account ID of the source system who creates this entity, e.g. eSign Account ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_account_id")
    private JsonNullable<String> sourceAccountId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ResourceMetadata> metadata;

    @JsonCreator
    public Agreement(
            @JsonProperty("id") String id,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("file_name") JsonNullable<String> fileName,
            @JsonProperty("type") JsonNullable<String> type,
            @JsonProperty("category") JsonNullable<String> category,
            @JsonProperty("summary") JsonNullable<String> summary,
            @JsonProperty("status") JsonNullable<String> status,
            @JsonProperty("parties") JsonNullable<? extends List<Party>> parties,
            @JsonProperty("provisions") JsonNullable<? extends Provisions> provisions,
            @JsonProperty("custom_provisions") JsonNullable<? extends Map<String, CustomProperty>> customProvisions,
            @JsonProperty("additional_user_defined_data") JsonNullable<? extends Map<String, CustomProperty>> additionalUserDefinedData,
            @JsonProperty("additional_custom_clm_data") JsonNullable<? extends Map<String, CustomProperty>> additionalCustomClmData,
            @JsonProperty("additional_custom_esign_data") JsonNullable<? extends Map<String, CustomProperty>> additionalCustomEsignData,
            @JsonProperty("related_agreement_documents") Optional<? extends RelatedAgreementDocuments> relatedAgreementDocuments,
            @JsonProperty("languages") JsonNullable<? extends List<String>> languages,
            @JsonProperty("source_name") JsonNullable<String> sourceName,
            @JsonProperty("source_id") JsonNullable<String> sourceId,
            @JsonProperty("source_account_id") JsonNullable<String> sourceAccountId,
            @JsonProperty("metadata") Optional<? extends ResourceMetadata> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(fileName, "fileName");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(parties, "parties");
        Utils.checkNotNull(provisions, "provisions");
        Utils.checkNotNull(customProvisions, "customProvisions");
        Utils.checkNotNull(additionalUserDefinedData, "additionalUserDefinedData");
        Utils.checkNotNull(additionalCustomClmData, "additionalCustomClmData");
        Utils.checkNotNull(additionalCustomEsignData, "additionalCustomEsignData");
        Utils.checkNotNull(relatedAgreementDocuments, "relatedAgreementDocuments");
        Utils.checkNotNull(languages, "languages");
        Utils.checkNotNull(sourceName, "sourceName");
        Utils.checkNotNull(sourceId, "sourceId");
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        Utils.checkNotNull(metadata, "metadata");
        this.id = id;
        this.title = title;
        this.fileName = fileName;
        this.type = type;
        this.category = category;
        this.summary = summary;
        this.status = status;
        this.parties = parties;
        this.provisions = provisions;
        this.customProvisions = customProvisions;
        this.additionalUserDefinedData = additionalUserDefinedData;
        this.additionalCustomClmData = additionalCustomClmData;
        this.additionalCustomEsignData = additionalCustomEsignData;
        this.relatedAgreementDocuments = relatedAgreementDocuments;
        this.languages = languages;
        this.sourceName = sourceName;
        this.sourceId = sourceId;
        this.sourceAccountId = sourceAccountId;
        this.metadata = metadata;
    }
    
    public Agreement(
            String id) {
        this(id, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Title of the agreement document, summarizing its purpose.
     */
    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    /**
     * The file name of the agreement.
     */
    @JsonIgnore
    public JsonNullable<String> fileName() {
        return fileName;
    }

    /**
     * The type of agreement.
     */
    @JsonIgnore
    public JsonNullable<String> type() {
        return type;
    }

    /**
     * Server-defined category based on the agreement type.
     */
    @JsonIgnore
    public JsonNullable<String> category() {
        return category;
    }

    /**
     * A detailed summary of the agreement's key provisions and scope.
     */
    @JsonIgnore
    public JsonNullable<String> summary() {
        return summary;
    }

    /**
     * Current status of the agreement (e.g., PENDING, COMPLETE, INACTIVE)
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * A list of parties involved in the agreement.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Party>> parties() {
        return (JsonNullable<List<Party>>) parties;
    }

    /**
     * "The conditions or rules written in a legal agreement. The set of possible provisions is determined
     * by the agreement type."
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Provisions> provisions() {
        return (JsonNullable<Provisions>) provisions;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, CustomProperty>> customProvisions() {
        return (JsonNullable<Map<String, CustomProperty>>) customProvisions;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, CustomProperty>> additionalUserDefinedData() {
        return (JsonNullable<Map<String, CustomProperty>>) additionalUserDefinedData;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, CustomProperty>> additionalCustomClmData() {
        return (JsonNullable<Map<String, CustomProperty>>) additionalCustomClmData;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, CustomProperty>> additionalCustomEsignData() {
        return (JsonNullable<Map<String, CustomProperty>>) additionalCustomEsignData;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RelatedAgreementDocuments> relatedAgreementDocuments() {
        return (Optional<RelatedAgreementDocuments>) relatedAgreementDocuments;
    }

    /**
     * List of languages applicable to the agreement, identified using BCP-47 language codes.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> languages() {
        return (JsonNullable<List<String>>) languages;
    }

    /**
     * The name of the source system who creates this entity, e.g. eSign, CLM, or Salesforce.
     */
    @JsonIgnore
    public JsonNullable<String> sourceName() {
        return sourceName;
    }

    /**
     * The ID of the entity in the source system that this entity is associated with. For example, it could
     * be an ID of the envelope in eSign.
     */
    @JsonIgnore
    public JsonNullable<String> sourceId() {
        return sourceId;
    }

    /**
     * The Account ID of the source system who creates this entity, e.g. eSign Account ID
     */
    @JsonIgnore
    public JsonNullable<String> sourceAccountId() {
        return sourceAccountId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceMetadata> metadata() {
        return (Optional<ResourceMetadata>) metadata;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Agreement withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Title of the agreement document, summarizing its purpose.
     */
    public Agreement withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    /**
     * Title of the agreement document, summarizing its purpose.
     */
    public Agreement withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The file name of the agreement.
     */
    public Agreement withFileName(String fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = JsonNullable.of(fileName);
        return this;
    }

    /**
     * The file name of the agreement.
     */
    public Agreement withFileName(JsonNullable<String> fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = fileName;
        return this;
    }

    /**
     * The type of agreement.
     */
    public Agreement withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of agreement.
     */
    public Agreement withType(JsonNullable<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Server-defined category based on the agreement type.
     */
    public Agreement withCategory(String category) {
        Utils.checkNotNull(category, "category");
        this.category = JsonNullable.of(category);
        return this;
    }

    /**
     * Server-defined category based on the agreement type.
     */
    public Agreement withCategory(JsonNullable<String> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * A detailed summary of the agreement's key provisions and scope.
     */
    public Agreement withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = JsonNullable.of(summary);
        return this;
    }

    /**
     * A detailed summary of the agreement's key provisions and scope.
     */
    public Agreement withSummary(JsonNullable<String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * Current status of the agreement (e.g., PENDING, COMPLETE, INACTIVE)
     */
    public Agreement withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Current status of the agreement (e.g., PENDING, COMPLETE, INACTIVE)
     */
    public Agreement withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A list of parties involved in the agreement.
     */
    public Agreement withParties(List<Party> parties) {
        Utils.checkNotNull(parties, "parties");
        this.parties = JsonNullable.of(parties);
        return this;
    }

    /**
     * A list of parties involved in the agreement.
     */
    public Agreement withParties(JsonNullable<? extends List<Party>> parties) {
        Utils.checkNotNull(parties, "parties");
        this.parties = parties;
        return this;
    }

    /**
     * "The conditions or rules written in a legal agreement. The set of possible provisions is determined
     * by the agreement type."
     */
    public Agreement withProvisions(Provisions provisions) {
        Utils.checkNotNull(provisions, "provisions");
        this.provisions = JsonNullable.of(provisions);
        return this;
    }

    /**
     * "The conditions or rules written in a legal agreement. The set of possible provisions is determined
     * by the agreement type."
     */
    public Agreement withProvisions(JsonNullable<? extends Provisions> provisions) {
        Utils.checkNotNull(provisions, "provisions");
        this.provisions = provisions;
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withCustomProvisions(Map<String, CustomProperty> customProvisions) {
        Utils.checkNotNull(customProvisions, "customProvisions");
        this.customProvisions = JsonNullable.of(customProvisions);
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withCustomProvisions(JsonNullable<? extends Map<String, CustomProperty>> customProvisions) {
        Utils.checkNotNull(customProvisions, "customProvisions");
        this.customProvisions = customProvisions;
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withAdditionalUserDefinedData(Map<String, CustomProperty> additionalUserDefinedData) {
        Utils.checkNotNull(additionalUserDefinedData, "additionalUserDefinedData");
        this.additionalUserDefinedData = JsonNullable.of(additionalUserDefinedData);
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withAdditionalUserDefinedData(JsonNullable<? extends Map<String, CustomProperty>> additionalUserDefinedData) {
        Utils.checkNotNull(additionalUserDefinedData, "additionalUserDefinedData");
        this.additionalUserDefinedData = additionalUserDefinedData;
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withAdditionalCustomClmData(Map<String, CustomProperty> additionalCustomClmData) {
        Utils.checkNotNull(additionalCustomClmData, "additionalCustomClmData");
        this.additionalCustomClmData = JsonNullable.of(additionalCustomClmData);
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withAdditionalCustomClmData(JsonNullable<? extends Map<String, CustomProperty>> additionalCustomClmData) {
        Utils.checkNotNull(additionalCustomClmData, "additionalCustomClmData");
        this.additionalCustomClmData = additionalCustomClmData;
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withAdditionalCustomEsignData(Map<String, CustomProperty> additionalCustomEsignData) {
        Utils.checkNotNull(additionalCustomEsignData, "additionalCustomEsignData");
        this.additionalCustomEsignData = JsonNullable.of(additionalCustomEsignData);
        return this;
    }

    /**
     * A generic map/dict. The key is a string, and the value can be of any type, including strings,
     * booleans, numbers, arrays, or objects
     */
    public Agreement withAdditionalCustomEsignData(JsonNullable<? extends Map<String, CustomProperty>> additionalCustomEsignData) {
        Utils.checkNotNull(additionalCustomEsignData, "additionalCustomEsignData");
        this.additionalCustomEsignData = additionalCustomEsignData;
        return this;
    }

    public Agreement withRelatedAgreementDocuments(RelatedAgreementDocuments relatedAgreementDocuments) {
        Utils.checkNotNull(relatedAgreementDocuments, "relatedAgreementDocuments");
        this.relatedAgreementDocuments = Optional.ofNullable(relatedAgreementDocuments);
        return this;
    }


    public Agreement withRelatedAgreementDocuments(Optional<? extends RelatedAgreementDocuments> relatedAgreementDocuments) {
        Utils.checkNotNull(relatedAgreementDocuments, "relatedAgreementDocuments");
        this.relatedAgreementDocuments = relatedAgreementDocuments;
        return this;
    }

    /**
     * List of languages applicable to the agreement, identified using BCP-47 language codes.
     */
    public Agreement withLanguages(List<String> languages) {
        Utils.checkNotNull(languages, "languages");
        this.languages = JsonNullable.of(languages);
        return this;
    }

    /**
     * List of languages applicable to the agreement, identified using BCP-47 language codes.
     */
    public Agreement withLanguages(JsonNullable<? extends List<String>> languages) {
        Utils.checkNotNull(languages, "languages");
        this.languages = languages;
        return this;
    }

    /**
     * The name of the source system who creates this entity, e.g. eSign, CLM, or Salesforce.
     */
    public Agreement withSourceName(String sourceName) {
        Utils.checkNotNull(sourceName, "sourceName");
        this.sourceName = JsonNullable.of(sourceName);
        return this;
    }

    /**
     * The name of the source system who creates this entity, e.g. eSign, CLM, or Salesforce.
     */
    public Agreement withSourceName(JsonNullable<String> sourceName) {
        Utils.checkNotNull(sourceName, "sourceName");
        this.sourceName = sourceName;
        return this;
    }

    /**
     * The ID of the entity in the source system that this entity is associated with. For example, it could
     * be an ID of the envelope in eSign.
     */
    public Agreement withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = JsonNullable.of(sourceId);
        return this;
    }

    /**
     * The ID of the entity in the source system that this entity is associated with. For example, it could
     * be an ID of the envelope in eSign.
     */
    public Agreement withSourceId(JsonNullable<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }

    /**
     * The Account ID of the source system who creates this entity, e.g. eSign Account ID
     */
    public Agreement withSourceAccountId(String sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = JsonNullable.of(sourceAccountId);
        return this;
    }

    /**
     * The Account ID of the source system who creates this entity, e.g. eSign Account ID
     */
    public Agreement withSourceAccountId(JsonNullable<String> sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    public Agreement withMetadata(ResourceMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }


    public Agreement withMetadata(Optional<? extends ResourceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Agreement other = (Agreement) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.fileName, other.fileName) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.category, other.category) &&
            Utils.enhancedDeepEquals(this.summary, other.summary) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.parties, other.parties) &&
            Utils.enhancedDeepEquals(this.provisions, other.provisions) &&
            Utils.enhancedDeepEquals(this.customProvisions, other.customProvisions) &&
            Utils.enhancedDeepEquals(this.additionalUserDefinedData, other.additionalUserDefinedData) &&
            Utils.enhancedDeepEquals(this.additionalCustomClmData, other.additionalCustomClmData) &&
            Utils.enhancedDeepEquals(this.additionalCustomEsignData, other.additionalCustomEsignData) &&
            Utils.enhancedDeepEquals(this.relatedAgreementDocuments, other.relatedAgreementDocuments) &&
            Utils.enhancedDeepEquals(this.languages, other.languages) &&
            Utils.enhancedDeepEquals(this.sourceName, other.sourceName) &&
            Utils.enhancedDeepEquals(this.sourceId, other.sourceId) &&
            Utils.enhancedDeepEquals(this.sourceAccountId, other.sourceAccountId) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, title, fileName,
            type, category, summary,
            status, parties, provisions,
            customProvisions, additionalUserDefinedData, additionalCustomClmData,
            additionalCustomEsignData, relatedAgreementDocuments, languages,
            sourceName, sourceId, sourceAccountId,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Agreement.class,
                "id", id,
                "title", title,
                "fileName", fileName,
                "type", type,
                "category", category,
                "summary", summary,
                "status", status,
                "parties", parties,
                "provisions", provisions,
                "customProvisions", customProvisions,
                "additionalUserDefinedData", additionalUserDefinedData,
                "additionalCustomClmData", additionalCustomClmData,
                "additionalCustomEsignData", additionalCustomEsignData,
                "relatedAgreementDocuments", relatedAgreementDocuments,
                "languages", languages,
                "sourceName", sourceName,
                "sourceId", sourceId,
                "sourceAccountId", sourceAccountId,
                "metadata", metadata);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String id;

        private JsonNullable<String> title = JsonNullable.undefined();

        private JsonNullable<String> fileName = JsonNullable.undefined();

        private JsonNullable<String> type = JsonNullable.undefined();

        private JsonNullable<String> category = JsonNullable.undefined();

        private JsonNullable<String> summary = JsonNullable.undefined();

        private JsonNullable<String> status = JsonNullable.undefined();

        private JsonNullable<? extends List<Party>> parties = JsonNullable.undefined();

        private JsonNullable<? extends Provisions> provisions = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, CustomProperty>> customProvisions = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, CustomProperty>> additionalUserDefinedData = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, CustomProperty>> additionalCustomClmData = JsonNullable.undefined();

        private JsonNullable<? extends Map<String, CustomProperty>> additionalCustomEsignData = JsonNullable.undefined();

        private Optional<? extends RelatedAgreementDocuments> relatedAgreementDocuments = Optional.empty();

        private JsonNullable<? extends List<String>> languages = JsonNullable.undefined();

        private JsonNullable<String> sourceName = JsonNullable.undefined();

        private JsonNullable<String> sourceId = JsonNullable.undefined();

        private JsonNullable<String> sourceAccountId = JsonNullable.undefined();

        private Optional<? extends ResourceMetadata> metadata = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * Title of the agreement document, summarizing its purpose.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        /**
         * Title of the agreement document, summarizing its purpose.
         */
        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * The file name of the agreement.
         */
        public Builder fileName(String fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = JsonNullable.of(fileName);
            return this;
        }

        /**
         * The file name of the agreement.
         */
        public Builder fileName(JsonNullable<String> fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = fileName;
            return this;
        }


        /**
         * The type of agreement.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of agreement.
         */
        public Builder type(JsonNullable<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * Server-defined category based on the agreement type.
         */
        public Builder category(String category) {
            Utils.checkNotNull(category, "category");
            this.category = JsonNullable.of(category);
            return this;
        }

        /**
         * Server-defined category based on the agreement type.
         */
        public Builder category(JsonNullable<String> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }


        /**
         * A detailed summary of the agreement's key provisions and scope.
         */
        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = JsonNullable.of(summary);
            return this;
        }

        /**
         * A detailed summary of the agreement's key provisions and scope.
         */
        public Builder summary(JsonNullable<String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }


        /**
         * Current status of the agreement (e.g., PENDING, COMPLETE, INACTIVE)
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Current status of the agreement (e.g., PENDING, COMPLETE, INACTIVE)
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        /**
         * A list of parties involved in the agreement.
         */
        public Builder parties(List<Party> parties) {
            Utils.checkNotNull(parties, "parties");
            this.parties = JsonNullable.of(parties);
            return this;
        }

        /**
         * A list of parties involved in the agreement.
         */
        public Builder parties(JsonNullable<? extends List<Party>> parties) {
            Utils.checkNotNull(parties, "parties");
            this.parties = parties;
            return this;
        }


        /**
         * "The conditions or rules written in a legal agreement. The set of possible provisions is determined
         * by the agreement type."
         */
        public Builder provisions(Provisions provisions) {
            Utils.checkNotNull(provisions, "provisions");
            this.provisions = JsonNullable.of(provisions);
            return this;
        }

        /**
         * "The conditions or rules written in a legal agreement. The set of possible provisions is determined
         * by the agreement type."
         */
        public Builder provisions(JsonNullable<? extends Provisions> provisions) {
            Utils.checkNotNull(provisions, "provisions");
            this.provisions = provisions;
            return this;
        }


        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder customProvisions(Map<String, CustomProperty> customProvisions) {
            Utils.checkNotNull(customProvisions, "customProvisions");
            this.customProvisions = JsonNullable.of(customProvisions);
            return this;
        }

        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder customProvisions(JsonNullable<? extends Map<String, CustomProperty>> customProvisions) {
            Utils.checkNotNull(customProvisions, "customProvisions");
            this.customProvisions = customProvisions;
            return this;
        }


        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder additionalUserDefinedData(Map<String, CustomProperty> additionalUserDefinedData) {
            Utils.checkNotNull(additionalUserDefinedData, "additionalUserDefinedData");
            this.additionalUserDefinedData = JsonNullable.of(additionalUserDefinedData);
            return this;
        }

        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder additionalUserDefinedData(JsonNullable<? extends Map<String, CustomProperty>> additionalUserDefinedData) {
            Utils.checkNotNull(additionalUserDefinedData, "additionalUserDefinedData");
            this.additionalUserDefinedData = additionalUserDefinedData;
            return this;
        }


        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder additionalCustomClmData(Map<String, CustomProperty> additionalCustomClmData) {
            Utils.checkNotNull(additionalCustomClmData, "additionalCustomClmData");
            this.additionalCustomClmData = JsonNullable.of(additionalCustomClmData);
            return this;
        }

        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder additionalCustomClmData(JsonNullable<? extends Map<String, CustomProperty>> additionalCustomClmData) {
            Utils.checkNotNull(additionalCustomClmData, "additionalCustomClmData");
            this.additionalCustomClmData = additionalCustomClmData;
            return this;
        }


        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder additionalCustomEsignData(Map<String, CustomProperty> additionalCustomEsignData) {
            Utils.checkNotNull(additionalCustomEsignData, "additionalCustomEsignData");
            this.additionalCustomEsignData = JsonNullable.of(additionalCustomEsignData);
            return this;
        }

        /**
         * A generic map/dict. The key is a string, and the value can be of any type, including strings,
         * booleans, numbers, arrays, or objects
         */
        public Builder additionalCustomEsignData(JsonNullable<? extends Map<String, CustomProperty>> additionalCustomEsignData) {
            Utils.checkNotNull(additionalCustomEsignData, "additionalCustomEsignData");
            this.additionalCustomEsignData = additionalCustomEsignData;
            return this;
        }


        public Builder relatedAgreementDocuments(RelatedAgreementDocuments relatedAgreementDocuments) {
            Utils.checkNotNull(relatedAgreementDocuments, "relatedAgreementDocuments");
            this.relatedAgreementDocuments = Optional.ofNullable(relatedAgreementDocuments);
            return this;
        }

        public Builder relatedAgreementDocuments(Optional<? extends RelatedAgreementDocuments> relatedAgreementDocuments) {
            Utils.checkNotNull(relatedAgreementDocuments, "relatedAgreementDocuments");
            this.relatedAgreementDocuments = relatedAgreementDocuments;
            return this;
        }


        /**
         * List of languages applicable to the agreement, identified using BCP-47 language codes.
         */
        public Builder languages(List<String> languages) {
            Utils.checkNotNull(languages, "languages");
            this.languages = JsonNullable.of(languages);
            return this;
        }

        /**
         * List of languages applicable to the agreement, identified using BCP-47 language codes.
         */
        public Builder languages(JsonNullable<? extends List<String>> languages) {
            Utils.checkNotNull(languages, "languages");
            this.languages = languages;
            return this;
        }


        /**
         * The name of the source system who creates this entity, e.g. eSign, CLM, or Salesforce.
         */
        public Builder sourceName(String sourceName) {
            Utils.checkNotNull(sourceName, "sourceName");
            this.sourceName = JsonNullable.of(sourceName);
            return this;
        }

        /**
         * The name of the source system who creates this entity, e.g. eSign, CLM, or Salesforce.
         */
        public Builder sourceName(JsonNullable<String> sourceName) {
            Utils.checkNotNull(sourceName, "sourceName");
            this.sourceName = sourceName;
            return this;
        }


        /**
         * The ID of the entity in the source system that this entity is associated with. For example, it could
         * be an ID of the envelope in eSign.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = JsonNullable.of(sourceId);
            return this;
        }

        /**
         * The ID of the entity in the source system that this entity is associated with. For example, it could
         * be an ID of the envelope in eSign.
         */
        public Builder sourceId(JsonNullable<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }


        /**
         * The Account ID of the source system who creates this entity, e.g. eSign Account ID
         */
        public Builder sourceAccountId(String sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = JsonNullable.of(sourceAccountId);
            return this;
        }

        /**
         * The Account ID of the source system who creates this entity, e.g. eSign Account ID
         */
        public Builder sourceAccountId(JsonNullable<String> sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = sourceAccountId;
            return this;
        }


        public Builder metadata(ResourceMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends ResourceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Agreement build() {

            return new Agreement(
                id, title, fileName,
                type, category, summary,
                status, parties, provisions,
                customProvisions, additionalUserDefinedData, additionalCustomClmData,
                additionalCustomEsignData, relatedAgreementDocuments, languages,
                sourceName, sourceId, sourceAccountId,
                metadata);
        }

    }
}
