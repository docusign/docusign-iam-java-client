/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class Account {

    @JsonProperty("account_id")
    private String accountId;


    @JsonProperty("is_default")
    private boolean isDefault;


    @JsonProperty("account_name")
    private String accountName;


    @JsonProperty("base_uri")
    private String baseUri;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    private Optional<? extends Organization> organization;

    @JsonCreator
    public Account(
            @JsonProperty("account_id") String accountId,
            @JsonProperty("is_default") boolean isDefault,
            @JsonProperty("account_name") String accountName,
            @JsonProperty("base_uri") String baseUri,
            @JsonProperty("organization") Optional<? extends Organization> organization) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(isDefault, "isDefault");
        Utils.checkNotNull(accountName, "accountName");
        Utils.checkNotNull(baseUri, "baseUri");
        Utils.checkNotNull(organization, "organization");
        this.accountId = accountId;
        this.isDefault = isDefault;
        this.accountName = accountName;
        this.baseUri = baseUri;
        this.organization = organization;
    }
    
    public Account(
            String accountId,
            boolean isDefault,
            String accountName,
            String baseUri) {
        this(accountId, isDefault, accountName,
            baseUri, Optional.empty());
    }

    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    @JsonIgnore
    public boolean isDefault() {
        return isDefault;
    }

    @JsonIgnore
    public String accountName() {
        return accountName;
    }

    @JsonIgnore
    public String baseUri() {
        return baseUri;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Organization> organization() {
        return (Optional<Organization>) organization;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Account withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public Account withIsDefault(boolean isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = isDefault;
        return this;
    }

    public Account withAccountName(String accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = accountName;
        return this;
    }

    public Account withBaseUri(String baseUri) {
        Utils.checkNotNull(baseUri, "baseUri");
        this.baseUri = baseUri;
        return this;
    }

    public Account withOrganization(Organization organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = Optional.ofNullable(organization);
        return this;
    }


    public Account withOrganization(Optional<? extends Organization> organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Account other = (Account) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.isDefault, other.isDefault) &&
            Utils.enhancedDeepEquals(this.accountName, other.accountName) &&
            Utils.enhancedDeepEquals(this.baseUri, other.baseUri) &&
            Utils.enhancedDeepEquals(this.organization, other.organization);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, isDefault, accountName,
            baseUri, organization);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Account.class,
                "accountId", accountId,
                "isDefault", isDefault,
                "accountName", accountName,
                "baseUri", baseUri,
                "organization", organization);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountId;

        private Boolean isDefault;

        private String accountName;

        private String baseUri;

        private Optional<? extends Organization> organization = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        public Builder isDefault(boolean isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = isDefault;
            return this;
        }


        public Builder accountName(String accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = accountName;
            return this;
        }


        public Builder baseUri(String baseUri) {
            Utils.checkNotNull(baseUri, "baseUri");
            this.baseUri = baseUri;
            return this;
        }


        public Builder organization(Organization organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = Optional.ofNullable(organization);
            return this;
        }

        public Builder organization(Optional<? extends Organization> organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        public Account build() {

            return new Account(
                accountId, isDefault, accountName,
                baseUri, organization);
        }

    }
}
