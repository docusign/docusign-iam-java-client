/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.errors;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * Error
 * 
 * <p>Bad Request - The request could not be understood or was missing required parameters.
 */
@SuppressWarnings("serial")
public class Error extends RuntimeException {

    /**
     * A message describing the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    /**
     * HTTP status code for the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<Long> code;

    /**
     * The timestamp when the error occurred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<OffsetDateTime> timestamp;

    @JsonCreator
    public Error(
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("code") Optional<Long> code,
            @JsonProperty("timestamp") Optional<OffsetDateTime> timestamp) {
        super("API error occurred");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(timestamp, "timestamp");
        this.error = error;
        this.code = code;
        this.timestamp = timestamp;
    }
    
    public Error() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A message describing the error.
     */
    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    /**
     * HTTP status code for the error.
     */
    @JsonIgnore
    public Optional<Long> code() {
        return code;
    }

    /**
     * The timestamp when the error occurred.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> timestamp() {
        return timestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A message describing the error.
     */
    public Error withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * A message describing the error.
     */
    public Error withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * HTTP status code for the error.
     */
    public Error withCode(long code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    /**
     * HTTP status code for the error.
     */
    public Error withCode(Optional<Long> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The timestamp when the error occurred.
     */
    public Error withTimestamp(OffsetDateTime timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * The timestamp when the error occurred.
     */
    public Error withTimestamp(Optional<OffsetDateTime> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error other = (Error) o;
        return 
            Utils.enhancedDeepEquals(this.error, other.error) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            error,
            code,
            timestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Error.class,
                "error", error,
                "code", code,
                "timestamp", timestamp);
    }
    
    public final static class Builder {
 
        private Optional<String> error = Optional.empty();
 
        private Optional<Long> code = Optional.empty();
 
        private Optional<OffsetDateTime> timestamp = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A message describing the error.
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * A message describing the error.
         */
        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * HTTP status code for the error.
         */
        public Builder code(long code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * HTTP status code for the error.
         */
        public Builder code(Optional<Long> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * The timestamp when the error occurred.
         */
        public Builder timestamp(OffsetDateTime timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * The timestamp when the error occurred.
         */
        public Builder timestamp(Optional<OffsetDateTime> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }
        
        public Error build() {
            return new Error(
                error,
                code,
                timestamp);
        }
    }
}

