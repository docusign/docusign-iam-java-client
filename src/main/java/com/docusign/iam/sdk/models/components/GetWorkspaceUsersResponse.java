/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class GetWorkspaceUsersResponse {
    /**
     * The user summary list. Includes the ID, name, and metadata such as the role ID and role name
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("users")
    private Optional<? extends List<WorkspaceUserSummary>> users;

    /**
     * The number of users returned in the response. Always equal or less than the `count` of the request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result_set_size")
    private JsonNullable<Integer> resultSetSize;

    /**
     * Position of the first item in the total results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_position")
    private JsonNullable<Integer> startPosition;

    /**
     * Position of the last item in the total results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_position")
    private JsonNullable<Integer> endPosition;

    /**
     * The total number of users in the workspace applicable to the request regardless of pagination. It
     * may not always be computed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_row_count")
    private JsonNullable<Integer> totalRowCount;

    @JsonCreator
    public GetWorkspaceUsersResponse(
            @JsonProperty("users") Optional<? extends List<WorkspaceUserSummary>> users,
            @JsonProperty("result_set_size") JsonNullable<Integer> resultSetSize,
            @JsonProperty("start_position") JsonNullable<Integer> startPosition,
            @JsonProperty("end_position") JsonNullable<Integer> endPosition,
            @JsonProperty("total_row_count") JsonNullable<Integer> totalRowCount) {
        Utils.checkNotNull(users, "users");
        Utils.checkNotNull(resultSetSize, "resultSetSize");
        Utils.checkNotNull(startPosition, "startPosition");
        Utils.checkNotNull(endPosition, "endPosition");
        Utils.checkNotNull(totalRowCount, "totalRowCount");
        this.users = users;
        this.resultSetSize = resultSetSize;
        this.startPosition = startPosition;
        this.endPosition = endPosition;
        this.totalRowCount = totalRowCount;
    }
    
    public GetWorkspaceUsersResponse() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The user summary list. Includes the ID, name, and metadata such as the role ID and role name
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<WorkspaceUserSummary>> users() {
        return (Optional<List<WorkspaceUserSummary>>) users;
    }

    /**
     * The number of users returned in the response. Always equal or less than the `count` of the request
     */
    @JsonIgnore
    public JsonNullable<Integer> resultSetSize() {
        return resultSetSize;
    }

    /**
     * Position of the first item in the total results
     */
    @JsonIgnore
    public JsonNullable<Integer> startPosition() {
        return startPosition;
    }

    /**
     * Position of the last item in the total results
     */
    @JsonIgnore
    public JsonNullable<Integer> endPosition() {
        return endPosition;
    }

    /**
     * The total number of users in the workspace applicable to the request regardless of pagination. It
     * may not always be computed
     */
    @JsonIgnore
    public JsonNullable<Integer> totalRowCount() {
        return totalRowCount;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The user summary list. Includes the ID, name, and metadata such as the role ID and role name
     */
    public GetWorkspaceUsersResponse withUsers(List<WorkspaceUserSummary> users) {
        Utils.checkNotNull(users, "users");
        this.users = Optional.ofNullable(users);
        return this;
    }


    /**
     * The user summary list. Includes the ID, name, and metadata such as the role ID and role name
     */
    public GetWorkspaceUsersResponse withUsers(Optional<? extends List<WorkspaceUserSummary>> users) {
        Utils.checkNotNull(users, "users");
        this.users = users;
        return this;
    }

    /**
     * The number of users returned in the response. Always equal or less than the `count` of the request
     */
    public GetWorkspaceUsersResponse withResultSetSize(int resultSetSize) {
        Utils.checkNotNull(resultSetSize, "resultSetSize");
        this.resultSetSize = JsonNullable.of(resultSetSize);
        return this;
    }

    /**
     * The number of users returned in the response. Always equal or less than the `count` of the request
     */
    public GetWorkspaceUsersResponse withResultSetSize(JsonNullable<Integer> resultSetSize) {
        Utils.checkNotNull(resultSetSize, "resultSetSize");
        this.resultSetSize = resultSetSize;
        return this;
    }

    /**
     * Position of the first item in the total results
     */
    public GetWorkspaceUsersResponse withStartPosition(int startPosition) {
        Utils.checkNotNull(startPosition, "startPosition");
        this.startPosition = JsonNullable.of(startPosition);
        return this;
    }

    /**
     * Position of the first item in the total results
     */
    public GetWorkspaceUsersResponse withStartPosition(JsonNullable<Integer> startPosition) {
        Utils.checkNotNull(startPosition, "startPosition");
        this.startPosition = startPosition;
        return this;
    }

    /**
     * Position of the last item in the total results
     */
    public GetWorkspaceUsersResponse withEndPosition(int endPosition) {
        Utils.checkNotNull(endPosition, "endPosition");
        this.endPosition = JsonNullable.of(endPosition);
        return this;
    }

    /**
     * Position of the last item in the total results
     */
    public GetWorkspaceUsersResponse withEndPosition(JsonNullable<Integer> endPosition) {
        Utils.checkNotNull(endPosition, "endPosition");
        this.endPosition = endPosition;
        return this;
    }

    /**
     * The total number of users in the workspace applicable to the request regardless of pagination. It
     * may not always be computed
     */
    public GetWorkspaceUsersResponse withTotalRowCount(int totalRowCount) {
        Utils.checkNotNull(totalRowCount, "totalRowCount");
        this.totalRowCount = JsonNullable.of(totalRowCount);
        return this;
    }

    /**
     * The total number of users in the workspace applicable to the request regardless of pagination. It
     * may not always be computed
     */
    public GetWorkspaceUsersResponse withTotalRowCount(JsonNullable<Integer> totalRowCount) {
        Utils.checkNotNull(totalRowCount, "totalRowCount");
        this.totalRowCount = totalRowCount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkspaceUsersResponse other = (GetWorkspaceUsersResponse) o;
        return 
            Utils.enhancedDeepEquals(this.users, other.users) &&
            Utils.enhancedDeepEquals(this.resultSetSize, other.resultSetSize) &&
            Utils.enhancedDeepEquals(this.startPosition, other.startPosition) &&
            Utils.enhancedDeepEquals(this.endPosition, other.endPosition) &&
            Utils.enhancedDeepEquals(this.totalRowCount, other.totalRowCount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            users, resultSetSize, startPosition,
            endPosition, totalRowCount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkspaceUsersResponse.class,
                "users", users,
                "resultSetSize", resultSetSize,
                "startPosition", startPosition,
                "endPosition", endPosition,
                "totalRowCount", totalRowCount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<WorkspaceUserSummary>> users = Optional.empty();

        private JsonNullable<Integer> resultSetSize = JsonNullable.undefined();

        private JsonNullable<Integer> startPosition = JsonNullable.undefined();

        private JsonNullable<Integer> endPosition = JsonNullable.undefined();

        private JsonNullable<Integer> totalRowCount = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The user summary list. Includes the ID, name, and metadata such as the role ID and role name
         */
        public Builder users(List<WorkspaceUserSummary> users) {
            Utils.checkNotNull(users, "users");
            this.users = Optional.ofNullable(users);
            return this;
        }

        /**
         * The user summary list. Includes the ID, name, and metadata such as the role ID and role name
         */
        public Builder users(Optional<? extends List<WorkspaceUserSummary>> users) {
            Utils.checkNotNull(users, "users");
            this.users = users;
            return this;
        }


        /**
         * The number of users returned in the response. Always equal or less than the `count` of the request
         */
        public Builder resultSetSize(int resultSetSize) {
            Utils.checkNotNull(resultSetSize, "resultSetSize");
            this.resultSetSize = JsonNullable.of(resultSetSize);
            return this;
        }

        /**
         * The number of users returned in the response. Always equal or less than the `count` of the request
         */
        public Builder resultSetSize(JsonNullable<Integer> resultSetSize) {
            Utils.checkNotNull(resultSetSize, "resultSetSize");
            this.resultSetSize = resultSetSize;
            return this;
        }


        /**
         * Position of the first item in the total results
         */
        public Builder startPosition(int startPosition) {
            Utils.checkNotNull(startPosition, "startPosition");
            this.startPosition = JsonNullable.of(startPosition);
            return this;
        }

        /**
         * Position of the first item in the total results
         */
        public Builder startPosition(JsonNullable<Integer> startPosition) {
            Utils.checkNotNull(startPosition, "startPosition");
            this.startPosition = startPosition;
            return this;
        }


        /**
         * Position of the last item in the total results
         */
        public Builder endPosition(int endPosition) {
            Utils.checkNotNull(endPosition, "endPosition");
            this.endPosition = JsonNullable.of(endPosition);
            return this;
        }

        /**
         * Position of the last item in the total results
         */
        public Builder endPosition(JsonNullable<Integer> endPosition) {
            Utils.checkNotNull(endPosition, "endPosition");
            this.endPosition = endPosition;
            return this;
        }


        /**
         * The total number of users in the workspace applicable to the request regardless of pagination. It
         * may not always be computed
         */
        public Builder totalRowCount(int totalRowCount) {
            Utils.checkNotNull(totalRowCount, "totalRowCount");
            this.totalRowCount = JsonNullable.of(totalRowCount);
            return this;
        }

        /**
         * The total number of users in the workspace applicable to the request regardless of pagination. It
         * may not always be computed
         */
        public Builder totalRowCount(JsonNullable<Integer> totalRowCount) {
            Utils.checkNotNull(totalRowCount, "totalRowCount");
            this.totalRowCount = totalRowCount;
            return this;
        }

        public GetWorkspaceUsersResponse build() {

            return new GetWorkspaceUsersResponse(
                users, resultSetSize, startPosition,
                endPosition, totalRowCount);
        }

    }
}
