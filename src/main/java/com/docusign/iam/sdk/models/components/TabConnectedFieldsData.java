/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class TabConnectedFieldsData {

    /**
     * The fully qualified namespace for the type system being verified.
     */
    @JsonProperty("typeSystemNamespace")
    private String typeSystemNamespace;

    /**
     * Name of the type being verified.
     */
    @JsonProperty("typeName")
    private String typeName;

    /**
     * The operation that the field supports.
     */
    @JsonProperty("supportedOperation")
    private SupportedOperation supportedOperation;

    /**
     * The name of the individual field being verified.
     */
    @JsonProperty("propertyName")
    private String propertyName;

    /**
     * Indicates the type verification url of the field.
     */
    @JsonProperty("supportedUri")
    private String supportedUri;

    @JsonCreator
    public TabConnectedFieldsData(
            @JsonProperty("typeSystemNamespace") String typeSystemNamespace,
            @JsonProperty("typeName") String typeName,
            @JsonProperty("supportedOperation") SupportedOperation supportedOperation,
            @JsonProperty("propertyName") String propertyName,
            @JsonProperty("supportedUri") String supportedUri) {
        Utils.checkNotNull(typeSystemNamespace, "typeSystemNamespace");
        Utils.checkNotNull(typeName, "typeName");
        Utils.checkNotNull(supportedOperation, "supportedOperation");
        Utils.checkNotNull(propertyName, "propertyName");
        Utils.checkNotNull(supportedUri, "supportedUri");
        this.typeSystemNamespace = typeSystemNamespace;
        this.typeName = typeName;
        this.supportedOperation = supportedOperation;
        this.propertyName = propertyName;
        this.supportedUri = supportedUri;
    }

    /**
     * The fully qualified namespace for the type system being verified.
     */
    @JsonIgnore
    public String typeSystemNamespace() {
        return typeSystemNamespace;
    }

    /**
     * Name of the type being verified.
     */
    @JsonIgnore
    public String typeName() {
        return typeName;
    }

    /**
     * The operation that the field supports.
     */
    @JsonIgnore
    public SupportedOperation supportedOperation() {
        return supportedOperation;
    }

    /**
     * The name of the individual field being verified.
     */
    @JsonIgnore
    public String propertyName() {
        return propertyName;
    }

    /**
     * Indicates the type verification url of the field.
     */
    @JsonIgnore
    public String supportedUri() {
        return supportedUri;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The fully qualified namespace for the type system being verified.
     */
    public TabConnectedFieldsData withTypeSystemNamespace(String typeSystemNamespace) {
        Utils.checkNotNull(typeSystemNamespace, "typeSystemNamespace");
        this.typeSystemNamespace = typeSystemNamespace;
        return this;
    }

    /**
     * Name of the type being verified.
     */
    public TabConnectedFieldsData withTypeName(String typeName) {
        Utils.checkNotNull(typeName, "typeName");
        this.typeName = typeName;
        return this;
    }

    /**
     * The operation that the field supports.
     */
    public TabConnectedFieldsData withSupportedOperation(SupportedOperation supportedOperation) {
        Utils.checkNotNull(supportedOperation, "supportedOperation");
        this.supportedOperation = supportedOperation;
        return this;
    }

    /**
     * The name of the individual field being verified.
     */
    public TabConnectedFieldsData withPropertyName(String propertyName) {
        Utils.checkNotNull(propertyName, "propertyName");
        this.propertyName = propertyName;
        return this;
    }

    /**
     * Indicates the type verification url of the field.
     */
    public TabConnectedFieldsData withSupportedUri(String supportedUri) {
        Utils.checkNotNull(supportedUri, "supportedUri");
        this.supportedUri = supportedUri;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TabConnectedFieldsData other = (TabConnectedFieldsData) o;
        return 
            Objects.deepEquals(this.typeSystemNamespace, other.typeSystemNamespace) &&
            Objects.deepEquals(this.typeName, other.typeName) &&
            Objects.deepEquals(this.supportedOperation, other.supportedOperation) &&
            Objects.deepEquals(this.propertyName, other.propertyName) &&
            Objects.deepEquals(this.supportedUri, other.supportedUri);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            typeSystemNamespace,
            typeName,
            supportedOperation,
            propertyName,
            supportedUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TabConnectedFieldsData.class,
                "typeSystemNamespace", typeSystemNamespace,
                "typeName", typeName,
                "supportedOperation", supportedOperation,
                "propertyName", propertyName,
                "supportedUri", supportedUri);
    }
    
    public final static class Builder {
 
        private String typeSystemNamespace;
 
        private String typeName;
 
        private SupportedOperation supportedOperation;
 
        private String propertyName;
 
        private String supportedUri;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The fully qualified namespace for the type system being verified.
         */
        public Builder typeSystemNamespace(String typeSystemNamespace) {
            Utils.checkNotNull(typeSystemNamespace, "typeSystemNamespace");
            this.typeSystemNamespace = typeSystemNamespace;
            return this;
        }

        /**
         * Name of the type being verified.
         */
        public Builder typeName(String typeName) {
            Utils.checkNotNull(typeName, "typeName");
            this.typeName = typeName;
            return this;
        }

        /**
         * The operation that the field supports.
         */
        public Builder supportedOperation(SupportedOperation supportedOperation) {
            Utils.checkNotNull(supportedOperation, "supportedOperation");
            this.supportedOperation = supportedOperation;
            return this;
        }

        /**
         * The name of the individual field being verified.
         */
        public Builder propertyName(String propertyName) {
            Utils.checkNotNull(propertyName, "propertyName");
            this.propertyName = propertyName;
            return this;
        }

        /**
         * Indicates the type verification url of the field.
         */
        public Builder supportedUri(String supportedUri) {
            Utils.checkNotNull(supportedUri, "supportedUri");
            this.supportedUri = supportedUri;
            return this;
        }
        
        public TabConnectedFieldsData build() {
            return new TabConnectedFieldsData(
                typeSystemNamespace,
                typeName,
                supportedOperation,
                propertyName,
                supportedUri);
        }
    }
}
