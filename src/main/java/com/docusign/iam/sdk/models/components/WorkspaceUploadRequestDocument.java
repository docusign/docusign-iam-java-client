/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class WorkspaceUploadRequestDocument {
    /**
     * The document name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_name")
    private JsonNullable<String> documentName;

    /**
     * The document ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_id")
    private JsonNullable<String> documentId;

    @JsonCreator
    public WorkspaceUploadRequestDocument(
            @JsonProperty("document_name") JsonNullable<String> documentName,
            @JsonProperty("document_id") JsonNullable<String> documentId) {
        Utils.checkNotNull(documentName, "documentName");
        Utils.checkNotNull(documentId, "documentId");
        this.documentName = documentName;
        this.documentId = documentId;
    }
    
    public WorkspaceUploadRequestDocument() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The document name
     */
    @JsonIgnore
    public JsonNullable<String> documentName() {
        return documentName;
    }

    /**
     * The document ID
     */
    @JsonIgnore
    public JsonNullable<String> documentId() {
        return documentId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The document name
     */
    public WorkspaceUploadRequestDocument withDocumentName(String documentName) {
        Utils.checkNotNull(documentName, "documentName");
        this.documentName = JsonNullable.of(documentName);
        return this;
    }

    /**
     * The document name
     */
    public WorkspaceUploadRequestDocument withDocumentName(JsonNullable<String> documentName) {
        Utils.checkNotNull(documentName, "documentName");
        this.documentName = documentName;
        return this;
    }

    /**
     * The document ID
     */
    public WorkspaceUploadRequestDocument withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = JsonNullable.of(documentId);
        return this;
    }

    /**
     * The document ID
     */
    public WorkspaceUploadRequestDocument withDocumentId(JsonNullable<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceUploadRequestDocument other = (WorkspaceUploadRequestDocument) o;
        return 
            Utils.enhancedDeepEquals(this.documentName, other.documentName) &&
            Utils.enhancedDeepEquals(this.documentId, other.documentId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            documentName, documentId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceUploadRequestDocument.class,
                "documentName", documentName,
                "documentId", documentId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> documentName = JsonNullable.undefined();

        private JsonNullable<String> documentId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The document name
         */
        public Builder documentName(String documentName) {
            Utils.checkNotNull(documentName, "documentName");
            this.documentName = JsonNullable.of(documentName);
            return this;
        }

        /**
         * The document name
         */
        public Builder documentName(JsonNullable<String> documentName) {
            Utils.checkNotNull(documentName, "documentName");
            this.documentName = documentName;
            return this;
        }


        /**
         * The document ID
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = JsonNullable.of(documentId);
            return this;
        }

        /**
         * The document ID
         */
        public Builder documentId(JsonNullable<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        public WorkspaceUploadRequestDocument build() {

            return new WorkspaceUploadRequestDocument(
                documentName, documentId);
        }

    }
}
