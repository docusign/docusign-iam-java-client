/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class TabExtensionData {
    /**
     * A unique UUID for each tab group. Tabs associated with the same model or concept will share the same
     * extensionGroupId.
     */
    @JsonProperty("extensionGroupId")
    private String extensionGroupId;

    /**
     * Determines input data key required for data verification.
     */
    @JsonProperty("actionInputKey")
    private String actionInputKey;

    /**
     * Indicates if the field is required to sign the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extensionPolicy")
    private Optional<? extends ExtensionPolicy> extensionPolicy;

    /**
     * Publisher of the extension app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisherName")
    private Optional<String> publisherName;

    /**
     * Name of the extension app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationName")
    private Optional<String> applicationName;

    /**
     * Name of an action in an extension app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionName")
    private Optional<String> actionName;

    /**
     * Indicates the  template that defines an extension.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extensionContract")
    private Optional<String> extensionContract;

    /**
     * Indicates the template defining an action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionContract")
    private Optional<String> actionContract;

    /**
     * Name of the extension.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extensionName")
    private Optional<String> extensionName;

    /**
     * A boolean value that indicates if the field must pass verification to sign the document.
     */
    @JsonProperty("requiredForExtension")
    private boolean requiredForExtension;

    /**
     * Array representing the extension app connection name and instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionInstances")
    private Optional<? extends List<TabConnectionInstance>> connectionInstances;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectedFieldsData")
    private Optional<? extends TabConnectedFieldsData> connectedFieldsData;

    @JsonCreator
    public TabExtensionData(
            @JsonProperty("extensionGroupId") String extensionGroupId,
            @JsonProperty("actionInputKey") String actionInputKey,
            @JsonProperty("extensionPolicy") Optional<? extends ExtensionPolicy> extensionPolicy,
            @JsonProperty("publisherName") Optional<String> publisherName,
            @JsonProperty("applicationName") Optional<String> applicationName,
            @JsonProperty("actionName") Optional<String> actionName,
            @JsonProperty("extensionContract") Optional<String> extensionContract,
            @JsonProperty("actionContract") Optional<String> actionContract,
            @JsonProperty("extensionName") Optional<String> extensionName,
            @JsonProperty("requiredForExtension") boolean requiredForExtension,
            @JsonProperty("connectionInstances") Optional<? extends List<TabConnectionInstance>> connectionInstances,
            @JsonProperty("connectedFieldsData") Optional<? extends TabConnectedFieldsData> connectedFieldsData) {
        Utils.checkNotNull(extensionGroupId, "extensionGroupId");
        Utils.checkNotNull(actionInputKey, "actionInputKey");
        Utils.checkNotNull(extensionPolicy, "extensionPolicy");
        Utils.checkNotNull(publisherName, "publisherName");
        Utils.checkNotNull(applicationName, "applicationName");
        Utils.checkNotNull(actionName, "actionName");
        Utils.checkNotNull(extensionContract, "extensionContract");
        Utils.checkNotNull(actionContract, "actionContract");
        Utils.checkNotNull(extensionName, "extensionName");
        Utils.checkNotNull(requiredForExtension, "requiredForExtension");
        Utils.checkNotNull(connectionInstances, "connectionInstances");
        Utils.checkNotNull(connectedFieldsData, "connectedFieldsData");
        this.extensionGroupId = extensionGroupId;
        this.actionInputKey = actionInputKey;
        this.extensionPolicy = extensionPolicy;
        this.publisherName = publisherName;
        this.applicationName = applicationName;
        this.actionName = actionName;
        this.extensionContract = extensionContract;
        this.actionContract = actionContract;
        this.extensionName = extensionName;
        this.requiredForExtension = requiredForExtension;
        this.connectionInstances = connectionInstances;
        this.connectedFieldsData = connectedFieldsData;
    }
    
    public TabExtensionData(
            String extensionGroupId,
            String actionInputKey,
            boolean requiredForExtension) {
        this(extensionGroupId, actionInputKey, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            requiredForExtension, Optional.empty(), Optional.empty());
    }

    /**
     * A unique UUID for each tab group. Tabs associated with the same model or concept will share the same
     * extensionGroupId.
     */
    @JsonIgnore
    public String extensionGroupId() {
        return extensionGroupId;
    }

    /**
     * Determines input data key required for data verification.
     */
    @JsonIgnore
    public String actionInputKey() {
        return actionInputKey;
    }

    /**
     * Indicates if the field is required to sign the document
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExtensionPolicy> extensionPolicy() {
        return (Optional<ExtensionPolicy>) extensionPolicy;
    }

    /**
     * Publisher of the extension app.
     */
    @JsonIgnore
    public Optional<String> publisherName() {
        return publisherName;
    }

    /**
     * Name of the extension app.
     */
    @JsonIgnore
    public Optional<String> applicationName() {
        return applicationName;
    }

    /**
     * Name of an action in an extension app.
     */
    @JsonIgnore
    public Optional<String> actionName() {
        return actionName;
    }

    /**
     * Indicates the  template that defines an extension.
     */
    @JsonIgnore
    public Optional<String> extensionContract() {
        return extensionContract;
    }

    /**
     * Indicates the template defining an action.
     */
    @JsonIgnore
    public Optional<String> actionContract() {
        return actionContract;
    }

    /**
     * Name of the extension.
     */
    @JsonIgnore
    public Optional<String> extensionName() {
        return extensionName;
    }

    /**
     * A boolean value that indicates if the field must pass verification to sign the document.
     */
    @JsonIgnore
    public boolean requiredForExtension() {
        return requiredForExtension;
    }

    /**
     * Array representing the extension app connection name and instance.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TabConnectionInstance>> connectionInstances() {
        return (Optional<List<TabConnectionInstance>>) connectionInstances;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TabConnectedFieldsData> connectedFieldsData() {
        return (Optional<TabConnectedFieldsData>) connectedFieldsData;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A unique UUID for each tab group. Tabs associated with the same model or concept will share the same
     * extensionGroupId.
     */
    public TabExtensionData withExtensionGroupId(String extensionGroupId) {
        Utils.checkNotNull(extensionGroupId, "extensionGroupId");
        this.extensionGroupId = extensionGroupId;
        return this;
    }

    /**
     * Determines input data key required for data verification.
     */
    public TabExtensionData withActionInputKey(String actionInputKey) {
        Utils.checkNotNull(actionInputKey, "actionInputKey");
        this.actionInputKey = actionInputKey;
        return this;
    }

    /**
     * Indicates if the field is required to sign the document
     */
    public TabExtensionData withExtensionPolicy(ExtensionPolicy extensionPolicy) {
        Utils.checkNotNull(extensionPolicy, "extensionPolicy");
        this.extensionPolicy = Optional.ofNullable(extensionPolicy);
        return this;
    }


    /**
     * Indicates if the field is required to sign the document
     */
    public TabExtensionData withExtensionPolicy(Optional<? extends ExtensionPolicy> extensionPolicy) {
        Utils.checkNotNull(extensionPolicy, "extensionPolicy");
        this.extensionPolicy = extensionPolicy;
        return this;
    }

    /**
     * Publisher of the extension app.
     */
    public TabExtensionData withPublisherName(String publisherName) {
        Utils.checkNotNull(publisherName, "publisherName");
        this.publisherName = Optional.ofNullable(publisherName);
        return this;
    }


    /**
     * Publisher of the extension app.
     */
    public TabExtensionData withPublisherName(Optional<String> publisherName) {
        Utils.checkNotNull(publisherName, "publisherName");
        this.publisherName = publisherName;
        return this;
    }

    /**
     * Name of the extension app.
     */
    public TabExtensionData withApplicationName(String applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = Optional.ofNullable(applicationName);
        return this;
    }


    /**
     * Name of the extension app.
     */
    public TabExtensionData withApplicationName(Optional<String> applicationName) {
        Utils.checkNotNull(applicationName, "applicationName");
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Name of an action in an extension app.
     */
    public TabExtensionData withActionName(String actionName) {
        Utils.checkNotNull(actionName, "actionName");
        this.actionName = Optional.ofNullable(actionName);
        return this;
    }


    /**
     * Name of an action in an extension app.
     */
    public TabExtensionData withActionName(Optional<String> actionName) {
        Utils.checkNotNull(actionName, "actionName");
        this.actionName = actionName;
        return this;
    }

    /**
     * Indicates the  template that defines an extension.
     */
    public TabExtensionData withExtensionContract(String extensionContract) {
        Utils.checkNotNull(extensionContract, "extensionContract");
        this.extensionContract = Optional.ofNullable(extensionContract);
        return this;
    }


    /**
     * Indicates the  template that defines an extension.
     */
    public TabExtensionData withExtensionContract(Optional<String> extensionContract) {
        Utils.checkNotNull(extensionContract, "extensionContract");
        this.extensionContract = extensionContract;
        return this;
    }

    /**
     * Indicates the template defining an action.
     */
    public TabExtensionData withActionContract(String actionContract) {
        Utils.checkNotNull(actionContract, "actionContract");
        this.actionContract = Optional.ofNullable(actionContract);
        return this;
    }


    /**
     * Indicates the template defining an action.
     */
    public TabExtensionData withActionContract(Optional<String> actionContract) {
        Utils.checkNotNull(actionContract, "actionContract");
        this.actionContract = actionContract;
        return this;
    }

    /**
     * Name of the extension.
     */
    public TabExtensionData withExtensionName(String extensionName) {
        Utils.checkNotNull(extensionName, "extensionName");
        this.extensionName = Optional.ofNullable(extensionName);
        return this;
    }


    /**
     * Name of the extension.
     */
    public TabExtensionData withExtensionName(Optional<String> extensionName) {
        Utils.checkNotNull(extensionName, "extensionName");
        this.extensionName = extensionName;
        return this;
    }

    /**
     * A boolean value that indicates if the field must pass verification to sign the document.
     */
    public TabExtensionData withRequiredForExtension(boolean requiredForExtension) {
        Utils.checkNotNull(requiredForExtension, "requiredForExtension");
        this.requiredForExtension = requiredForExtension;
        return this;
    }

    /**
     * Array representing the extension app connection name and instance.
     */
    public TabExtensionData withConnectionInstances(List<TabConnectionInstance> connectionInstances) {
        Utils.checkNotNull(connectionInstances, "connectionInstances");
        this.connectionInstances = Optional.ofNullable(connectionInstances);
        return this;
    }


    /**
     * Array representing the extension app connection name and instance.
     */
    public TabExtensionData withConnectionInstances(Optional<? extends List<TabConnectionInstance>> connectionInstances) {
        Utils.checkNotNull(connectionInstances, "connectionInstances");
        this.connectionInstances = connectionInstances;
        return this;
    }

    public TabExtensionData withConnectedFieldsData(TabConnectedFieldsData connectedFieldsData) {
        Utils.checkNotNull(connectedFieldsData, "connectedFieldsData");
        this.connectedFieldsData = Optional.ofNullable(connectedFieldsData);
        return this;
    }


    public TabExtensionData withConnectedFieldsData(Optional<? extends TabConnectedFieldsData> connectedFieldsData) {
        Utils.checkNotNull(connectedFieldsData, "connectedFieldsData");
        this.connectedFieldsData = connectedFieldsData;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TabExtensionData other = (TabExtensionData) o;
        return 
            Utils.enhancedDeepEquals(this.extensionGroupId, other.extensionGroupId) &&
            Utils.enhancedDeepEquals(this.actionInputKey, other.actionInputKey) &&
            Utils.enhancedDeepEquals(this.extensionPolicy, other.extensionPolicy) &&
            Utils.enhancedDeepEquals(this.publisherName, other.publisherName) &&
            Utils.enhancedDeepEquals(this.applicationName, other.applicationName) &&
            Utils.enhancedDeepEquals(this.actionName, other.actionName) &&
            Utils.enhancedDeepEquals(this.extensionContract, other.extensionContract) &&
            Utils.enhancedDeepEquals(this.actionContract, other.actionContract) &&
            Utils.enhancedDeepEquals(this.extensionName, other.extensionName) &&
            Utils.enhancedDeepEquals(this.requiredForExtension, other.requiredForExtension) &&
            Utils.enhancedDeepEquals(this.connectionInstances, other.connectionInstances) &&
            Utils.enhancedDeepEquals(this.connectedFieldsData, other.connectedFieldsData);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            extensionGroupId, actionInputKey, extensionPolicy,
            publisherName, applicationName, actionName,
            extensionContract, actionContract, extensionName,
            requiredForExtension, connectionInstances, connectedFieldsData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TabExtensionData.class,
                "extensionGroupId", extensionGroupId,
                "actionInputKey", actionInputKey,
                "extensionPolicy", extensionPolicy,
                "publisherName", publisherName,
                "applicationName", applicationName,
                "actionName", actionName,
                "extensionContract", extensionContract,
                "actionContract", actionContract,
                "extensionName", extensionName,
                "requiredForExtension", requiredForExtension,
                "connectionInstances", connectionInstances,
                "connectedFieldsData", connectedFieldsData);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String extensionGroupId;

        private String actionInputKey;

        private Optional<? extends ExtensionPolicy> extensionPolicy = Optional.empty();

        private Optional<String> publisherName = Optional.empty();

        private Optional<String> applicationName = Optional.empty();

        private Optional<String> actionName = Optional.empty();

        private Optional<String> extensionContract = Optional.empty();

        private Optional<String> actionContract = Optional.empty();

        private Optional<String> extensionName = Optional.empty();

        private Boolean requiredForExtension;

        private Optional<? extends List<TabConnectionInstance>> connectionInstances = Optional.empty();

        private Optional<? extends TabConnectedFieldsData> connectedFieldsData = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A unique UUID for each tab group. Tabs associated with the same model or concept will share the same
         * extensionGroupId.
         */
        public Builder extensionGroupId(String extensionGroupId) {
            Utils.checkNotNull(extensionGroupId, "extensionGroupId");
            this.extensionGroupId = extensionGroupId;
            return this;
        }


        /**
         * Determines input data key required for data verification.
         */
        public Builder actionInputKey(String actionInputKey) {
            Utils.checkNotNull(actionInputKey, "actionInputKey");
            this.actionInputKey = actionInputKey;
            return this;
        }


        /**
         * Indicates if the field is required to sign the document
         */
        public Builder extensionPolicy(ExtensionPolicy extensionPolicy) {
            Utils.checkNotNull(extensionPolicy, "extensionPolicy");
            this.extensionPolicy = Optional.ofNullable(extensionPolicy);
            return this;
        }

        /**
         * Indicates if the field is required to sign the document
         */
        public Builder extensionPolicy(Optional<? extends ExtensionPolicy> extensionPolicy) {
            Utils.checkNotNull(extensionPolicy, "extensionPolicy");
            this.extensionPolicy = extensionPolicy;
            return this;
        }


        /**
         * Publisher of the extension app.
         */
        public Builder publisherName(String publisherName) {
            Utils.checkNotNull(publisherName, "publisherName");
            this.publisherName = Optional.ofNullable(publisherName);
            return this;
        }

        /**
         * Publisher of the extension app.
         */
        public Builder publisherName(Optional<String> publisherName) {
            Utils.checkNotNull(publisherName, "publisherName");
            this.publisherName = publisherName;
            return this;
        }


        /**
         * Name of the extension app.
         */
        public Builder applicationName(String applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = Optional.ofNullable(applicationName);
            return this;
        }

        /**
         * Name of the extension app.
         */
        public Builder applicationName(Optional<String> applicationName) {
            Utils.checkNotNull(applicationName, "applicationName");
            this.applicationName = applicationName;
            return this;
        }


        /**
         * Name of an action in an extension app.
         */
        public Builder actionName(String actionName) {
            Utils.checkNotNull(actionName, "actionName");
            this.actionName = Optional.ofNullable(actionName);
            return this;
        }

        /**
         * Name of an action in an extension app.
         */
        public Builder actionName(Optional<String> actionName) {
            Utils.checkNotNull(actionName, "actionName");
            this.actionName = actionName;
            return this;
        }


        /**
         * Indicates the  template that defines an extension.
         */
        public Builder extensionContract(String extensionContract) {
            Utils.checkNotNull(extensionContract, "extensionContract");
            this.extensionContract = Optional.ofNullable(extensionContract);
            return this;
        }

        /**
         * Indicates the  template that defines an extension.
         */
        public Builder extensionContract(Optional<String> extensionContract) {
            Utils.checkNotNull(extensionContract, "extensionContract");
            this.extensionContract = extensionContract;
            return this;
        }


        /**
         * Indicates the template defining an action.
         */
        public Builder actionContract(String actionContract) {
            Utils.checkNotNull(actionContract, "actionContract");
            this.actionContract = Optional.ofNullable(actionContract);
            return this;
        }

        /**
         * Indicates the template defining an action.
         */
        public Builder actionContract(Optional<String> actionContract) {
            Utils.checkNotNull(actionContract, "actionContract");
            this.actionContract = actionContract;
            return this;
        }


        /**
         * Name of the extension.
         */
        public Builder extensionName(String extensionName) {
            Utils.checkNotNull(extensionName, "extensionName");
            this.extensionName = Optional.ofNullable(extensionName);
            return this;
        }

        /**
         * Name of the extension.
         */
        public Builder extensionName(Optional<String> extensionName) {
            Utils.checkNotNull(extensionName, "extensionName");
            this.extensionName = extensionName;
            return this;
        }


        /**
         * A boolean value that indicates if the field must pass verification to sign the document.
         */
        public Builder requiredForExtension(boolean requiredForExtension) {
            Utils.checkNotNull(requiredForExtension, "requiredForExtension");
            this.requiredForExtension = requiredForExtension;
            return this;
        }


        /**
         * Array representing the extension app connection name and instance.
         */
        public Builder connectionInstances(List<TabConnectionInstance> connectionInstances) {
            Utils.checkNotNull(connectionInstances, "connectionInstances");
            this.connectionInstances = Optional.ofNullable(connectionInstances);
            return this;
        }

        /**
         * Array representing the extension app connection name and instance.
         */
        public Builder connectionInstances(Optional<? extends List<TabConnectionInstance>> connectionInstances) {
            Utils.checkNotNull(connectionInstances, "connectionInstances");
            this.connectionInstances = connectionInstances;
            return this;
        }


        public Builder connectedFieldsData(TabConnectedFieldsData connectedFieldsData) {
            Utils.checkNotNull(connectedFieldsData, "connectedFieldsData");
            this.connectedFieldsData = Optional.ofNullable(connectedFieldsData);
            return this;
        }

        public Builder connectedFieldsData(Optional<? extends TabConnectedFieldsData> connectedFieldsData) {
            Utils.checkNotNull(connectedFieldsData, "connectedFieldsData");
            this.connectedFieldsData = connectedFieldsData;
            return this;
        }

        public TabExtensionData build() {

            return new TabExtensionData(
                extensionGroupId, actionInputKey, extensionPolicy,
                publisherName, applicationName, actionName,
                extensionContract, actionContract, extensionName,
                requiredForExtension, connectionInstances, connectedFieldsData);
        }

    }
}
