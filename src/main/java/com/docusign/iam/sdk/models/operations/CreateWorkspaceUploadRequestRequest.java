/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.models.components.CreateWorkspaceUploadRequestBody;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;


public class CreateWorkspaceUploadRequestRequest {
    /**
     * The ID of the account
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private String accountId;

    /**
     * The ID of the workspace
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspaceId")
    private String workspaceId;

    /**
     * The upload request details including name, description, assignments, and status
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody;

    @JsonCreator
    public CreateWorkspaceUploadRequestRequest(
            String accountId,
            String workspaceId,
            CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(createWorkspaceUploadRequestBody, "createWorkspaceUploadRequestBody");
        this.accountId = accountId;
        this.workspaceId = workspaceId;
        this.createWorkspaceUploadRequestBody = createWorkspaceUploadRequestBody;
    }

    /**
     * The ID of the account
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    /**
     * The upload request details including name, description, assignments, and status
     */
    @JsonIgnore
    public CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody() {
        return createWorkspaceUploadRequestBody;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the account
     */
    public CreateWorkspaceUploadRequestRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The ID of the workspace
     */
    public CreateWorkspaceUploadRequestRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The upload request details including name, description, assignments, and status
     */
    public CreateWorkspaceUploadRequestRequest withCreateWorkspaceUploadRequestBody(CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody) {
        Utils.checkNotNull(createWorkspaceUploadRequestBody, "createWorkspaceUploadRequestBody");
        this.createWorkspaceUploadRequestBody = createWorkspaceUploadRequestBody;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWorkspaceUploadRequestRequest other = (CreateWorkspaceUploadRequestRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.createWorkspaceUploadRequestBody, other.createWorkspaceUploadRequestBody);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, workspaceId, createWorkspaceUploadRequestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWorkspaceUploadRequestRequest.class,
                "accountId", accountId,
                "workspaceId", workspaceId,
                "createWorkspaceUploadRequestBody", createWorkspaceUploadRequestBody);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accountId;

        private String workspaceId;

        private CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the account
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * The upload request details including name, description, assignments, and status
         */
        public Builder createWorkspaceUploadRequestBody(CreateWorkspaceUploadRequestBody createWorkspaceUploadRequestBody) {
            Utils.checkNotNull(createWorkspaceUploadRequestBody, "createWorkspaceUploadRequestBody");
            this.createWorkspaceUploadRequestBody = createWorkspaceUploadRequestBody;
            return this;
        }

        public CreateWorkspaceUploadRequestRequest build() {

            return new CreateWorkspaceUploadRequestRequest(
                accountId, workspaceId, createWorkspaceUploadRequestBody);
        }

    }
}
