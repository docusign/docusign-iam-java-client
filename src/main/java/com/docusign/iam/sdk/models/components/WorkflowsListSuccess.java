/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * WorkflowsListSuccess
 * 
 * <p>A list of workflows has been successfully returned.
 */
public class WorkflowsListSuccess {

    /**
     * A list of workflows
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends WorkflowList> data;

    /**
     * Control information and metadata for the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_metadata")
    private Optional<? extends ResponseMetadata> responseMetadata;

    @JsonCreator
    public WorkflowsListSuccess(
            @JsonProperty("data") Optional<? extends WorkflowList> data,
            @JsonProperty("response_metadata") Optional<? extends ResponseMetadata> responseMetadata) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(responseMetadata, "responseMetadata");
        this.data = data;
        this.responseMetadata = responseMetadata;
    }
    
    public WorkflowsListSuccess() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A list of workflows
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkflowList> data() {
        return (Optional<WorkflowList>) data;
    }

    /**
     * Control information and metadata for the response.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResponseMetadata> responseMetadata() {
        return (Optional<ResponseMetadata>) responseMetadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A list of workflows
     */
    public WorkflowsListSuccess withData(WorkflowList data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    /**
     * A list of workflows
     */
    public WorkflowsListSuccess withData(Optional<? extends WorkflowList> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    /**
     * Control information and metadata for the response.
     */
    public WorkflowsListSuccess withResponseMetadata(ResponseMetadata responseMetadata) {
        Utils.checkNotNull(responseMetadata, "responseMetadata");
        this.responseMetadata = Optional.ofNullable(responseMetadata);
        return this;
    }

    /**
     * Control information and metadata for the response.
     */
    public WorkflowsListSuccess withResponseMetadata(Optional<? extends ResponseMetadata> responseMetadata) {
        Utils.checkNotNull(responseMetadata, "responseMetadata");
        this.responseMetadata = responseMetadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowsListSuccess other = (WorkflowsListSuccess) o;
        return 
            Objects.deepEquals(this.data, other.data) &&
            Objects.deepEquals(this.responseMetadata, other.responseMetadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            data,
            responseMetadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowsListSuccess.class,
                "data", data,
                "responseMetadata", responseMetadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends WorkflowList> data = Optional.empty();
 
        private Optional<? extends ResponseMetadata> responseMetadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of workflows
         */
        public Builder data(WorkflowList data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        /**
         * A list of workflows
         */
        public Builder data(Optional<? extends WorkflowList> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        /**
         * Control information and metadata for the response.
         */
        public Builder responseMetadata(ResponseMetadata responseMetadata) {
            Utils.checkNotNull(responseMetadata, "responseMetadata");
            this.responseMetadata = Optional.ofNullable(responseMetadata);
            return this;
        }

        /**
         * Control information and metadata for the response.
         */
        public Builder responseMetadata(Optional<? extends ResponseMetadata> responseMetadata) {
            Utils.checkNotNull(responseMetadata, "responseMetadata");
            this.responseMetadata = responseMetadata;
            return this;
        }
        
        public WorkflowsListSuccess build() {
            return new WorkflowsListSuccess(
                data,
                responseMetadata);
        }
    }
}
