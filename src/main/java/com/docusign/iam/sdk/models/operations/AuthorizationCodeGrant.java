/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * AuthorizationCodeGrant
 * 
 * <p>This grant optionally uses Proof Key for Code Exchange (PKCE) to authenticate securely without requiring a client secret.
 */
public class AuthorizationCodeGrant {

    /**
     * The grant type. This value must be set to "refresh_token".
     */
    @SpeakeasyMetadata("form:name=grant_type")
    private Optional<? extends GetTokenFromRefreshTokenGrantType> grantType;

    /**
     * The refresh token supplied to the callback.
     */
    @SpeakeasyMetadata("form:name=refresh_token")
    private String refreshToken;

    /**
     * The client ID.
     */
    @SpeakeasyMetadata("form:name=client_id")
    private Optional<String> clientId;

    @JsonCreator
    public AuthorizationCodeGrant(
            Optional<? extends GetTokenFromRefreshTokenGrantType> grantType,
            String refreshToken,
            Optional<String> clientId) {
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(clientId, "clientId");
        this.grantType = grantType;
        this.refreshToken = refreshToken;
        this.clientId = clientId;
    }
    
    public AuthorizationCodeGrant(
            String refreshToken) {
        this(Optional.empty(), refreshToken, Optional.empty());
    }

    /**
     * The grant type. This value must be set to "refresh_token".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetTokenFromRefreshTokenGrantType> grantType() {
        return (Optional<GetTokenFromRefreshTokenGrantType>) grantType;
    }

    /**
     * The refresh token supplied to the callback.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    /**
     * The client ID.
     */
    @JsonIgnore
    public Optional<String> clientId() {
        return clientId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The grant type. This value must be set to "refresh_token".
     */
    public AuthorizationCodeGrant withGrantType(GetTokenFromRefreshTokenGrantType grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = Optional.ofNullable(grantType);
        return this;
    }

    /**
     * The grant type. This value must be set to "refresh_token".
     */
    public AuthorizationCodeGrant withGrantType(Optional<? extends GetTokenFromRefreshTokenGrantType> grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    /**
     * The refresh token supplied to the callback.
     */
    public AuthorizationCodeGrant withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * The client ID.
     */
    public AuthorizationCodeGrant withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = Optional.ofNullable(clientId);
        return this;
    }

    /**
     * The client ID.
     */
    public AuthorizationCodeGrant withClientId(Optional<String> clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthorizationCodeGrant other = (AuthorizationCodeGrant) o;
        return 
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            grantType,
            refreshToken,
            clientId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthorizationCodeGrant.class,
                "grantType", grantType,
                "refreshToken", refreshToken,
                "clientId", clientId);
    }
    
    public final static class Builder {
 
        private Optional<? extends GetTokenFromRefreshTokenGrantType> grantType;
 
        private String refreshToken;
 
        private Optional<String> clientId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The grant type. This value must be set to "refresh_token".
         */
        public Builder grantType(GetTokenFromRefreshTokenGrantType grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = Optional.ofNullable(grantType);
            return this;
        }

        /**
         * The grant type. This value must be set to "refresh_token".
         */
        public Builder grantType(Optional<? extends GetTokenFromRefreshTokenGrantType> grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }

        /**
         * The refresh token supplied to the callback.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * The client ID.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        /**
         * The client ID.
         */
        public Builder clientId(Optional<String> clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }
        
        public AuthorizationCodeGrant build() {
            if (grantType == null) {
                grantType = _SINGLETON_VALUE_GrantType.value();
            }
            return new AuthorizationCodeGrant(
                grantType,
                refreshToken,
                clientId);
        }

        private static final LazySingletonValue<Optional<? extends GetTokenFromRefreshTokenGrantType>> _SINGLETON_VALUE_GrantType =
                new LazySingletonValue<>(
                        "grant_type",
                        "\"refresh_token\"",
                        new TypeReference<Optional<? extends GetTokenFromRefreshTokenGrantType>>() {});
    }
}
