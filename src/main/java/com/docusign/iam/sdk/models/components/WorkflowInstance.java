/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class WorkflowInstance {

    /**
     * Unique identifier for the workflow instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Human-readable name for the workflow instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Current status of the workflow (e.g. In Progress, Completed, Canceled)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_status")
    private Optional<String> workflowStatus;

    /**
     * Identifier linking this instance to a workflow template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private Optional<String> templateId;

    /**
     * Account under which this workflow instance was initiated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private Optional<String> accountId;

    /**
     * Date and time when the workflow was started
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("started_at")
    private Optional<OffsetDateTime> startedAt;

    /**
     * User or system identifier that started this workflow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("started_by")
    private Optional<String> startedBy;

    /**
     * Display name of the user who started this workflow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("started_by_name")
    private Optional<String> startedByName;

    /**
     * Role of the user who started this workflow (e.g. Preparer)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("started_by_role")
    private Optional<String> startedByRole;

    /**
     * Date and time when the workflow completed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ended_at")
    private JsonNullable<OffsetDateTime> endedAt;

    /**
     * Date and time after which the workflow expires
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private JsonNullable<OffsetDateTime> expiresAt;

    /**
     * Date and time when the workflow instance was last modified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_modified_at")
    private Optional<OffsetDateTime> lastModifiedAt;

    /**
     * Date and time when the workflow was canceled (if applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_at")
    private JsonNullable<OffsetDateTime> canceledAt;

    /**
     * User or system identifier that canceled this workflow (if applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canceled_by")
    private JsonNullable<String> canceledBy;

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger_inputs")
    private Optional<? extends Map<String, TriggerInputs>> triggerInputs;

    /**
     * Total number of steps configured in the workflow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_steps")
    private Optional<Long> totalSteps;

    /**
     * The index of the most recently completed step
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_completed_step")
    private Optional<Long> lastCompletedStep;

    /**
     * The name of the most recently completed step
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_completed_step_name")
    private JsonNullable<String> lastCompletedStepName;

    /**
     * Custom tags for organization or filtering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;

    /**
     * Additional metadata related to this workflow instance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonCreator
    public WorkflowInstance(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("workflow_status") Optional<String> workflowStatus,
            @JsonProperty("template_id") Optional<String> templateId,
            @JsonProperty("account_id") Optional<String> accountId,
            @JsonProperty("started_at") Optional<OffsetDateTime> startedAt,
            @JsonProperty("started_by") Optional<String> startedBy,
            @JsonProperty("started_by_name") Optional<String> startedByName,
            @JsonProperty("started_by_role") Optional<String> startedByRole,
            @JsonProperty("ended_at") JsonNullable<OffsetDateTime> endedAt,
            @JsonProperty("expires_at") JsonNullable<OffsetDateTime> expiresAt,
            @JsonProperty("last_modified_at") Optional<OffsetDateTime> lastModifiedAt,
            @JsonProperty("canceled_at") JsonNullable<OffsetDateTime> canceledAt,
            @JsonProperty("canceled_by") JsonNullable<String> canceledBy,
            @JsonProperty("trigger_inputs") Optional<? extends Map<String, TriggerInputs>> triggerInputs,
            @JsonProperty("total_steps") Optional<Long> totalSteps,
            @JsonProperty("last_completed_step") Optional<Long> lastCompletedStep,
            @JsonProperty("last_completed_step_name") JsonNullable<String> lastCompletedStepName,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(workflowStatus, "workflowStatus");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(startedAt, "startedAt");
        Utils.checkNotNull(startedBy, "startedBy");
        Utils.checkNotNull(startedByName, "startedByName");
        Utils.checkNotNull(startedByRole, "startedByRole");
        Utils.checkNotNull(endedAt, "endedAt");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(lastModifiedAt, "lastModifiedAt");
        Utils.checkNotNull(canceledAt, "canceledAt");
        Utils.checkNotNull(canceledBy, "canceledBy");
        Utils.checkNotNull(triggerInputs, "triggerInputs");
        Utils.checkNotNull(totalSteps, "totalSteps");
        Utils.checkNotNull(lastCompletedStep, "lastCompletedStep");
        Utils.checkNotNull(lastCompletedStepName, "lastCompletedStepName");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(metadata, "metadata");
        this.id = id;
        this.name = name;
        this.workflowStatus = workflowStatus;
        this.templateId = templateId;
        this.accountId = accountId;
        this.startedAt = startedAt;
        this.startedBy = startedBy;
        this.startedByName = startedByName;
        this.startedByRole = startedByRole;
        this.endedAt = endedAt;
        this.expiresAt = expiresAt;
        this.lastModifiedAt = lastModifiedAt;
        this.canceledAt = canceledAt;
        this.canceledBy = canceledBy;
        this.triggerInputs = triggerInputs;
        this.totalSteps = totalSteps;
        this.lastCompletedStep = lastCompletedStep;
        this.lastCompletedStepName = lastCompletedStepName;
        this.tags = tags;
        this.metadata = metadata;
    }
    
    public WorkflowInstance() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for the workflow instance
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Human-readable name for the workflow instance
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Current status of the workflow (e.g. In Progress, Completed, Canceled)
     */
    @JsonIgnore
    public Optional<String> workflowStatus() {
        return workflowStatus;
    }

    /**
     * Identifier linking this instance to a workflow template
     */
    @JsonIgnore
    public Optional<String> templateId() {
        return templateId;
    }

    /**
     * Account under which this workflow instance was initiated
     */
    @JsonIgnore
    public Optional<String> accountId() {
        return accountId;
    }

    /**
     * Date and time when the workflow was started
     */
    @JsonIgnore
    public Optional<OffsetDateTime> startedAt() {
        return startedAt;
    }

    /**
     * User or system identifier that started this workflow
     */
    @JsonIgnore
    public Optional<String> startedBy() {
        return startedBy;
    }

    /**
     * Display name of the user who started this workflow
     */
    @JsonIgnore
    public Optional<String> startedByName() {
        return startedByName;
    }

    /**
     * Role of the user who started this workflow (e.g. Preparer)
     */
    @JsonIgnore
    public Optional<String> startedByRole() {
        return startedByRole;
    }

    /**
     * Date and time when the workflow completed
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> endedAt() {
        return endedAt;
    }

    /**
     * Date and time after which the workflow expires
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> expiresAt() {
        return expiresAt;
    }

    /**
     * Date and time when the workflow instance was last modified
     */
    @JsonIgnore
    public Optional<OffsetDateTime> lastModifiedAt() {
        return lastModifiedAt;
    }

    /**
     * Date and time when the workflow was canceled (if applicable)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> canceledAt() {
        return canceledAt;
    }

    /**
     * User or system identifier that canceled this workflow (if applicable)
     */
    @JsonIgnore
    public JsonNullable<String> canceledBy() {
        return canceledBy;
    }

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, TriggerInputs>> triggerInputs() {
        return (Optional<Map<String, TriggerInputs>>) triggerInputs;
    }

    /**
     * Total number of steps configured in the workflow
     */
    @JsonIgnore
    public Optional<Long> totalSteps() {
        return totalSteps;
    }

    /**
     * The index of the most recently completed step
     */
    @JsonIgnore
    public Optional<Long> lastCompletedStep() {
        return lastCompletedStep;
    }

    /**
     * The name of the most recently completed step
     */
    @JsonIgnore
    public JsonNullable<String> lastCompletedStepName() {
        return lastCompletedStepName;
    }

    /**
     * Custom tags for organization or filtering
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    /**
     * Additional metadata related to this workflow instance
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Metadata> metadata() {
        return (Optional<Metadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique identifier for the workflow instance
     */
    public WorkflowInstance withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier for the workflow instance
     */
    public WorkflowInstance withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Human-readable name for the workflow instance
     */
    public WorkflowInstance withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Human-readable name for the workflow instance
     */
    public WorkflowInstance withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Current status of the workflow (e.g. In Progress, Completed, Canceled)
     */
    public WorkflowInstance withWorkflowStatus(String workflowStatus) {
        Utils.checkNotNull(workflowStatus, "workflowStatus");
        this.workflowStatus = Optional.ofNullable(workflowStatus);
        return this;
    }

    /**
     * Current status of the workflow (e.g. In Progress, Completed, Canceled)
     */
    public WorkflowInstance withWorkflowStatus(Optional<String> workflowStatus) {
        Utils.checkNotNull(workflowStatus, "workflowStatus");
        this.workflowStatus = workflowStatus;
        return this;
    }

    /**
     * Identifier linking this instance to a workflow template
     */
    public WorkflowInstance withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = Optional.ofNullable(templateId);
        return this;
    }

    /**
     * Identifier linking this instance to a workflow template
     */
    public WorkflowInstance withTemplateId(Optional<String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    /**
     * Account under which this workflow instance was initiated
     */
    public WorkflowInstance withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = Optional.ofNullable(accountId);
        return this;
    }

    /**
     * Account under which this workflow instance was initiated
     */
    public WorkflowInstance withAccountId(Optional<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Date and time when the workflow was started
     */
    public WorkflowInstance withStartedAt(OffsetDateTime startedAt) {
        Utils.checkNotNull(startedAt, "startedAt");
        this.startedAt = Optional.ofNullable(startedAt);
        return this;
    }

    /**
     * Date and time when the workflow was started
     */
    public WorkflowInstance withStartedAt(Optional<OffsetDateTime> startedAt) {
        Utils.checkNotNull(startedAt, "startedAt");
        this.startedAt = startedAt;
        return this;
    }

    /**
     * User or system identifier that started this workflow
     */
    public WorkflowInstance withStartedBy(String startedBy) {
        Utils.checkNotNull(startedBy, "startedBy");
        this.startedBy = Optional.ofNullable(startedBy);
        return this;
    }

    /**
     * User or system identifier that started this workflow
     */
    public WorkflowInstance withStartedBy(Optional<String> startedBy) {
        Utils.checkNotNull(startedBy, "startedBy");
        this.startedBy = startedBy;
        return this;
    }

    /**
     * Display name of the user who started this workflow
     */
    public WorkflowInstance withStartedByName(String startedByName) {
        Utils.checkNotNull(startedByName, "startedByName");
        this.startedByName = Optional.ofNullable(startedByName);
        return this;
    }

    /**
     * Display name of the user who started this workflow
     */
    public WorkflowInstance withStartedByName(Optional<String> startedByName) {
        Utils.checkNotNull(startedByName, "startedByName");
        this.startedByName = startedByName;
        return this;
    }

    /**
     * Role of the user who started this workflow (e.g. Preparer)
     */
    public WorkflowInstance withStartedByRole(String startedByRole) {
        Utils.checkNotNull(startedByRole, "startedByRole");
        this.startedByRole = Optional.ofNullable(startedByRole);
        return this;
    }

    /**
     * Role of the user who started this workflow (e.g. Preparer)
     */
    public WorkflowInstance withStartedByRole(Optional<String> startedByRole) {
        Utils.checkNotNull(startedByRole, "startedByRole");
        this.startedByRole = startedByRole;
        return this;
    }

    /**
     * Date and time when the workflow completed
     */
    public WorkflowInstance withEndedAt(OffsetDateTime endedAt) {
        Utils.checkNotNull(endedAt, "endedAt");
        this.endedAt = JsonNullable.of(endedAt);
        return this;
    }

    /**
     * Date and time when the workflow completed
     */
    public WorkflowInstance withEndedAt(JsonNullable<OffsetDateTime> endedAt) {
        Utils.checkNotNull(endedAt, "endedAt");
        this.endedAt = endedAt;
        return this;
    }

    /**
     * Date and time after which the workflow expires
     */
    public WorkflowInstance withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = JsonNullable.of(expiresAt);
        return this;
    }

    /**
     * Date and time after which the workflow expires
     */
    public WorkflowInstance withExpiresAt(JsonNullable<OffsetDateTime> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * Date and time when the workflow instance was last modified
     */
    public WorkflowInstance withLastModifiedAt(OffsetDateTime lastModifiedAt) {
        Utils.checkNotNull(lastModifiedAt, "lastModifiedAt");
        this.lastModifiedAt = Optional.ofNullable(lastModifiedAt);
        return this;
    }

    /**
     * Date and time when the workflow instance was last modified
     */
    public WorkflowInstance withLastModifiedAt(Optional<OffsetDateTime> lastModifiedAt) {
        Utils.checkNotNull(lastModifiedAt, "lastModifiedAt");
        this.lastModifiedAt = lastModifiedAt;
        return this;
    }

    /**
     * Date and time when the workflow was canceled (if applicable)
     */
    public WorkflowInstance withCanceledAt(OffsetDateTime canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = JsonNullable.of(canceledAt);
        return this;
    }

    /**
     * Date and time when the workflow was canceled (if applicable)
     */
    public WorkflowInstance withCanceledAt(JsonNullable<OffsetDateTime> canceledAt) {
        Utils.checkNotNull(canceledAt, "canceledAt");
        this.canceledAt = canceledAt;
        return this;
    }

    /**
     * User or system identifier that canceled this workflow (if applicable)
     */
    public WorkflowInstance withCanceledBy(String canceledBy) {
        Utils.checkNotNull(canceledBy, "canceledBy");
        this.canceledBy = JsonNullable.of(canceledBy);
        return this;
    }

    /**
     * User or system identifier that canceled this workflow (if applicable)
     */
    public WorkflowInstance withCanceledBy(JsonNullable<String> canceledBy) {
        Utils.checkNotNull(canceledBy, "canceledBy");
        this.canceledBy = canceledBy;
        return this;
    }

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    public WorkflowInstance withTriggerInputs(Map<String, TriggerInputs> triggerInputs) {
        Utils.checkNotNull(triggerInputs, "triggerInputs");
        this.triggerInputs = Optional.ofNullable(triggerInputs);
        return this;
    }

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    public WorkflowInstance withTriggerInputs(Optional<? extends Map<String, TriggerInputs>> triggerInputs) {
        Utils.checkNotNull(triggerInputs, "triggerInputs");
        this.triggerInputs = triggerInputs;
        return this;
    }

    /**
     * Total number of steps configured in the workflow
     */
    public WorkflowInstance withTotalSteps(long totalSteps) {
        Utils.checkNotNull(totalSteps, "totalSteps");
        this.totalSteps = Optional.ofNullable(totalSteps);
        return this;
    }

    /**
     * Total number of steps configured in the workflow
     */
    public WorkflowInstance withTotalSteps(Optional<Long> totalSteps) {
        Utils.checkNotNull(totalSteps, "totalSteps");
        this.totalSteps = totalSteps;
        return this;
    }

    /**
     * The index of the most recently completed step
     */
    public WorkflowInstance withLastCompletedStep(long lastCompletedStep) {
        Utils.checkNotNull(lastCompletedStep, "lastCompletedStep");
        this.lastCompletedStep = Optional.ofNullable(lastCompletedStep);
        return this;
    }

    /**
     * The index of the most recently completed step
     */
    public WorkflowInstance withLastCompletedStep(Optional<Long> lastCompletedStep) {
        Utils.checkNotNull(lastCompletedStep, "lastCompletedStep");
        this.lastCompletedStep = lastCompletedStep;
        return this;
    }

    /**
     * The name of the most recently completed step
     */
    public WorkflowInstance withLastCompletedStepName(String lastCompletedStepName) {
        Utils.checkNotNull(lastCompletedStepName, "lastCompletedStepName");
        this.lastCompletedStepName = JsonNullable.of(lastCompletedStepName);
        return this;
    }

    /**
     * The name of the most recently completed step
     */
    public WorkflowInstance withLastCompletedStepName(JsonNullable<String> lastCompletedStepName) {
        Utils.checkNotNull(lastCompletedStepName, "lastCompletedStepName");
        this.lastCompletedStepName = lastCompletedStepName;
        return this;
    }

    /**
     * Custom tags for organization or filtering
     */
    public WorkflowInstance withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * Custom tags for organization or filtering
     */
    public WorkflowInstance withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    /**
     * Additional metadata related to this workflow instance
     */
    public WorkflowInstance withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Additional metadata related to this workflow instance
     */
    public WorkflowInstance withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowInstance other = (WorkflowInstance) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.workflowStatus, other.workflowStatus) &&
            Utils.enhancedDeepEquals(this.templateId, other.templateId) &&
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.startedAt, other.startedAt) &&
            Utils.enhancedDeepEquals(this.startedBy, other.startedBy) &&
            Utils.enhancedDeepEquals(this.startedByName, other.startedByName) &&
            Utils.enhancedDeepEquals(this.startedByRole, other.startedByRole) &&
            Utils.enhancedDeepEquals(this.endedAt, other.endedAt) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.lastModifiedAt, other.lastModifiedAt) &&
            Utils.enhancedDeepEquals(this.canceledAt, other.canceledAt) &&
            Utils.enhancedDeepEquals(this.canceledBy, other.canceledBy) &&
            Utils.enhancedDeepEquals(this.triggerInputs, other.triggerInputs) &&
            Utils.enhancedDeepEquals(this.totalSteps, other.totalSteps) &&
            Utils.enhancedDeepEquals(this.lastCompletedStep, other.lastCompletedStep) &&
            Utils.enhancedDeepEquals(this.lastCompletedStepName, other.lastCompletedStepName) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id,
            name,
            workflowStatus,
            templateId,
            accountId,
            startedAt,
            startedBy,
            startedByName,
            startedByRole,
            endedAt,
            expiresAt,
            lastModifiedAt,
            canceledAt,
            canceledBy,
            triggerInputs,
            totalSteps,
            lastCompletedStep,
            lastCompletedStepName,
            tags,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowInstance.class,
                "id", id,
                "name", name,
                "workflowStatus", workflowStatus,
                "templateId", templateId,
                "accountId", accountId,
                "startedAt", startedAt,
                "startedBy", startedBy,
                "startedByName", startedByName,
                "startedByRole", startedByRole,
                "endedAt", endedAt,
                "expiresAt", expiresAt,
                "lastModifiedAt", lastModifiedAt,
                "canceledAt", canceledAt,
                "canceledBy", canceledBy,
                "triggerInputs", triggerInputs,
                "totalSteps", totalSteps,
                "lastCompletedStep", lastCompletedStep,
                "lastCompletedStepName", lastCompletedStepName,
                "tags", tags,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> workflowStatus = Optional.empty();
 
        private Optional<String> templateId = Optional.empty();
 
        private Optional<String> accountId = Optional.empty();
 
        private Optional<OffsetDateTime> startedAt = Optional.empty();
 
        private Optional<String> startedBy = Optional.empty();
 
        private Optional<String> startedByName = Optional.empty();
 
        private Optional<String> startedByRole = Optional.empty();
 
        private JsonNullable<OffsetDateTime> endedAt = JsonNullable.undefined();
 
        private JsonNullable<OffsetDateTime> expiresAt = JsonNullable.undefined();
 
        private Optional<OffsetDateTime> lastModifiedAt = Optional.empty();
 
        private JsonNullable<OffsetDateTime> canceledAt = JsonNullable.undefined();
 
        private JsonNullable<String> canceledBy = JsonNullable.undefined();
 
        private Optional<? extends Map<String, TriggerInputs>> triggerInputs = Optional.empty();
 
        private Optional<Long> totalSteps = Optional.empty();
 
        private Optional<Long> lastCompletedStep = Optional.empty();
 
        private JsonNullable<String> lastCompletedStepName = JsonNullable.undefined();
 
        private Optional<? extends List<String>> tags = Optional.empty();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the workflow instance
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for the workflow instance
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Human-readable name for the workflow instance
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Human-readable name for the workflow instance
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Current status of the workflow (e.g. In Progress, Completed, Canceled)
         */
        public Builder workflowStatus(String workflowStatus) {
            Utils.checkNotNull(workflowStatus, "workflowStatus");
            this.workflowStatus = Optional.ofNullable(workflowStatus);
            return this;
        }

        /**
         * Current status of the workflow (e.g. In Progress, Completed, Canceled)
         */
        public Builder workflowStatus(Optional<String> workflowStatus) {
            Utils.checkNotNull(workflowStatus, "workflowStatus");
            this.workflowStatus = workflowStatus;
            return this;
        }

        /**
         * Identifier linking this instance to a workflow template
         */
        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = Optional.ofNullable(templateId);
            return this;
        }

        /**
         * Identifier linking this instance to a workflow template
         */
        public Builder templateId(Optional<String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }

        /**
         * Account under which this workflow instance was initiated
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        /**
         * Account under which this workflow instance was initiated
         */
        public Builder accountId(Optional<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * Date and time when the workflow was started
         */
        public Builder startedAt(OffsetDateTime startedAt) {
            Utils.checkNotNull(startedAt, "startedAt");
            this.startedAt = Optional.ofNullable(startedAt);
            return this;
        }

        /**
         * Date and time when the workflow was started
         */
        public Builder startedAt(Optional<OffsetDateTime> startedAt) {
            Utils.checkNotNull(startedAt, "startedAt");
            this.startedAt = startedAt;
            return this;
        }

        /**
         * User or system identifier that started this workflow
         */
        public Builder startedBy(String startedBy) {
            Utils.checkNotNull(startedBy, "startedBy");
            this.startedBy = Optional.ofNullable(startedBy);
            return this;
        }

        /**
         * User or system identifier that started this workflow
         */
        public Builder startedBy(Optional<String> startedBy) {
            Utils.checkNotNull(startedBy, "startedBy");
            this.startedBy = startedBy;
            return this;
        }

        /**
         * Display name of the user who started this workflow
         */
        public Builder startedByName(String startedByName) {
            Utils.checkNotNull(startedByName, "startedByName");
            this.startedByName = Optional.ofNullable(startedByName);
            return this;
        }

        /**
         * Display name of the user who started this workflow
         */
        public Builder startedByName(Optional<String> startedByName) {
            Utils.checkNotNull(startedByName, "startedByName");
            this.startedByName = startedByName;
            return this;
        }

        /**
         * Role of the user who started this workflow (e.g. Preparer)
         */
        public Builder startedByRole(String startedByRole) {
            Utils.checkNotNull(startedByRole, "startedByRole");
            this.startedByRole = Optional.ofNullable(startedByRole);
            return this;
        }

        /**
         * Role of the user who started this workflow (e.g. Preparer)
         */
        public Builder startedByRole(Optional<String> startedByRole) {
            Utils.checkNotNull(startedByRole, "startedByRole");
            this.startedByRole = startedByRole;
            return this;
        }

        /**
         * Date and time when the workflow completed
         */
        public Builder endedAt(OffsetDateTime endedAt) {
            Utils.checkNotNull(endedAt, "endedAt");
            this.endedAt = JsonNullable.of(endedAt);
            return this;
        }

        /**
         * Date and time when the workflow completed
         */
        public Builder endedAt(JsonNullable<OffsetDateTime> endedAt) {
            Utils.checkNotNull(endedAt, "endedAt");
            this.endedAt = endedAt;
            return this;
        }

        /**
         * Date and time after which the workflow expires
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = JsonNullable.of(expiresAt);
            return this;
        }

        /**
         * Date and time after which the workflow expires
         */
        public Builder expiresAt(JsonNullable<OffsetDateTime> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Date and time when the workflow instance was last modified
         */
        public Builder lastModifiedAt(OffsetDateTime lastModifiedAt) {
            Utils.checkNotNull(lastModifiedAt, "lastModifiedAt");
            this.lastModifiedAt = Optional.ofNullable(lastModifiedAt);
            return this;
        }

        /**
         * Date and time when the workflow instance was last modified
         */
        public Builder lastModifiedAt(Optional<OffsetDateTime> lastModifiedAt) {
            Utils.checkNotNull(lastModifiedAt, "lastModifiedAt");
            this.lastModifiedAt = lastModifiedAt;
            return this;
        }

        /**
         * Date and time when the workflow was canceled (if applicable)
         */
        public Builder canceledAt(OffsetDateTime canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = JsonNullable.of(canceledAt);
            return this;
        }

        /**
         * Date and time when the workflow was canceled (if applicable)
         */
        public Builder canceledAt(JsonNullable<OffsetDateTime> canceledAt) {
            Utils.checkNotNull(canceledAt, "canceledAt");
            this.canceledAt = canceledAt;
            return this;
        }

        /**
         * User or system identifier that canceled this workflow (if applicable)
         */
        public Builder canceledBy(String canceledBy) {
            Utils.checkNotNull(canceledBy, "canceledBy");
            this.canceledBy = JsonNullable.of(canceledBy);
            return this;
        }

        /**
         * User or system identifier that canceled this workflow (if applicable)
         */
        public Builder canceledBy(JsonNullable<String> canceledBy) {
            Utils.checkNotNull(canceledBy, "canceledBy");
            this.canceledBy = canceledBy;
            return this;
        }

        /**
         * Key-value pairs representing the input data required to trigger the workflow.
         * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
         * The values should match the specified `field_data_type` (e.g., string, number, boolean).
         * Example: {"name": "John Doe", "email": "johndoe@example.com"}
         */
        public Builder triggerInputs(Map<String, TriggerInputs> triggerInputs) {
            Utils.checkNotNull(triggerInputs, "triggerInputs");
            this.triggerInputs = Optional.ofNullable(triggerInputs);
            return this;
        }

        /**
         * Key-value pairs representing the input data required to trigger the workflow.
         * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
         * The values should match the specified `field_data_type` (e.g., string, number, boolean).
         * Example: {"name": "John Doe", "email": "johndoe@example.com"}
         */
        public Builder triggerInputs(Optional<? extends Map<String, TriggerInputs>> triggerInputs) {
            Utils.checkNotNull(triggerInputs, "triggerInputs");
            this.triggerInputs = triggerInputs;
            return this;
        }

        /**
         * Total number of steps configured in the workflow
         */
        public Builder totalSteps(long totalSteps) {
            Utils.checkNotNull(totalSteps, "totalSteps");
            this.totalSteps = Optional.ofNullable(totalSteps);
            return this;
        }

        /**
         * Total number of steps configured in the workflow
         */
        public Builder totalSteps(Optional<Long> totalSteps) {
            Utils.checkNotNull(totalSteps, "totalSteps");
            this.totalSteps = totalSteps;
            return this;
        }

        /**
         * The index of the most recently completed step
         */
        public Builder lastCompletedStep(long lastCompletedStep) {
            Utils.checkNotNull(lastCompletedStep, "lastCompletedStep");
            this.lastCompletedStep = Optional.ofNullable(lastCompletedStep);
            return this;
        }

        /**
         * The index of the most recently completed step
         */
        public Builder lastCompletedStep(Optional<Long> lastCompletedStep) {
            Utils.checkNotNull(lastCompletedStep, "lastCompletedStep");
            this.lastCompletedStep = lastCompletedStep;
            return this;
        }

        /**
         * The name of the most recently completed step
         */
        public Builder lastCompletedStepName(String lastCompletedStepName) {
            Utils.checkNotNull(lastCompletedStepName, "lastCompletedStepName");
            this.lastCompletedStepName = JsonNullable.of(lastCompletedStepName);
            return this;
        }

        /**
         * The name of the most recently completed step
         */
        public Builder lastCompletedStepName(JsonNullable<String> lastCompletedStepName) {
            Utils.checkNotNull(lastCompletedStepName, "lastCompletedStepName");
            this.lastCompletedStepName = lastCompletedStepName;
            return this;
        }

        /**
         * Custom tags for organization or filtering
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * Custom tags for organization or filtering
         */
        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        /**
         * Additional metadata related to this workflow instance
         */
        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Additional metadata related to this workflow instance
         */
        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public WorkflowInstance build() {
            return new WorkflowInstance(
                id,
                name,
                workflowStatus,
                templateId,
                accountId,
                startedAt,
                startedBy,
                startedByName,
                startedByRole,
                endedAt,
                expiresAt,
                lastModifiedAt,
                canceledAt,
                canceledBy,
                triggerInputs,
                totalSteps,
                lastCompletedStep,
                lastCompletedStepName,
                tags,
                metadata);
        }
    }
}
