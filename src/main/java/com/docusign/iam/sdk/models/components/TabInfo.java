/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public class TabInfo {

    /**
     * Unique ID of the installed extension app
     */
    @JsonProperty("appId")
    private String appId;

    /**
     * Tab data representing the tabs associated with installed apps in the account
     */
    @JsonProperty("tabs")
    private List<Tab> tabs;

    @JsonCreator
    public TabInfo(
            @JsonProperty("appId") String appId,
            @JsonProperty("tabs") List<Tab> tabs) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(tabs, "tabs");
        this.appId = appId;
        this.tabs = tabs;
    }

    /**
     * Unique ID of the installed extension app
     */
    @JsonIgnore
    public String appId() {
        return appId;
    }

    /**
     * Tab data representing the tabs associated with installed apps in the account
     */
    @JsonIgnore
    public List<Tab> tabs() {
        return tabs;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Unique ID of the installed extension app
     */
    public TabInfo withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    /**
     * Tab data representing the tabs associated with installed apps in the account
     */
    public TabInfo withTabs(List<Tab> tabs) {
        Utils.checkNotNull(tabs, "tabs");
        this.tabs = tabs;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TabInfo other = (TabInfo) o;
        return 
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.tabs, other.tabs);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            appId,
            tabs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TabInfo.class,
                "appId", appId,
                "tabs", tabs);
    }
    
    public final static class Builder {
 
        private String appId;
 
        private List<Tab> tabs;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique ID of the installed extension app
         */
        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        /**
         * Tab data representing the tabs associated with installed apps in the account
         */
        public Builder tabs(List<Tab> tabs) {
            Utils.checkNotNull(tabs, "tabs");
            this.tabs = tabs;
            return this;
        }
        
        public TabInfo build() {
            return new TabInfo(
                appId,
                tabs);
        }
    }
}
