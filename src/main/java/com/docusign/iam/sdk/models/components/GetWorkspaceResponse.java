/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * GetWorkspaceResponse
 * 
 * <p>The details of a single workspace
 */
public class GetWorkspaceResponse {
    /**
     * The ID of the workspace
     */
    @JsonProperty("workspace_id")
    private String workspaceId;

    /**
     * The name of the workspace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The date the workspace was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_date")
    private JsonNullable<OffsetDateTime> createdDate;

    /**
     * The ID of the user who created the workspace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by_user_id")
    private JsonNullable<String> createdByUserId;

    /**
     * The list of user IDs of the workspace owners
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace_owner_ids")
    private JsonNullable<? extends List<String>> workspaceOwnerIds;

    @JsonCreator
    public GetWorkspaceResponse(
            @JsonProperty("workspace_id") String workspaceId,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("created_date") JsonNullable<OffsetDateTime> createdDate,
            @JsonProperty("created_by_user_id") JsonNullable<String> createdByUserId,
            @JsonProperty("workspace_owner_ids") JsonNullable<? extends List<String>> workspaceOwnerIds) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(createdByUserId, "createdByUserId");
        Utils.checkNotNull(workspaceOwnerIds, "workspaceOwnerIds");
        this.workspaceId = workspaceId;
        this.name = name;
        this.createdDate = createdDate;
        this.createdByUserId = createdByUserId;
        this.workspaceOwnerIds = workspaceOwnerIds;
    }
    
    public GetWorkspaceResponse(
            String workspaceId) {
        this(workspaceId, JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    /**
     * The name of the workspace
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The date the workspace was created
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdDate() {
        return createdDate;
    }

    /**
     * The ID of the user who created the workspace
     */
    @JsonIgnore
    public JsonNullable<String> createdByUserId() {
        return createdByUserId;
    }

    /**
     * The list of user IDs of the workspace owners
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> workspaceOwnerIds() {
        return (JsonNullable<List<String>>) workspaceOwnerIds;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the workspace
     */
    public GetWorkspaceResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The name of the workspace
     */
    public GetWorkspaceResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the workspace
     */
    public GetWorkspaceResponse withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The date the workspace was created
     */
    public GetWorkspaceResponse withCreatedDate(OffsetDateTime createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = JsonNullable.of(createdDate);
        return this;
    }

    /**
     * The date the workspace was created
     */
    public GetWorkspaceResponse withCreatedDate(JsonNullable<OffsetDateTime> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    /**
     * The ID of the user who created the workspace
     */
    public GetWorkspaceResponse withCreatedByUserId(String createdByUserId) {
        Utils.checkNotNull(createdByUserId, "createdByUserId");
        this.createdByUserId = JsonNullable.of(createdByUserId);
        return this;
    }

    /**
     * The ID of the user who created the workspace
     */
    public GetWorkspaceResponse withCreatedByUserId(JsonNullable<String> createdByUserId) {
        Utils.checkNotNull(createdByUserId, "createdByUserId");
        this.createdByUserId = createdByUserId;
        return this;
    }

    /**
     * The list of user IDs of the workspace owners
     */
    public GetWorkspaceResponse withWorkspaceOwnerIds(List<String> workspaceOwnerIds) {
        Utils.checkNotNull(workspaceOwnerIds, "workspaceOwnerIds");
        this.workspaceOwnerIds = JsonNullable.of(workspaceOwnerIds);
        return this;
    }

    /**
     * The list of user IDs of the workspace owners
     */
    public GetWorkspaceResponse withWorkspaceOwnerIds(JsonNullable<? extends List<String>> workspaceOwnerIds) {
        Utils.checkNotNull(workspaceOwnerIds, "workspaceOwnerIds");
        this.workspaceOwnerIds = workspaceOwnerIds;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetWorkspaceResponse other = (GetWorkspaceResponse) o;
        return 
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.createdDate, other.createdDate) &&
            Utils.enhancedDeepEquals(this.createdByUserId, other.createdByUserId) &&
            Utils.enhancedDeepEquals(this.workspaceOwnerIds, other.workspaceOwnerIds);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            workspaceId, name, createdDate,
            createdByUserId, workspaceOwnerIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetWorkspaceResponse.class,
                "workspaceId", workspaceId,
                "name", name,
                "createdDate", createdDate,
                "createdByUserId", createdByUserId,
                "workspaceOwnerIds", workspaceOwnerIds);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String workspaceId;

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdDate = JsonNullable.undefined();

        private JsonNullable<String> createdByUserId = JsonNullable.undefined();

        private JsonNullable<? extends List<String>> workspaceOwnerIds = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * The name of the workspace
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the workspace
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * The date the workspace was created
         */
        public Builder createdDate(OffsetDateTime createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = JsonNullable.of(createdDate);
            return this;
        }

        /**
         * The date the workspace was created
         */
        public Builder createdDate(JsonNullable<OffsetDateTime> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }


        /**
         * The ID of the user who created the workspace
         */
        public Builder createdByUserId(String createdByUserId) {
            Utils.checkNotNull(createdByUserId, "createdByUserId");
            this.createdByUserId = JsonNullable.of(createdByUserId);
            return this;
        }

        /**
         * The ID of the user who created the workspace
         */
        public Builder createdByUserId(JsonNullable<String> createdByUserId) {
            Utils.checkNotNull(createdByUserId, "createdByUserId");
            this.createdByUserId = createdByUserId;
            return this;
        }


        /**
         * The list of user IDs of the workspace owners
         */
        public Builder workspaceOwnerIds(List<String> workspaceOwnerIds) {
            Utils.checkNotNull(workspaceOwnerIds, "workspaceOwnerIds");
            this.workspaceOwnerIds = JsonNullable.of(workspaceOwnerIds);
            return this;
        }

        /**
         * The list of user IDs of the workspace owners
         */
        public Builder workspaceOwnerIds(JsonNullable<? extends List<String>> workspaceOwnerIds) {
            Utils.checkNotNull(workspaceOwnerIds, "workspaceOwnerIds");
            this.workspaceOwnerIds = workspaceOwnerIds;
            return this;
        }

        public GetWorkspaceResponse build() {

            return new GetWorkspaceResponse(
                workspaceId, name, createdDate,
                createdByUserId, workspaceOwnerIds);
        }

    }
}
