/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * PublicAuthCodeGrantRequestBody
 * 
 * <p>This grant uses Proof Key for Code Exchange (PKCE) to authenticate securely without requiring a client secret.
 */
public class PublicAuthCodeGrantRequestBody {
    /**
     * The grant type. This value must be set to "authorization_code".
     */
    @SpeakeasyMetadata("form:name=grant_type")
    private Optional<? extends PublicAuthCodeGrantRequestBodyGrantType> grantType;

    /**
     * The client ID of the application.
     */
    @SpeakeasyMetadata("form:name=client_id")
    private String clientId;

    /**
     * The authorization code supplied to the callback.
     */
    @SpeakeasyMetadata("form:name=code")
    private String code;

    /**
     * The code verifier used to authenticate the request. This value is generated by the client and must be included in the request.
     */
    @SpeakeasyMetadata("form:name=code_verifier")
    private String codeVerifier;

    @JsonCreator
    public PublicAuthCodeGrantRequestBody(
            Optional<? extends PublicAuthCodeGrantRequestBodyGrantType> grantType,
            String clientId,
            String code,
            String codeVerifier) {
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(codeVerifier, "codeVerifier");
        this.grantType = grantType;
        this.clientId = clientId;
        this.code = code;
        this.codeVerifier = codeVerifier;
    }
    
    public PublicAuthCodeGrantRequestBody(
            String clientId,
            String code,
            String codeVerifier) {
        this(Optional.empty(), clientId, code,
            codeVerifier);
    }

    /**
     * The grant type. This value must be set to "authorization_code".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PublicAuthCodeGrantRequestBodyGrantType> grantType() {
        return (Optional<PublicAuthCodeGrantRequestBodyGrantType>) grantType;
    }

    /**
     * The client ID of the application.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * The authorization code supplied to the callback.
     */
    @JsonIgnore
    public String code() {
        return code;
    }

    /**
     * The code verifier used to authenticate the request. This value is generated by the client and must be included in the request.
     */
    @JsonIgnore
    public String codeVerifier() {
        return codeVerifier;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The grant type. This value must be set to "authorization_code".
     */
    public PublicAuthCodeGrantRequestBody withGrantType(PublicAuthCodeGrantRequestBodyGrantType grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = Optional.ofNullable(grantType);
        return this;
    }


    /**
     * The grant type. This value must be set to "authorization_code".
     */
    public PublicAuthCodeGrantRequestBody withGrantType(Optional<? extends PublicAuthCodeGrantRequestBodyGrantType> grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    /**
     * The client ID of the application.
     */
    public PublicAuthCodeGrantRequestBody withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * The authorization code supplied to the callback.
     */
    public PublicAuthCodeGrantRequestBody withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The code verifier used to authenticate the request. This value is generated by the client and must be included in the request.
     */
    public PublicAuthCodeGrantRequestBody withCodeVerifier(String codeVerifier) {
        Utils.checkNotNull(codeVerifier, "codeVerifier");
        this.codeVerifier = codeVerifier;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PublicAuthCodeGrantRequestBody other = (PublicAuthCodeGrantRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.codeVerifier, other.codeVerifier);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            grantType, clientId, code,
            codeVerifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PublicAuthCodeGrantRequestBody.class,
                "grantType", grantType,
                "clientId", clientId,
                "code", code,
                "codeVerifier", codeVerifier);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends PublicAuthCodeGrantRequestBodyGrantType> grantType;

        private String clientId;

        private String code;

        private String codeVerifier;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The grant type. This value must be set to "authorization_code".
         */
        public Builder grantType(PublicAuthCodeGrantRequestBodyGrantType grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = Optional.ofNullable(grantType);
            return this;
        }

        /**
         * The grant type. This value must be set to "authorization_code".
         */
        public Builder grantType(Optional<? extends PublicAuthCodeGrantRequestBodyGrantType> grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }


        /**
         * The client ID of the application.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }


        /**
         * The authorization code supplied to the callback.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        /**
         * The code verifier used to authenticate the request. This value is generated by the client and must be included in the request.
         */
        public Builder codeVerifier(String codeVerifier) {
            Utils.checkNotNull(codeVerifier, "codeVerifier");
            this.codeVerifier = codeVerifier;
            return this;
        }

        public PublicAuthCodeGrantRequestBody build() {
            if (grantType == null) {
                grantType = _SINGLETON_VALUE_GrantType.value();
            }

            return new PublicAuthCodeGrantRequestBody(
                grantType, clientId, code,
                codeVerifier);
        }


        private static final LazySingletonValue<Optional<? extends PublicAuthCodeGrantRequestBodyGrantType>> _SINGLETON_VALUE_GrantType =
                new LazySingletonValue<>(
                        "grant_type",
                        "\"authorization_code\"",
                        new TypeReference<Optional<? extends PublicAuthCodeGrantRequestBodyGrantType>>() {});
    }
}
