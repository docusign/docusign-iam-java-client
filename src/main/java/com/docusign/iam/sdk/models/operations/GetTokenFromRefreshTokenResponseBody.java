/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;

/**
 * GetTokenFromRefreshTokenResponseBody
 * 
 * <p>Successful response.
 */
public class GetTokenFromRefreshTokenResponseBody {
    /**
     * The value of the access token. This value will be added to the Authorization header of all Docusign
     * API calls.
     */
    @JsonProperty("access_token")
    private String accessToken;

    /**
     * The type of token. For access tokens, the value of this will be Bearer.
     */
    @JsonProperty("token_type")
    private String tokenType;

    /**
     * The refresh token.
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    /**
     * The number of seconds until the access token expires.
     */
    @JsonProperty("expires_in")
    private long expiresIn;

    @JsonCreator
    public GetTokenFromRefreshTokenResponseBody(
            @JsonProperty("access_token") String accessToken,
            @JsonProperty("token_type") String tokenType,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("expires_in") long expiresIn) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(tokenType, "tokenType");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.accessToken = accessToken;
        this.tokenType = tokenType;
        this.refreshToken = refreshToken;
        this.expiresIn = expiresIn;
    }

    /**
     * The value of the access token. This value will be added to the Authorization header of all Docusign
     * API calls.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * The type of token. For access tokens, the value of this will be Bearer.
     */
    @JsonIgnore
    public String tokenType() {
        return tokenType;
    }

    /**
     * The refresh token.
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    /**
     * The number of seconds until the access token expires.
     */
    @JsonIgnore
    public long expiresIn() {
        return expiresIn;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The value of the access token. This value will be added to the Authorization header of all Docusign
     * API calls.
     */
    public GetTokenFromRefreshTokenResponseBody withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The type of token. For access tokens, the value of this will be Bearer.
     */
    public GetTokenFromRefreshTokenResponseBody withTokenType(String tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = tokenType;
        return this;
    }

    /**
     * The refresh token.
     */
    public GetTokenFromRefreshTokenResponseBody withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * The number of seconds until the access token expires.
     */
    public GetTokenFromRefreshTokenResponseBody withExpiresIn(long expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTokenFromRefreshTokenResponseBody other = (GetTokenFromRefreshTokenResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.tokenType, other.tokenType) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.expiresIn, other.expiresIn);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessToken, tokenType, refreshToken,
            expiresIn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTokenFromRefreshTokenResponseBody.class,
                "accessToken", accessToken,
                "tokenType", tokenType,
                "refreshToken", refreshToken,
                "expiresIn", expiresIn);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessToken;

        private String tokenType;

        private String refreshToken;

        private Long expiresIn;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The value of the access token. This value will be added to the Authorization header of all Docusign
         * API calls.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }


        /**
         * The type of token. For access tokens, the value of this will be Bearer.
         */
        public Builder tokenType(String tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = tokenType;
            return this;
        }


        /**
         * The refresh token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }


        /**
         * The number of seconds until the access token expires.
         */
        public Builder expiresIn(long expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }

        public GetTokenFromRefreshTokenResponseBody build() {

            return new GetTokenFromRefreshTokenResponseBody(
                accessToken, tokenType, refreshToken,
                expiresIn);
        }

    }
}
