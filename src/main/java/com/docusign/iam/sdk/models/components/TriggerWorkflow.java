/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Map;

/**
 * TriggerWorkflow
 * 
 * <p>The input information needed to trigger a new instance of a Maestro workflow.
 * This request body contains the metadata to describe the instance being created,
 * along with the input data required to trigger the workflow.
 * 
 * <p>- `instance_name` provides a user-defined name for the workflow instance.
 * - `trigger_inputs` contains the key-value pairs corresponding to the inputs required by the workflow, as described in the `trigger_input_schema` from the workflow definition.
 */
public class TriggerWorkflow {
    /**
     * A descriptive name for the specific instance of the workflow being triggered.
     * This is typically used for identification and tracking purposes.
     * Example: "User Registration Workflow Instance"
     */
    @JsonProperty("instance_name")
    private String instanceName;

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    @JsonProperty("trigger_inputs")
    private Map<String, TriggerInputs> triggerInputs;

    @JsonCreator
    public TriggerWorkflow(
            @JsonProperty("instance_name") String instanceName,
            @JsonProperty("trigger_inputs") Map<String, TriggerInputs> triggerInputs) {
        Utils.checkNotNull(instanceName, "instanceName");
        triggerInputs = Utils.emptyMapIfNull(triggerInputs);
        Utils.checkNotNull(triggerInputs, "triggerInputs");
        this.instanceName = instanceName;
        this.triggerInputs = triggerInputs;
    }

    /**
     * A descriptive name for the specific instance of the workflow being triggered.
     * This is typically used for identification and tracking purposes.
     * Example: "User Registration Workflow Instance"
     */
    @JsonIgnore
    public String instanceName() {
        return instanceName;
    }

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    @JsonIgnore
    public Map<String, TriggerInputs> triggerInputs() {
        return triggerInputs;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A descriptive name for the specific instance of the workflow being triggered.
     * This is typically used for identification and tracking purposes.
     * Example: "User Registration Workflow Instance"
     */
    public TriggerWorkflow withInstanceName(String instanceName) {
        Utils.checkNotNull(instanceName, "instanceName");
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Key-value pairs representing the input data required to trigger the workflow.
     * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
     * The values should match the specified `field_data_type` (e.g., string, number, boolean).
     * Example: {"name": "John Doe", "email": "johndoe@example.com"}
     */
    public TriggerWorkflow withTriggerInputs(Map<String, TriggerInputs> triggerInputs) {
        Utils.checkNotNull(triggerInputs, "triggerInputs");
        this.triggerInputs = triggerInputs;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TriggerWorkflow other = (TriggerWorkflow) o;
        return 
            Utils.enhancedDeepEquals(this.instanceName, other.instanceName) &&
            Utils.enhancedDeepEquals(this.triggerInputs, other.triggerInputs);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            instanceName, triggerInputs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TriggerWorkflow.class,
                "instanceName", instanceName,
                "triggerInputs", triggerInputs);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String instanceName;

        private Map<String, TriggerInputs> triggerInputs;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A descriptive name for the specific instance of the workflow being triggered.
         * This is typically used for identification and tracking purposes.
         * Example: "User Registration Workflow Instance"
         */
        public Builder instanceName(String instanceName) {
            Utils.checkNotNull(instanceName, "instanceName");
            this.instanceName = instanceName;
            return this;
        }


        /**
         * Key-value pairs representing the input data required to trigger the workflow.
         * The keys correspond to the `field_name` values defined in the `trigger_input_schema` of the workflow definition.
         * The values should match the specified `field_data_type` (e.g., string, number, boolean).
         * Example: {"name": "John Doe", "email": "johndoe@example.com"}
         */
        public Builder triggerInputs(Map<String, TriggerInputs> triggerInputs) {
            Utils.checkNotNull(triggerInputs, "triggerInputs");
            this.triggerInputs = triggerInputs;
            return this;
        }

        public TriggerWorkflow build() {

            return new TriggerWorkflow(
                instanceName, triggerInputs);
        }

    }
}
