/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import org.openapitools.jackson.nullable.JsonNullable;


public class WorkspaceUserForCreate {
    /**
     * The email address of the added user. May be an internal user to the account or an external user
     */
    @JsonProperty("email")
    private String email;

    /**
     * The first name of the added user
     */
    @JsonProperty("first_name")
    private String firstName;

    /**
     * The last name of the added user
     */
    @JsonProperty("last_name")
    private String lastName;

    /**
     * The optional Role ID to assign to the user. Defaults to the "Participate" role
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_id")
    private JsonNullable<String> roleId;

    @JsonCreator
    public WorkspaceUserForCreate(
            @JsonProperty("email") String email,
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("role_id") JsonNullable<String> roleId) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(roleId, "roleId");
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.roleId = roleId;
    }
    
    public WorkspaceUserForCreate(
            String email,
            String firstName,
            String lastName) {
        this(email, firstName, lastName,
            JsonNullable.undefined());
    }

    /**
     * The email address of the added user. May be an internal user to the account or an external user
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The first name of the added user
     */
    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    /**
     * The last name of the added user
     */
    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * The optional Role ID to assign to the user. Defaults to the "Participate" role
     */
    @JsonIgnore
    public JsonNullable<String> roleId() {
        return roleId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The email address of the added user. May be an internal user to the account or an external user
     */
    public WorkspaceUserForCreate withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The first name of the added user
     */
    public WorkspaceUserForCreate withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the added user
     */
    public WorkspaceUserForCreate withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The optional Role ID to assign to the user. Defaults to the "Participate" role
     */
    public WorkspaceUserForCreate withRoleId(String roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = JsonNullable.of(roleId);
        return this;
    }

    /**
     * The optional Role ID to assign to the user. Defaults to the "Participate" role
     */
    public WorkspaceUserForCreate withRoleId(JsonNullable<String> roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceUserForCreate other = (WorkspaceUserForCreate) o;
        return 
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.roleId, other.roleId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            email, firstName, lastName,
            roleId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceUserForCreate.class,
                "email", email,
                "firstName", firstName,
                "lastName", lastName,
                "roleId", roleId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String email;

        private String firstName;

        private String lastName;

        private JsonNullable<String> roleId = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The email address of the added user. May be an internal user to the account or an external user
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * The first name of the added user
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The last name of the added user
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        /**
         * The optional Role ID to assign to the user. Defaults to the "Participate" role
         */
        public Builder roleId(String roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = JsonNullable.of(roleId);
            return this;
        }

        /**
         * The optional Role ID to assign to the user. Defaults to the "Participate" role
         */
        public Builder roleId(JsonNullable<String> roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = roleId;
            return this;
        }

        public WorkspaceUserForCreate build() {

            return new WorkspaceUserForCreate(
                email, firstName, lastName,
                roleId);
        }

    }
}
