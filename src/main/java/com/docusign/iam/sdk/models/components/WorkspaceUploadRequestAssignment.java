/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class WorkspaceUploadRequestAssignment {
    /**
     * The ID of the assigned user
     */
    @JsonProperty("assignee_user_id")
    private String assigneeUserId;

    /**
     * Enum representing the responsibility type for a workspace upload request assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upload_request_responsibility_type_id")
    private Optional<? extends WorkspaceUploadRequestResponsibilityType> uploadRequestResponsibilityTypeId;

    @JsonCreator
    public WorkspaceUploadRequestAssignment(
            @JsonProperty("assignee_user_id") String assigneeUserId,
            @JsonProperty("upload_request_responsibility_type_id") Optional<? extends WorkspaceUploadRequestResponsibilityType> uploadRequestResponsibilityTypeId) {
        Utils.checkNotNull(assigneeUserId, "assigneeUserId");
        Utils.checkNotNull(uploadRequestResponsibilityTypeId, "uploadRequestResponsibilityTypeId");
        this.assigneeUserId = assigneeUserId;
        this.uploadRequestResponsibilityTypeId = uploadRequestResponsibilityTypeId;
    }
    
    public WorkspaceUploadRequestAssignment(
            String assigneeUserId) {
        this(assigneeUserId, Optional.empty());
    }

    /**
     * The ID of the assigned user
     */
    @JsonIgnore
    public String assigneeUserId() {
        return assigneeUserId;
    }

    /**
     * Enum representing the responsibility type for a workspace upload request assignment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WorkspaceUploadRequestResponsibilityType> uploadRequestResponsibilityTypeId() {
        return (Optional<WorkspaceUploadRequestResponsibilityType>) uploadRequestResponsibilityTypeId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the assigned user
     */
    public WorkspaceUploadRequestAssignment withAssigneeUserId(String assigneeUserId) {
        Utils.checkNotNull(assigneeUserId, "assigneeUserId");
        this.assigneeUserId = assigneeUserId;
        return this;
    }

    /**
     * Enum representing the responsibility type for a workspace upload request assignment
     */
    public WorkspaceUploadRequestAssignment withUploadRequestResponsibilityTypeId(WorkspaceUploadRequestResponsibilityType uploadRequestResponsibilityTypeId) {
        Utils.checkNotNull(uploadRequestResponsibilityTypeId, "uploadRequestResponsibilityTypeId");
        this.uploadRequestResponsibilityTypeId = Optional.ofNullable(uploadRequestResponsibilityTypeId);
        return this;
    }


    /**
     * Enum representing the responsibility type for a workspace upload request assignment
     */
    public WorkspaceUploadRequestAssignment withUploadRequestResponsibilityTypeId(Optional<? extends WorkspaceUploadRequestResponsibilityType> uploadRequestResponsibilityTypeId) {
        Utils.checkNotNull(uploadRequestResponsibilityTypeId, "uploadRequestResponsibilityTypeId");
        this.uploadRequestResponsibilityTypeId = uploadRequestResponsibilityTypeId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceUploadRequestAssignment other = (WorkspaceUploadRequestAssignment) o;
        return 
            Utils.enhancedDeepEquals(this.assigneeUserId, other.assigneeUserId) &&
            Utils.enhancedDeepEquals(this.uploadRequestResponsibilityTypeId, other.uploadRequestResponsibilityTypeId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            assigneeUserId, uploadRequestResponsibilityTypeId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceUploadRequestAssignment.class,
                "assigneeUserId", assigneeUserId,
                "uploadRequestResponsibilityTypeId", uploadRequestResponsibilityTypeId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String assigneeUserId;

        private Optional<? extends WorkspaceUploadRequestResponsibilityType> uploadRequestResponsibilityTypeId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the assigned user
         */
        public Builder assigneeUserId(String assigneeUserId) {
            Utils.checkNotNull(assigneeUserId, "assigneeUserId");
            this.assigneeUserId = assigneeUserId;
            return this;
        }


        /**
         * Enum representing the responsibility type for a workspace upload request assignment
         */
        public Builder uploadRequestResponsibilityTypeId(WorkspaceUploadRequestResponsibilityType uploadRequestResponsibilityTypeId) {
            Utils.checkNotNull(uploadRequestResponsibilityTypeId, "uploadRequestResponsibilityTypeId");
            this.uploadRequestResponsibilityTypeId = Optional.ofNullable(uploadRequestResponsibilityTypeId);
            return this;
        }

        /**
         * Enum representing the responsibility type for a workspace upload request assignment
         */
        public Builder uploadRequestResponsibilityTypeId(Optional<? extends WorkspaceUploadRequestResponsibilityType> uploadRequestResponsibilityTypeId) {
            Utils.checkNotNull(uploadRequestResponsibilityTypeId, "uploadRequestResponsibilityTypeId");
            this.uploadRequestResponsibilityTypeId = uploadRequestResponsibilityTypeId;
            return this;
        }

        public WorkspaceUploadRequestAssignment build() {

            return new WorkspaceUploadRequestAssignment(
                assigneeUserId, uploadRequestResponsibilityTypeId);
        }

    }
}
