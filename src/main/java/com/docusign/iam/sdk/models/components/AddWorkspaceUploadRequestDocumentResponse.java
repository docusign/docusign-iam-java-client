/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;

/**
 * AddWorkspaceUploadRequestDocumentResponse
 * 
 * <p>Response for adding a document to an upload request
 */
public class AddWorkspaceUploadRequestDocumentResponse {
    /**
     * The ID of the upload request
     */
    @JsonProperty("upload_request_id")
    private String uploadRequestId;

    /**
     * The ID of the document that was added
     */
    @JsonProperty("document_id")
    private String documentId;

    /**
     * The name of the document
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("document_name")
    private Optional<String> documentName;

    @JsonCreator
    public AddWorkspaceUploadRequestDocumentResponse(
            @JsonProperty("upload_request_id") String uploadRequestId,
            @JsonProperty("document_id") String documentId,
            @JsonProperty("document_name") Optional<String> documentName) {
        Utils.checkNotNull(uploadRequestId, "uploadRequestId");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(documentName, "documentName");
        this.uploadRequestId = uploadRequestId;
        this.documentId = documentId;
        this.documentName = documentName;
    }
    
    public AddWorkspaceUploadRequestDocumentResponse(
            String uploadRequestId,
            String documentId) {
        this(uploadRequestId, documentId, Optional.empty());
    }

    /**
     * The ID of the upload request
     */
    @JsonIgnore
    public String uploadRequestId() {
        return uploadRequestId;
    }

    /**
     * The ID of the document that was added
     */
    @JsonIgnore
    public String documentId() {
        return documentId;
    }

    /**
     * The name of the document
     */
    @JsonIgnore
    public Optional<String> documentName() {
        return documentName;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the upload request
     */
    public AddWorkspaceUploadRequestDocumentResponse withUploadRequestId(String uploadRequestId) {
        Utils.checkNotNull(uploadRequestId, "uploadRequestId");
        this.uploadRequestId = uploadRequestId;
        return this;
    }

    /**
     * The ID of the document that was added
     */
    public AddWorkspaceUploadRequestDocumentResponse withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * The name of the document
     */
    public AddWorkspaceUploadRequestDocumentResponse withDocumentName(String documentName) {
        Utils.checkNotNull(documentName, "documentName");
        this.documentName = Optional.ofNullable(documentName);
        return this;
    }


    /**
     * The name of the document
     */
    public AddWorkspaceUploadRequestDocumentResponse withDocumentName(Optional<String> documentName) {
        Utils.checkNotNull(documentName, "documentName");
        this.documentName = documentName;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddWorkspaceUploadRequestDocumentResponse other = (AddWorkspaceUploadRequestDocumentResponse) o;
        return 
            Utils.enhancedDeepEquals(this.uploadRequestId, other.uploadRequestId) &&
            Utils.enhancedDeepEquals(this.documentId, other.documentId) &&
            Utils.enhancedDeepEquals(this.documentName, other.documentName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            uploadRequestId, documentId, documentName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddWorkspaceUploadRequestDocumentResponse.class,
                "uploadRequestId", uploadRequestId,
                "documentId", documentId,
                "documentName", documentName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String uploadRequestId;

        private String documentId;

        private Optional<String> documentName = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the upload request
         */
        public Builder uploadRequestId(String uploadRequestId) {
            Utils.checkNotNull(uploadRequestId, "uploadRequestId");
            this.uploadRequestId = uploadRequestId;
            return this;
        }


        /**
         * The ID of the document that was added
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }


        /**
         * The name of the document
         */
        public Builder documentName(String documentName) {
            Utils.checkNotNull(documentName, "documentName");
            this.documentName = Optional.ofNullable(documentName);
            return this;
        }

        /**
         * The name of the document
         */
        public Builder documentName(Optional<String> documentName) {
            Utils.checkNotNull(documentName, "documentName");
            this.documentName = documentName;
            return this;
        }

        public AddWorkspaceUploadRequestDocumentResponse build() {

            return new AddWorkspaceUploadRequestDocumentResponse(
                uploadRequestId, documentId, documentName);
        }

    }
}
