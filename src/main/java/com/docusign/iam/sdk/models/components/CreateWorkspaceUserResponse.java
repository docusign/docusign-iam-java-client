/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateWorkspaceUserResponse {
    /**
     * The ID of the workspace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace_id")
    private Optional<String> workspaceId;

    /**
     * The ID of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    /**
     * The ID of the role assigned to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_id")
    private Optional<String> roleId;

    /**
     * The email of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * The first name of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    @JsonCreator
    public CreateWorkspaceUserResponse(
            @JsonProperty("workspace_id") Optional<String> workspaceId,
            @JsonProperty("user_id") Optional<String> userId,
            @JsonProperty("role_id") Optional<String> roleId,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(roleId, "roleId");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        this.workspaceId = workspaceId;
        this.userId = userId;
        this.roleId = roleId;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
    }
    
    public CreateWorkspaceUserResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    /**
     * The ID of the user
     */
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    /**
     * The ID of the role assigned to the user
     */
    @JsonIgnore
    public Optional<String> roleId() {
        return roleId;
    }

    /**
     * The email of the user
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * The first name of the user
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the user
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the workspace
     */
    public CreateWorkspaceUserResponse withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }


    /**
     * The ID of the workspace
     */
    public CreateWorkspaceUserResponse withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The ID of the user
     */
    public CreateWorkspaceUserResponse withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    /**
     * The ID of the user
     */
    public CreateWorkspaceUserResponse withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * The ID of the role assigned to the user
     */
    public CreateWorkspaceUserResponse withRoleId(String roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = Optional.ofNullable(roleId);
        return this;
    }


    /**
     * The ID of the role assigned to the user
     */
    public CreateWorkspaceUserResponse withRoleId(Optional<String> roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
        return this;
    }

    /**
     * The email of the user
     */
    public CreateWorkspaceUserResponse withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * The email of the user
     */
    public CreateWorkspaceUserResponse withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The first name of the user
     */
    public CreateWorkspaceUserResponse withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name of the user
     */
    public CreateWorkspaceUserResponse withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the user
     */
    public CreateWorkspaceUserResponse withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name of the user
     */
    public CreateWorkspaceUserResponse withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWorkspaceUserResponse other = (CreateWorkspaceUserResponse) o;
        return 
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.roleId, other.roleId) &&
            Utils.enhancedDeepEquals(this.email, other.email) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            workspaceId, userId, roleId,
            email, firstName, lastName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWorkspaceUserResponse.class,
                "workspaceId", workspaceId,
                "userId", userId,
                "roleId", roleId,
                "email", email,
                "firstName", firstName,
                "lastName", lastName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> workspaceId = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Optional<String> roleId = Optional.empty();

        private JsonNullable<String> email = JsonNullable.undefined();

        private JsonNullable<String> firstName = JsonNullable.undefined();

        private JsonNullable<String> lastName = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        /**
         * The ID of the workspace
         */
        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }


        /**
         * The ID of the user
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * The ID of the user
         */
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }


        /**
         * The ID of the role assigned to the user
         */
        public Builder roleId(String roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = Optional.ofNullable(roleId);
            return this;
        }

        /**
         * The ID of the role assigned to the user
         */
        public Builder roleId(Optional<String> roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = roleId;
            return this;
        }


        /**
         * The email of the user
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * The email of the user
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }


        /**
         * The first name of the user
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name of the user
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        /**
         * The last name of the user
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name of the user
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public CreateWorkspaceUserResponse build() {

            return new CreateWorkspaceUserResponse(
                workspaceId, userId, roleId,
                email, firstName, lastName);
        }

    }
}
