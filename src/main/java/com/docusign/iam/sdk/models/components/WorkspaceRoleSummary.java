/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class WorkspaceRoleSummary {
    /**
     * The ID of the role
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_id")
    private Optional<String> roleId;

    /**
     * The name of the role
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_external")
    private JsonNullable<Boolean> isExternal;

    /**
     * The date the role was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_date")
    private JsonNullable<OffsetDateTime> createdDate;

    @JsonCreator
    public WorkspaceRoleSummary(
            @JsonProperty("role_id") Optional<String> roleId,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("is_external") JsonNullable<Boolean> isExternal,
            @JsonProperty("created_date") JsonNullable<OffsetDateTime> createdDate) {
        Utils.checkNotNull(roleId, "roleId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(isExternal, "isExternal");
        Utils.checkNotNull(createdDate, "createdDate");
        this.roleId = roleId;
        this.name = name;
        this.isExternal = isExternal;
        this.createdDate = createdDate;
    }
    
    public WorkspaceRoleSummary() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined());
    }

    /**
     * The ID of the role
     */
    @JsonIgnore
    public Optional<String> roleId() {
        return roleId;
    }

    /**
     * The name of the role
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
     */
    @JsonIgnore
    public JsonNullable<Boolean> isExternal() {
        return isExternal;
    }

    /**
     * The date the role was created
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdDate() {
        return createdDate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the role
     */
    public WorkspaceRoleSummary withRoleId(String roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = Optional.ofNullable(roleId);
        return this;
    }


    /**
     * The ID of the role
     */
    public WorkspaceRoleSummary withRoleId(Optional<String> roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
        return this;
    }

    /**
     * The name of the role
     */
    public WorkspaceRoleSummary withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the role
     */
    public WorkspaceRoleSummary withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
     */
    public WorkspaceRoleSummary withIsExternal(boolean isExternal) {
        Utils.checkNotNull(isExternal, "isExternal");
        this.isExternal = JsonNullable.of(isExternal);
        return this;
    }

    /**
     * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
     */
    public WorkspaceRoleSummary withIsExternal(JsonNullable<Boolean> isExternal) {
        Utils.checkNotNull(isExternal, "isExternal");
        this.isExternal = isExternal;
        return this;
    }

    /**
     * The date the role was created
     */
    public WorkspaceRoleSummary withCreatedDate(OffsetDateTime createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = JsonNullable.of(createdDate);
        return this;
    }

    /**
     * The date the role was created
     */
    public WorkspaceRoleSummary withCreatedDate(JsonNullable<OffsetDateTime> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkspaceRoleSummary other = (WorkspaceRoleSummary) o;
        return 
            Utils.enhancedDeepEquals(this.roleId, other.roleId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.isExternal, other.isExternal) &&
            Utils.enhancedDeepEquals(this.createdDate, other.createdDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            roleId, name, isExternal,
            createdDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkspaceRoleSummary.class,
                "roleId", roleId,
                "name", name,
                "isExternal", isExternal,
                "createdDate", createdDate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> roleId = Optional.empty();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<Boolean> isExternal = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdDate = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the role
         */
        public Builder roleId(String roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = Optional.ofNullable(roleId);
            return this;
        }

        /**
         * The ID of the role
         */
        public Builder roleId(Optional<String> roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = roleId;
            return this;
        }


        /**
         * The name of the role
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the role
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
         */
        public Builder isExternal(boolean isExternal) {
            Utils.checkNotNull(isExternal, "isExternal");
            this.isExternal = JsonNullable.of(isExternal);
            return this;
        }

        /**
         * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
         */
        public Builder isExternal(JsonNullable<Boolean> isExternal) {
            Utils.checkNotNull(isExternal, "isExternal");
            this.isExternal = isExternal;
            return this;
        }


        /**
         * The date the role was created
         */
        public Builder createdDate(OffsetDateTime createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = JsonNullable.of(createdDate);
            return this;
        }

        /**
         * The date the role was created
         */
        public Builder createdDate(JsonNullable<OffsetDateTime> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }

        public WorkspaceRoleSummary build() {

            return new WorkspaceRoleSummary(
                roleId, name, isExternal,
                createdDate);
        }

    }
}
