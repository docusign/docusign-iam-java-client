/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CreateWorkspaceDocumentResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_id")
    private Optional<String> documentId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner_id")
    private JsonNullable<String> ownerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private JsonNullable<Long> size;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_date")
    private JsonNullable<OffsetDateTime> createdDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_updated_date")
    private JsonNullable<OffsetDateTime> lastUpdatedDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    private Optional<? extends CreateWorkspaceDocumentOwner> owner;

    @JsonCreator
    public CreateWorkspaceDocumentResponse(
            @JsonProperty("document_id") Optional<String> documentId,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("owner_id") JsonNullable<String> ownerId,
            @JsonProperty("size") JsonNullable<Long> size,
            @JsonProperty("created_date") JsonNullable<OffsetDateTime> createdDate,
            @JsonProperty("last_updated_date") JsonNullable<OffsetDateTime> lastUpdatedDate,
            @JsonProperty("owner") Optional<? extends CreateWorkspaceDocumentOwner> owner) {
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(ownerId, "ownerId");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
        Utils.checkNotNull(owner, "owner");
        this.documentId = documentId;
        this.name = name;
        this.ownerId = ownerId;
        this.size = size;
        this.createdDate = createdDate;
        this.lastUpdatedDate = lastUpdatedDate;
        this.owner = owner;
    }
    
    public CreateWorkspaceDocumentResponse() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> documentId() {
        return documentId;
    }

    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<String> ownerId() {
        return ownerId;
    }

    @JsonIgnore
    public JsonNullable<Long> size() {
        return size;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> createdDate() {
        return createdDate;
    }

    @JsonIgnore
    public JsonNullable<OffsetDateTime> lastUpdatedDate() {
        return lastUpdatedDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateWorkspaceDocumentOwner> owner() {
        return (Optional<CreateWorkspaceDocumentOwner>) owner;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CreateWorkspaceDocumentResponse withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = Optional.ofNullable(documentId);
        return this;
    }


    public CreateWorkspaceDocumentResponse withDocumentId(Optional<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    public CreateWorkspaceDocumentResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    public CreateWorkspaceDocumentResponse withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CreateWorkspaceDocumentResponse withOwnerId(String ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = JsonNullable.of(ownerId);
        return this;
    }

    public CreateWorkspaceDocumentResponse withOwnerId(JsonNullable<String> ownerId) {
        Utils.checkNotNull(ownerId, "ownerId");
        this.ownerId = ownerId;
        return this;
    }

    public CreateWorkspaceDocumentResponse withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = JsonNullable.of(size);
        return this;
    }

    public CreateWorkspaceDocumentResponse withSize(JsonNullable<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public CreateWorkspaceDocumentResponse withCreatedDate(OffsetDateTime createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = JsonNullable.of(createdDate);
        return this;
    }

    public CreateWorkspaceDocumentResponse withCreatedDate(JsonNullable<OffsetDateTime> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    public CreateWorkspaceDocumentResponse withLastUpdatedDate(OffsetDateTime lastUpdatedDate) {
        Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
        this.lastUpdatedDate = JsonNullable.of(lastUpdatedDate);
        return this;
    }

    public CreateWorkspaceDocumentResponse withLastUpdatedDate(JsonNullable<OffsetDateTime> lastUpdatedDate) {
        Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }

    public CreateWorkspaceDocumentResponse withOwner(CreateWorkspaceDocumentOwner owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = Optional.ofNullable(owner);
        return this;
    }


    public CreateWorkspaceDocumentResponse withOwner(Optional<? extends CreateWorkspaceDocumentOwner> owner) {
        Utils.checkNotNull(owner, "owner");
        this.owner = owner;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWorkspaceDocumentResponse other = (CreateWorkspaceDocumentResponse) o;
        return 
            Utils.enhancedDeepEquals(this.documentId, other.documentId) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.ownerId, other.ownerId) &&
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.createdDate, other.createdDate) &&
            Utils.enhancedDeepEquals(this.lastUpdatedDate, other.lastUpdatedDate) &&
            Utils.enhancedDeepEquals(this.owner, other.owner);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            documentId, name, ownerId,
            size, createdDate, lastUpdatedDate,
            owner);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateWorkspaceDocumentResponse.class,
                "documentId", documentId,
                "name", name,
                "ownerId", ownerId,
                "size", size,
                "createdDate", createdDate,
                "lastUpdatedDate", lastUpdatedDate,
                "owner", owner);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> documentId = Optional.empty();

        private JsonNullable<String> name = JsonNullable.undefined();

        private JsonNullable<String> ownerId = JsonNullable.undefined();

        private JsonNullable<Long> size = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> createdDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> lastUpdatedDate = JsonNullable.undefined();

        private Optional<? extends CreateWorkspaceDocumentOwner> owner = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = Optional.ofNullable(documentId);
            return this;
        }

        public Builder documentId(Optional<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder ownerId(String ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = JsonNullable.of(ownerId);
            return this;
        }

        public Builder ownerId(JsonNullable<String> ownerId) {
            Utils.checkNotNull(ownerId, "ownerId");
            this.ownerId = ownerId;
            return this;
        }


        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = JsonNullable.of(size);
            return this;
        }

        public Builder size(JsonNullable<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        public Builder createdDate(OffsetDateTime createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = JsonNullable.of(createdDate);
            return this;
        }

        public Builder createdDate(JsonNullable<OffsetDateTime> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }


        public Builder lastUpdatedDate(OffsetDateTime lastUpdatedDate) {
            Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
            this.lastUpdatedDate = JsonNullable.of(lastUpdatedDate);
            return this;
        }

        public Builder lastUpdatedDate(JsonNullable<OffsetDateTime> lastUpdatedDate) {
            Utils.checkNotNull(lastUpdatedDate, "lastUpdatedDate");
            this.lastUpdatedDate = lastUpdatedDate;
            return this;
        }


        public Builder owner(CreateWorkspaceDocumentOwner owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = Optional.ofNullable(owner);
            return this;
        }

        public Builder owner(Optional<? extends CreateWorkspaceDocumentOwner> owner) {
            Utils.checkNotNull(owner, "owner");
            this.owner = owner;
            return this;
        }

        public CreateWorkspaceDocumentResponse build() {

            return new CreateWorkspaceDocumentResponse(
                documentId, name, ownerId,
                size, createdDate, lastUpdatedDate,
                owner);
        }

    }
}
