/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * TriggerInputSchema
 * 
 * <p>Array of fields required as inputs to trigger the workflow, including field names, data types, and default values.
 */
public class TriggerInputSchema {
    /**
     * The name of the input field expected by the workflow. This key must match the name
     * provided in the `trigger_inputs` when triggering the workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field_name")
    private Optional<String> fieldName;

    /**
     * The data type expected for the input field. This indicates whether the input should
     * be a string, number, boolean, object, or array, ensuring the data is passed in the
     * correct format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field_data_type")
    private Optional<String> fieldDataType;

    /**
     * The default value for the input field if one is provided. This can be a string, number,
     * boolean, object, or array. If no value is provided during the trigger, the workflow may
     * use this default value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_value")
    private Optional<? extends DefaultValue> defaultValue;

    @JsonCreator
    public TriggerInputSchema(
            @JsonProperty("field_name") Optional<String> fieldName,
            @JsonProperty("field_data_type") Optional<String> fieldDataType,
            @JsonProperty("default_value") Optional<? extends DefaultValue> defaultValue) {
        Utils.checkNotNull(fieldName, "fieldName");
        Utils.checkNotNull(fieldDataType, "fieldDataType");
        Utils.checkNotNull(defaultValue, "defaultValue");
        this.fieldName = fieldName;
        this.fieldDataType = fieldDataType;
        this.defaultValue = defaultValue;
    }
    
    public TriggerInputSchema() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the input field expected by the workflow. This key must match the name
     * provided in the `trigger_inputs` when triggering the workflow.
     */
    @JsonIgnore
    public Optional<String> fieldName() {
        return fieldName;
    }

    /**
     * The data type expected for the input field. This indicates whether the input should
     * be a string, number, boolean, object, or array, ensuring the data is passed in the
     * correct format.
     */
    @JsonIgnore
    public Optional<String> fieldDataType() {
        return fieldDataType;
    }

    /**
     * The default value for the input field if one is provided. This can be a string, number,
     * boolean, object, or array. If no value is provided during the trigger, the workflow may
     * use this default value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DefaultValue> defaultValue() {
        return (Optional<DefaultValue>) defaultValue;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the input field expected by the workflow. This key must match the name
     * provided in the `trigger_inputs` when triggering the workflow.
     */
    public TriggerInputSchema withFieldName(String fieldName) {
        Utils.checkNotNull(fieldName, "fieldName");
        this.fieldName = Optional.ofNullable(fieldName);
        return this;
    }


    /**
     * The name of the input field expected by the workflow. This key must match the name
     * provided in the `trigger_inputs` when triggering the workflow.
     */
    public TriggerInputSchema withFieldName(Optional<String> fieldName) {
        Utils.checkNotNull(fieldName, "fieldName");
        this.fieldName = fieldName;
        return this;
    }

    /**
     * The data type expected for the input field. This indicates whether the input should
     * be a string, number, boolean, object, or array, ensuring the data is passed in the
     * correct format.
     */
    public TriggerInputSchema withFieldDataType(String fieldDataType) {
        Utils.checkNotNull(fieldDataType, "fieldDataType");
        this.fieldDataType = Optional.ofNullable(fieldDataType);
        return this;
    }


    /**
     * The data type expected for the input field. This indicates whether the input should
     * be a string, number, boolean, object, or array, ensuring the data is passed in the
     * correct format.
     */
    public TriggerInputSchema withFieldDataType(Optional<String> fieldDataType) {
        Utils.checkNotNull(fieldDataType, "fieldDataType");
        this.fieldDataType = fieldDataType;
        return this;
    }

    /**
     * The default value for the input field if one is provided. This can be a string, number,
     * boolean, object, or array. If no value is provided during the trigger, the workflow may
     * use this default value.
     */
    public TriggerInputSchema withDefaultValue(DefaultValue defaultValue) {
        Utils.checkNotNull(defaultValue, "defaultValue");
        this.defaultValue = Optional.ofNullable(defaultValue);
        return this;
    }


    /**
     * The default value for the input field if one is provided. This can be a string, number,
     * boolean, object, or array. If no value is provided during the trigger, the workflow may
     * use this default value.
     */
    public TriggerInputSchema withDefaultValue(Optional<? extends DefaultValue> defaultValue) {
        Utils.checkNotNull(defaultValue, "defaultValue");
        this.defaultValue = defaultValue;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TriggerInputSchema other = (TriggerInputSchema) o;
        return 
            Utils.enhancedDeepEquals(this.fieldName, other.fieldName) &&
            Utils.enhancedDeepEquals(this.fieldDataType, other.fieldDataType) &&
            Utils.enhancedDeepEquals(this.defaultValue, other.defaultValue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fieldName, fieldDataType, defaultValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TriggerInputSchema.class,
                "fieldName", fieldName,
                "fieldDataType", fieldDataType,
                "defaultValue", defaultValue);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> fieldName = Optional.empty();

        private Optional<String> fieldDataType = Optional.empty();

        private Optional<? extends DefaultValue> defaultValue = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the input field expected by the workflow. This key must match the name
         * provided in the `trigger_inputs` when triggering the workflow.
         */
        public Builder fieldName(String fieldName) {
            Utils.checkNotNull(fieldName, "fieldName");
            this.fieldName = Optional.ofNullable(fieldName);
            return this;
        }

        /**
         * The name of the input field expected by the workflow. This key must match the name
         * provided in the `trigger_inputs` when triggering the workflow.
         */
        public Builder fieldName(Optional<String> fieldName) {
            Utils.checkNotNull(fieldName, "fieldName");
            this.fieldName = fieldName;
            return this;
        }


        /**
         * The data type expected for the input field. This indicates whether the input should
         * be a string, number, boolean, object, or array, ensuring the data is passed in the
         * correct format.
         */
        public Builder fieldDataType(String fieldDataType) {
            Utils.checkNotNull(fieldDataType, "fieldDataType");
            this.fieldDataType = Optional.ofNullable(fieldDataType);
            return this;
        }

        /**
         * The data type expected for the input field. This indicates whether the input should
         * be a string, number, boolean, object, or array, ensuring the data is passed in the
         * correct format.
         */
        public Builder fieldDataType(Optional<String> fieldDataType) {
            Utils.checkNotNull(fieldDataType, "fieldDataType");
            this.fieldDataType = fieldDataType;
            return this;
        }


        /**
         * The default value for the input field if one is provided. This can be a string, number,
         * boolean, object, or array. If no value is provided during the trigger, the workflow may
         * use this default value.
         */
        public Builder defaultValue(DefaultValue defaultValue) {
            Utils.checkNotNull(defaultValue, "defaultValue");
            this.defaultValue = Optional.ofNullable(defaultValue);
            return this;
        }

        /**
         * The default value for the input field if one is provided. This can be a string, number,
         * boolean, object, or array. If no value is provided during the trigger, the workflow may
         * use this default value.
         */
        public Builder defaultValue(Optional<? extends DefaultValue> defaultValue) {
            Utils.checkNotNull(defaultValue, "defaultValue");
            this.defaultValue = defaultValue;
            return this;
        }

        public TriggerInputSchema build() {

            return new TriggerInputSchema(
                fieldName, fieldDataType, defaultValue);
        }

    }
}
