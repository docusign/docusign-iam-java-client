/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * ConfidentialAuthCodeGrantRequestBody
 * 
 * <p>The request body for the confidential authorization code grant type.
 */
public class ConfidentialAuthCodeGrantRequestBody {

    @SpeakeasyMetadata("form:name=flow")
    private Optional<? extends Flow> flow;

    /**
     * The grant type. This value must be set to "authorization_code".
     */
    @SpeakeasyMetadata("form:name=grant_type")
    private Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType> grantType;

    /**
     * The authorization code supplied to the callback.
     */
    @SpeakeasyMetadata("form:name=code")
    private String code;

    @JsonCreator
    public ConfidentialAuthCodeGrantRequestBody(
            Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType> grantType,
            String code) {
        Utils.checkNotNull(grantType, "grantType");
        Utils.checkNotNull(code, "code");
        this.flow = Builder._SINGLETON_VALUE_Flow.value();
        this.grantType = grantType;
        this.code = code;
    }
    
    public ConfidentialAuthCodeGrantRequestBody(
            String code) {
        this(Optional.empty(), code);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Flow> flow() {
        return (Optional<Flow>) flow;
    }

    /**
     * The grant type. This value must be set to "authorization_code".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConfidentialAuthCodeGrantRequestBodyGrantType> grantType() {
        return (Optional<ConfidentialAuthCodeGrantRequestBodyGrantType>) grantType;
    }

    /**
     * The authorization code supplied to the callback.
     */
    @JsonIgnore
    public String code() {
        return code;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The grant type. This value must be set to "authorization_code".
     */
    public ConfidentialAuthCodeGrantRequestBody withGrantType(ConfidentialAuthCodeGrantRequestBodyGrantType grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = Optional.ofNullable(grantType);
        return this;
    }

    /**
     * The grant type. This value must be set to "authorization_code".
     */
    public ConfidentialAuthCodeGrantRequestBody withGrantType(Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType> grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }

    /**
     * The authorization code supplied to the callback.
     */
    public ConfidentialAuthCodeGrantRequestBody withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfidentialAuthCodeGrantRequestBody other = (ConfidentialAuthCodeGrantRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.flow, other.flow) &&
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.code, other.code);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            flow,
            grantType,
            code);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfidentialAuthCodeGrantRequestBody.class,
                "flow", flow,
                "grantType", grantType,
                "code", code);
    }
    
    public final static class Builder {
 
        private Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType> grantType;
 
        private String code;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The grant type. This value must be set to "authorization_code".
         */
        public Builder grantType(ConfidentialAuthCodeGrantRequestBodyGrantType grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = Optional.ofNullable(grantType);
            return this;
        }

        /**
         * The grant type. This value must be set to "authorization_code".
         */
        public Builder grantType(Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType> grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }

        /**
         * The authorization code supplied to the callback.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }
        
        public ConfidentialAuthCodeGrantRequestBody build() {
            if (grantType == null) {
                grantType = _SINGLETON_VALUE_GrantType.value();
            }
            return new ConfidentialAuthCodeGrantRequestBody(
                grantType,
                code);
        }

        private static final LazySingletonValue<Optional<? extends Flow>> _SINGLETON_VALUE_Flow =
                new LazySingletonValue<>(
                        "flow",
                        "\"confidential\"",
                        new TypeReference<Optional<? extends Flow>>() {});

        private static final LazySingletonValue<Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType>> _SINGLETON_VALUE_GrantType =
                new LazySingletonValue<>(
                        "grant_type",
                        "\"authorization_code\"",
                        new TypeReference<Optional<? extends ConfidentialAuthCodeGrantRequestBodyGrantType>>() {});
    }
}
