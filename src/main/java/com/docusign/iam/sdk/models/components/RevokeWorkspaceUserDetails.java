/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;


public class RevokeWorkspaceUserDetails {
    /**
     * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revocation_date")
    private JsonNullable<OffsetDateTime> revocationDate;

    @JsonCreator
    public RevokeWorkspaceUserDetails(
            @JsonProperty("revocation_date") JsonNullable<OffsetDateTime> revocationDate) {
        Utils.checkNotNull(revocationDate, "revocationDate");
        this.revocationDate = revocationDate;
    }
    
    public RevokeWorkspaceUserDetails() {
        this(JsonNullable.undefined());
    }

    /**
     * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> revocationDate() {
        return revocationDate;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
     */
    public RevokeWorkspaceUserDetails withRevocationDate(OffsetDateTime revocationDate) {
        Utils.checkNotNull(revocationDate, "revocationDate");
        this.revocationDate = JsonNullable.of(revocationDate);
        return this;
    }

    /**
     * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
     */
    public RevokeWorkspaceUserDetails withRevocationDate(JsonNullable<OffsetDateTime> revocationDate) {
        Utils.checkNotNull(revocationDate, "revocationDate");
        this.revocationDate = revocationDate;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RevokeWorkspaceUserDetails other = (RevokeWorkspaceUserDetails) o;
        return 
            Utils.enhancedDeepEquals(this.revocationDate, other.revocationDate);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            revocationDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RevokeWorkspaceUserDetails.class,
                "revocationDate", revocationDate);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<OffsetDateTime> revocationDate = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
         */
        public Builder revocationDate(OffsetDateTime revocationDate) {
            Utils.checkNotNull(revocationDate, "revocationDate");
            this.revocationDate = JsonNullable.of(revocationDate);
            return this;
        }

        /**
         * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
         */
        public Builder revocationDate(JsonNullable<OffsetDateTime> revocationDate) {
            Utils.checkNotNull(revocationDate, "revocationDate");
            this.revocationDate = revocationDate;
            return this;
        }

        public RevokeWorkspaceUserDetails build() {

            return new RevokeWorkspaceUserDetails(
                revocationDate);
        }

    }
}
