/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class UpdateWorkspaceUserResponse {
    /**
     * The ID of the role assigned to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_id")
    private Optional<String> roleId;

    @JsonCreator
    public UpdateWorkspaceUserResponse(
            @JsonProperty("role_id") Optional<String> roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
    }
    
    public UpdateWorkspaceUserResponse() {
        this(Optional.empty());
    }

    /**
     * The ID of the role assigned to the user
     */
    @JsonIgnore
    public Optional<String> roleId() {
        return roleId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ID of the role assigned to the user
     */
    public UpdateWorkspaceUserResponse withRoleId(String roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = Optional.ofNullable(roleId);
        return this;
    }


    /**
     * The ID of the role assigned to the user
     */
    public UpdateWorkspaceUserResponse withRoleId(Optional<String> roleId) {
        Utils.checkNotNull(roleId, "roleId");
        this.roleId = roleId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateWorkspaceUserResponse other = (UpdateWorkspaceUserResponse) o;
        return 
            Utils.enhancedDeepEquals(this.roleId, other.roleId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            roleId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateWorkspaceUserResponse.class,
                "roleId", roleId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> roleId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The ID of the role assigned to the user
         */
        public Builder roleId(String roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = Optional.ofNullable(roleId);
            return this;
        }

        /**
         * The ID of the role assigned to the user
         */
        public Builder roleId(Optional<String> roleId) {
            Utils.checkNotNull(roleId, "roleId");
            this.roleId = roleId;
            return this;
        }

        public UpdateWorkspaceUserResponse build() {

            return new UpdateWorkspaceUserResponse(
                roleId);
        }

    }
}
