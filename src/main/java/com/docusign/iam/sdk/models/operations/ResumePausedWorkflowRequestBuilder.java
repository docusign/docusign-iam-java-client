/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import static com.docusign.iam.sdk.operations.Operations.RequestOperation;

import com.docusign.iam.sdk.SDKConfiguration;
import com.docusign.iam.sdk.operations.ResumePausedWorkflow;
import com.docusign.iam.sdk.utils.Options;
import com.docusign.iam.sdk.utils.RetryConfig;
import com.docusign.iam.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class ResumePausedWorkflowRequestBuilder {

    private String accountId;
    private String workflowId;
    private Optional<RetryConfig> retryConfig = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ResumePausedWorkflowRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public ResumePausedWorkflowRequestBuilder accountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public ResumePausedWorkflowRequestBuilder workflowId(String workflowId) {
        Utils.checkNotNull(workflowId, "workflowId");
        this.workflowId = workflowId;
        return this;
    }
                
    public ResumePausedWorkflowRequestBuilder retryConfig(RetryConfig retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = Optional.of(retryConfig);
        return this;
    }

    public ResumePausedWorkflowRequestBuilder retryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
        return this;
    }


    private ResumePausedWorkflowRequest buildRequest() {

        ResumePausedWorkflowRequest request = new ResumePausedWorkflowRequest(accountId,
            workflowId);

        return request;
    }

    public ResumePausedWorkflowResponse call() throws Exception {
        Optional<Options> options = Optional.of(Options.builder()
            .retryConfig(retryConfig)
            .build());

        RequestOperation<ResumePausedWorkflowRequest, ResumePausedWorkflowResponse> operation
              = new ResumePausedWorkflow.Sync(sdkConfiguration, options);
        ResumePausedWorkflowRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
