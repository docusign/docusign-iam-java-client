/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.components;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Provisions
 * 
 * <p>"The conditions or rules written in a legal agreement. The set of possible provisions is determined
 * by the agreement type."
 */
public class Provisions {
    /**
     * The type of assignment rights in the agreement (e.g., transferability)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignment_type")
    private Optional<String> assignmentType;

    /**
     * Provisions related to changes in control of the assigning party
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignment_change_of_control")
    private Optional<String> assignmentChangeOfControl;

    /**
     * Provisions for the termination of assignment rights
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignment_termination_rights")
    private Optional<String> assignmentTerminationRights;

    /**
     * A subset of ISO 8601 duration. Fractional or negative values are not supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidentiality_obligation_period")
    private JsonNullable<String> confidentialityObligationPeriod;

    /**
     * The governing law clause identifies the substantive law that will govern the rights and obligations
     * of the parties to the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("governing_law")
    private JsonNullable<String> governingLaw;

    /**
     * A jurisdiction clause expressly sets out which courts or tribunals have the power to hear a dispute
     * which arises under the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdiction")
    private JsonNullable<String> jurisdiction;

    /**
     * Type of non-disclosure agreement (e.g., unilateral, bilateral).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nda_type")
    private JsonNullable<String> ndaType;

    /**
     * Total annual value of the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annual_agreement_value")
    private JsonNullable<Double> annualAgreementValue;

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annual_agreement_value_currency_code")
    private JsonNullable<? extends CurrencyCode> annualAgreementValueCurrencyCode;

    /**
     * Total value of the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_agreement_value")
    private JsonNullable<Double> totalAgreementValue;

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_agreement_value_currency_code")
    private JsonNullable<? extends CurrencyCode> totalAgreementValueCurrencyCode;

    /**
     * Terms specifying the payment due date, based on a defined number of days or other conditions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_terms_due_date")
    private Optional<? extends PaymentTermsDueDate> paymentTermsDueDate;

    /**
     * Indicates if late payment fees can be charged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_charge_late_payment_fees")
    private JsonNullable<Boolean> canChargeLatePaymentFees;

    /**
     * Percentage fee charged on late payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("late_payment_fee_percent")
    private JsonNullable<Long> latePaymentFeePercent;

    /**
     * Maximum liability cap in the agreement
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_cap_fixed_amount")
    private JsonNullable<Double> liabilityCapFixedAmount;

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_cap_currency_code")
    private JsonNullable<? extends CurrencyCode> liabilityCapCurrencyCode;

    /**
     * Multiplier applied to calculate the liability cap
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_cap_multiplier")
    private JsonNullable<Double> liabilityCapMultiplier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_cap_duration")
    private JsonNullable<String> liabilityCapDuration;

    /**
     * Maximum allowed percentage increase in prices, limited between 0 and 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price_cap_percent_increase")
    private JsonNullable<Float> priceCapPercentIncrease;

    /**
     * Specifies the type of renewal (e.g., automatic, manual).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewal_type")
    private JsonNullable<String> renewalType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewal_notice_period")
    private JsonNullable<String> renewalNoticePeriod;

    /**
     * Calculated field based on renewal notice period. (agreement expiration date - renewal notice period
     * duration)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewal_notice_date")
    private JsonNullable<OffsetDateTime> renewalNoticeDate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_renewal_term_length")
    private JsonNullable<String> autoRenewalTermLength;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewal_extension_period")
    private JsonNullable<String> renewalExtensionPeriod;

    /**
     * The userId parameter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewal_process_owner")
    private Optional<String> renewalProcessOwner;

    /**
     * Additional information related to the renewal process.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewal_additional_info")
    private JsonNullable<String> renewalAdditionalInfo;

    /**
     * The specific duration that a party has to give notice before terminating the agreement due to a
     * significant breach or violation of terms.
     * This period allows the other party to address the cause or prepare for termination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination_period_for_cause")
    private JsonNullable<String> terminationPeriodForCause;

    /**
     * Specifies the required notice period that a party must provide before terminating the agreement for
     * convenience, without cause, under the terms outlined in the contract.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termination_period_for_convenience")
    private JsonNullable<String> terminationPeriodForConvenience;

    /**
     * The date when the terms of the agreement start to apply and become legally binding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    private JsonNullable<OffsetDateTime> effectiveDate;

    /**
     * The date when the agreement ends and is no longer valid or enforceable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private JsonNullable<OffsetDateTime> expirationDate;

    /**
     * The date when the agreement is signed by all parties, making it officially binding. This is not
     * necessarily the same as the effective date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("execution_date")
    private JsonNullable<OffsetDateTime> executionDate;

    /**
     * Overall duration of the agreement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("term_length")
    private JsonNullable<String> termLength;

    @JsonCreator
    public Provisions(
            @JsonProperty("assignment_type") Optional<String> assignmentType,
            @JsonProperty("assignment_change_of_control") Optional<String> assignmentChangeOfControl,
            @JsonProperty("assignment_termination_rights") Optional<String> assignmentTerminationRights,
            @JsonProperty("confidentiality_obligation_period") JsonNullable<String> confidentialityObligationPeriod,
            @JsonProperty("governing_law") JsonNullable<String> governingLaw,
            @JsonProperty("jurisdiction") JsonNullable<String> jurisdiction,
            @JsonProperty("nda_type") JsonNullable<String> ndaType,
            @JsonProperty("annual_agreement_value") JsonNullable<Double> annualAgreementValue,
            @JsonProperty("annual_agreement_value_currency_code") JsonNullable<? extends CurrencyCode> annualAgreementValueCurrencyCode,
            @JsonProperty("total_agreement_value") JsonNullable<Double> totalAgreementValue,
            @JsonProperty("total_agreement_value_currency_code") JsonNullable<? extends CurrencyCode> totalAgreementValueCurrencyCode,
            @JsonProperty("payment_terms_due_date") Optional<? extends PaymentTermsDueDate> paymentTermsDueDate,
            @JsonProperty("can_charge_late_payment_fees") JsonNullable<Boolean> canChargeLatePaymentFees,
            @JsonProperty("late_payment_fee_percent") JsonNullable<Long> latePaymentFeePercent,
            @JsonProperty("liability_cap_fixed_amount") JsonNullable<Double> liabilityCapFixedAmount,
            @JsonProperty("liability_cap_currency_code") JsonNullable<? extends CurrencyCode> liabilityCapCurrencyCode,
            @JsonProperty("liability_cap_multiplier") JsonNullable<Double> liabilityCapMultiplier,
            @JsonProperty("liability_cap_duration") JsonNullable<String> liabilityCapDuration,
            @JsonProperty("price_cap_percent_increase") JsonNullable<Float> priceCapPercentIncrease,
            @JsonProperty("renewal_type") JsonNullable<String> renewalType,
            @JsonProperty("renewal_notice_period") JsonNullable<String> renewalNoticePeriod,
            @JsonProperty("renewal_notice_date") JsonNullable<OffsetDateTime> renewalNoticeDate,
            @JsonProperty("auto_renewal_term_length") JsonNullable<String> autoRenewalTermLength,
            @JsonProperty("renewal_extension_period") JsonNullable<String> renewalExtensionPeriod,
            @JsonProperty("renewal_process_owner") Optional<String> renewalProcessOwner,
            @JsonProperty("renewal_additional_info") JsonNullable<String> renewalAdditionalInfo,
            @JsonProperty("termination_period_for_cause") JsonNullable<String> terminationPeriodForCause,
            @JsonProperty("termination_period_for_convenience") JsonNullable<String> terminationPeriodForConvenience,
            @JsonProperty("effective_date") JsonNullable<OffsetDateTime> effectiveDate,
            @JsonProperty("expiration_date") JsonNullable<OffsetDateTime> expirationDate,
            @JsonProperty("execution_date") JsonNullable<OffsetDateTime> executionDate,
            @JsonProperty("term_length") JsonNullable<String> termLength) {
        Utils.checkNotNull(assignmentType, "assignmentType");
        Utils.checkNotNull(assignmentChangeOfControl, "assignmentChangeOfControl");
        Utils.checkNotNull(assignmentTerminationRights, "assignmentTerminationRights");
        Utils.checkNotNull(confidentialityObligationPeriod, "confidentialityObligationPeriod");
        Utils.checkNotNull(governingLaw, "governingLaw");
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        Utils.checkNotNull(ndaType, "ndaType");
        Utils.checkNotNull(annualAgreementValue, "annualAgreementValue");
        Utils.checkNotNull(annualAgreementValueCurrencyCode, "annualAgreementValueCurrencyCode");
        Utils.checkNotNull(totalAgreementValue, "totalAgreementValue");
        Utils.checkNotNull(totalAgreementValueCurrencyCode, "totalAgreementValueCurrencyCode");
        Utils.checkNotNull(paymentTermsDueDate, "paymentTermsDueDate");
        Utils.checkNotNull(canChargeLatePaymentFees, "canChargeLatePaymentFees");
        Utils.checkNotNull(latePaymentFeePercent, "latePaymentFeePercent");
        Utils.checkNotNull(liabilityCapFixedAmount, "liabilityCapFixedAmount");
        Utils.checkNotNull(liabilityCapCurrencyCode, "liabilityCapCurrencyCode");
        Utils.checkNotNull(liabilityCapMultiplier, "liabilityCapMultiplier");
        Utils.checkNotNull(liabilityCapDuration, "liabilityCapDuration");
        Utils.checkNotNull(priceCapPercentIncrease, "priceCapPercentIncrease");
        Utils.checkNotNull(renewalType, "renewalType");
        Utils.checkNotNull(renewalNoticePeriod, "renewalNoticePeriod");
        Utils.checkNotNull(renewalNoticeDate, "renewalNoticeDate");
        Utils.checkNotNull(autoRenewalTermLength, "autoRenewalTermLength");
        Utils.checkNotNull(renewalExtensionPeriod, "renewalExtensionPeriod");
        Utils.checkNotNull(renewalProcessOwner, "renewalProcessOwner");
        Utils.checkNotNull(renewalAdditionalInfo, "renewalAdditionalInfo");
        Utils.checkNotNull(terminationPeriodForCause, "terminationPeriodForCause");
        Utils.checkNotNull(terminationPeriodForConvenience, "terminationPeriodForConvenience");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(executionDate, "executionDate");
        Utils.checkNotNull(termLength, "termLength");
        this.assignmentType = assignmentType;
        this.assignmentChangeOfControl = assignmentChangeOfControl;
        this.assignmentTerminationRights = assignmentTerminationRights;
        this.confidentialityObligationPeriod = confidentialityObligationPeriod;
        this.governingLaw = governingLaw;
        this.jurisdiction = jurisdiction;
        this.ndaType = ndaType;
        this.annualAgreementValue = annualAgreementValue;
        this.annualAgreementValueCurrencyCode = annualAgreementValueCurrencyCode;
        this.totalAgreementValue = totalAgreementValue;
        this.totalAgreementValueCurrencyCode = totalAgreementValueCurrencyCode;
        this.paymentTermsDueDate = paymentTermsDueDate;
        this.canChargeLatePaymentFees = canChargeLatePaymentFees;
        this.latePaymentFeePercent = latePaymentFeePercent;
        this.liabilityCapFixedAmount = liabilityCapFixedAmount;
        this.liabilityCapCurrencyCode = liabilityCapCurrencyCode;
        this.liabilityCapMultiplier = liabilityCapMultiplier;
        this.liabilityCapDuration = liabilityCapDuration;
        this.priceCapPercentIncrease = priceCapPercentIncrease;
        this.renewalType = renewalType;
        this.renewalNoticePeriod = renewalNoticePeriod;
        this.renewalNoticeDate = renewalNoticeDate;
        this.autoRenewalTermLength = autoRenewalTermLength;
        this.renewalExtensionPeriod = renewalExtensionPeriod;
        this.renewalProcessOwner = renewalProcessOwner;
        this.renewalAdditionalInfo = renewalAdditionalInfo;
        this.terminationPeriodForCause = terminationPeriodForCause;
        this.terminationPeriodForConvenience = terminationPeriodForConvenience;
        this.effectiveDate = effectiveDate;
        this.expirationDate = expirationDate;
        this.executionDate = executionDate;
        this.termLength = termLength;
    }
    
    public Provisions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(),
            JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The type of assignment rights in the agreement (e.g., transferability)
     */
    @JsonIgnore
    public Optional<String> assignmentType() {
        return assignmentType;
    }

    /**
     * Provisions related to changes in control of the assigning party
     */
    @JsonIgnore
    public Optional<String> assignmentChangeOfControl() {
        return assignmentChangeOfControl;
    }

    /**
     * Provisions for the termination of assignment rights
     */
    @JsonIgnore
    public Optional<String> assignmentTerminationRights() {
        return assignmentTerminationRights;
    }

    /**
     * A subset of ISO 8601 duration. Fractional or negative values are not supported.
     */
    @JsonIgnore
    public JsonNullable<String> confidentialityObligationPeriod() {
        return confidentialityObligationPeriod;
    }

    /**
     * The governing law clause identifies the substantive law that will govern the rights and obligations
     * of the parties to the agreement.
     */
    @JsonIgnore
    public JsonNullable<String> governingLaw() {
        return governingLaw;
    }

    /**
     * A jurisdiction clause expressly sets out which courts or tribunals have the power to hear a dispute
     * which arises under the agreement.
     */
    @JsonIgnore
    public JsonNullable<String> jurisdiction() {
        return jurisdiction;
    }

    /**
     * Type of non-disclosure agreement (e.g., unilateral, bilateral).
     */
    @JsonIgnore
    public JsonNullable<String> ndaType() {
        return ndaType;
    }

    /**
     * Total annual value of the agreement.
     */
    @JsonIgnore
    public JsonNullable<Double> annualAgreementValue() {
        return annualAgreementValue;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyCode> annualAgreementValueCurrencyCode() {
        return (JsonNullable<CurrencyCode>) annualAgreementValueCurrencyCode;
    }

    /**
     * Total value of the agreement.
     */
    @JsonIgnore
    public JsonNullable<Double> totalAgreementValue() {
        return totalAgreementValue;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyCode> totalAgreementValueCurrencyCode() {
        return (JsonNullable<CurrencyCode>) totalAgreementValueCurrencyCode;
    }

    /**
     * Terms specifying the payment due date, based on a defined number of days or other conditions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentTermsDueDate> paymentTermsDueDate() {
        return (Optional<PaymentTermsDueDate>) paymentTermsDueDate;
    }

    /**
     * Indicates if late payment fees can be charged.
     */
    @JsonIgnore
    public JsonNullable<Boolean> canChargeLatePaymentFees() {
        return canChargeLatePaymentFees;
    }

    /**
     * Percentage fee charged on late payments.
     */
    @JsonIgnore
    public JsonNullable<Long> latePaymentFeePercent() {
        return latePaymentFeePercent;
    }

    /**
     * Maximum liability cap in the agreement
     */
    @JsonIgnore
    public JsonNullable<Double> liabilityCapFixedAmount() {
        return liabilityCapFixedAmount;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrencyCode> liabilityCapCurrencyCode() {
        return (JsonNullable<CurrencyCode>) liabilityCapCurrencyCode;
    }

    /**
     * Multiplier applied to calculate the liability cap
     */
    @JsonIgnore
    public JsonNullable<Double> liabilityCapMultiplier() {
        return liabilityCapMultiplier;
    }

    @JsonIgnore
    public JsonNullable<String> liabilityCapDuration() {
        return liabilityCapDuration;
    }

    /**
     * Maximum allowed percentage increase in prices, limited between 0 and 100.
     */
    @JsonIgnore
    public JsonNullable<Float> priceCapPercentIncrease() {
        return priceCapPercentIncrease;
    }

    /**
     * Specifies the type of renewal (e.g., automatic, manual).
     */
    @JsonIgnore
    public JsonNullable<String> renewalType() {
        return renewalType;
    }

    @JsonIgnore
    public JsonNullable<String> renewalNoticePeriod() {
        return renewalNoticePeriod;
    }

    /**
     * Calculated field based on renewal notice period. (agreement expiration date - renewal notice period
     * duration)
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> renewalNoticeDate() {
        return renewalNoticeDate;
    }

    @JsonIgnore
    public JsonNullable<String> autoRenewalTermLength() {
        return autoRenewalTermLength;
    }

    @JsonIgnore
    public JsonNullable<String> renewalExtensionPeriod() {
        return renewalExtensionPeriod;
    }

    /**
     * The userId parameter
     */
    @JsonIgnore
    public Optional<String> renewalProcessOwner() {
        return renewalProcessOwner;
    }

    /**
     * Additional information related to the renewal process.
     */
    @JsonIgnore
    public JsonNullable<String> renewalAdditionalInfo() {
        return renewalAdditionalInfo;
    }

    /**
     * The specific duration that a party has to give notice before terminating the agreement due to a
     * significant breach or violation of terms.
     * This period allows the other party to address the cause or prepare for termination.
     */
    @JsonIgnore
    public JsonNullable<String> terminationPeriodForCause() {
        return terminationPeriodForCause;
    }

    /**
     * Specifies the required notice period that a party must provide before terminating the agreement for
     * convenience, without cause, under the terms outlined in the contract.
     */
    @JsonIgnore
    public JsonNullable<String> terminationPeriodForConvenience() {
        return terminationPeriodForConvenience;
    }

    /**
     * The date when the terms of the agreement start to apply and become legally binding.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> effectiveDate() {
        return effectiveDate;
    }

    /**
     * The date when the agreement ends and is no longer valid or enforceable.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> expirationDate() {
        return expirationDate;
    }

    /**
     * The date when the agreement is signed by all parties, making it officially binding. This is not
     * necessarily the same as the effective date.
     */
    @JsonIgnore
    public JsonNullable<OffsetDateTime> executionDate() {
        return executionDate;
    }

    /**
     * Overall duration of the agreement.
     */
    @JsonIgnore
    public JsonNullable<String> termLength() {
        return termLength;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The type of assignment rights in the agreement (e.g., transferability)
     */
    public Provisions withAssignmentType(String assignmentType) {
        Utils.checkNotNull(assignmentType, "assignmentType");
        this.assignmentType = Optional.ofNullable(assignmentType);
        return this;
    }


    /**
     * The type of assignment rights in the agreement (e.g., transferability)
     */
    public Provisions withAssignmentType(Optional<String> assignmentType) {
        Utils.checkNotNull(assignmentType, "assignmentType");
        this.assignmentType = assignmentType;
        return this;
    }

    /**
     * Provisions related to changes in control of the assigning party
     */
    public Provisions withAssignmentChangeOfControl(String assignmentChangeOfControl) {
        Utils.checkNotNull(assignmentChangeOfControl, "assignmentChangeOfControl");
        this.assignmentChangeOfControl = Optional.ofNullable(assignmentChangeOfControl);
        return this;
    }


    /**
     * Provisions related to changes in control of the assigning party
     */
    public Provisions withAssignmentChangeOfControl(Optional<String> assignmentChangeOfControl) {
        Utils.checkNotNull(assignmentChangeOfControl, "assignmentChangeOfControl");
        this.assignmentChangeOfControl = assignmentChangeOfControl;
        return this;
    }

    /**
     * Provisions for the termination of assignment rights
     */
    public Provisions withAssignmentTerminationRights(String assignmentTerminationRights) {
        Utils.checkNotNull(assignmentTerminationRights, "assignmentTerminationRights");
        this.assignmentTerminationRights = Optional.ofNullable(assignmentTerminationRights);
        return this;
    }


    /**
     * Provisions for the termination of assignment rights
     */
    public Provisions withAssignmentTerminationRights(Optional<String> assignmentTerminationRights) {
        Utils.checkNotNull(assignmentTerminationRights, "assignmentTerminationRights");
        this.assignmentTerminationRights = assignmentTerminationRights;
        return this;
    }

    /**
     * A subset of ISO 8601 duration. Fractional or negative values are not supported.
     */
    public Provisions withConfidentialityObligationPeriod(String confidentialityObligationPeriod) {
        Utils.checkNotNull(confidentialityObligationPeriod, "confidentialityObligationPeriod");
        this.confidentialityObligationPeriod = JsonNullable.of(confidentialityObligationPeriod);
        return this;
    }

    /**
     * A subset of ISO 8601 duration. Fractional or negative values are not supported.
     */
    public Provisions withConfidentialityObligationPeriod(JsonNullable<String> confidentialityObligationPeriod) {
        Utils.checkNotNull(confidentialityObligationPeriod, "confidentialityObligationPeriod");
        this.confidentialityObligationPeriod = confidentialityObligationPeriod;
        return this;
    }

    /**
     * The governing law clause identifies the substantive law that will govern the rights and obligations
     * of the parties to the agreement.
     */
    public Provisions withGoverningLaw(String governingLaw) {
        Utils.checkNotNull(governingLaw, "governingLaw");
        this.governingLaw = JsonNullable.of(governingLaw);
        return this;
    }

    /**
     * The governing law clause identifies the substantive law that will govern the rights and obligations
     * of the parties to the agreement.
     */
    public Provisions withGoverningLaw(JsonNullable<String> governingLaw) {
        Utils.checkNotNull(governingLaw, "governingLaw");
        this.governingLaw = governingLaw;
        return this;
    }

    /**
     * A jurisdiction clause expressly sets out which courts or tribunals have the power to hear a dispute
     * which arises under the agreement.
     */
    public Provisions withJurisdiction(String jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = JsonNullable.of(jurisdiction);
        return this;
    }

    /**
     * A jurisdiction clause expressly sets out which courts or tribunals have the power to hear a dispute
     * which arises under the agreement.
     */
    public Provisions withJurisdiction(JsonNullable<String> jurisdiction) {
        Utils.checkNotNull(jurisdiction, "jurisdiction");
        this.jurisdiction = jurisdiction;
        return this;
    }

    /**
     * Type of non-disclosure agreement (e.g., unilateral, bilateral).
     */
    public Provisions withNdaType(String ndaType) {
        Utils.checkNotNull(ndaType, "ndaType");
        this.ndaType = JsonNullable.of(ndaType);
        return this;
    }

    /**
     * Type of non-disclosure agreement (e.g., unilateral, bilateral).
     */
    public Provisions withNdaType(JsonNullable<String> ndaType) {
        Utils.checkNotNull(ndaType, "ndaType");
        this.ndaType = ndaType;
        return this;
    }

    /**
     * Total annual value of the agreement.
     */
    public Provisions withAnnualAgreementValue(double annualAgreementValue) {
        Utils.checkNotNull(annualAgreementValue, "annualAgreementValue");
        this.annualAgreementValue = JsonNullable.of(annualAgreementValue);
        return this;
    }

    /**
     * Total annual value of the agreement.
     */
    public Provisions withAnnualAgreementValue(JsonNullable<Double> annualAgreementValue) {
        Utils.checkNotNull(annualAgreementValue, "annualAgreementValue");
        this.annualAgreementValue = annualAgreementValue;
        return this;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    public Provisions withAnnualAgreementValueCurrencyCode(CurrencyCode annualAgreementValueCurrencyCode) {
        Utils.checkNotNull(annualAgreementValueCurrencyCode, "annualAgreementValueCurrencyCode");
        this.annualAgreementValueCurrencyCode = JsonNullable.of(annualAgreementValueCurrencyCode);
        return this;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    public Provisions withAnnualAgreementValueCurrencyCode(JsonNullable<? extends CurrencyCode> annualAgreementValueCurrencyCode) {
        Utils.checkNotNull(annualAgreementValueCurrencyCode, "annualAgreementValueCurrencyCode");
        this.annualAgreementValueCurrencyCode = annualAgreementValueCurrencyCode;
        return this;
    }

    /**
     * Total value of the agreement.
     */
    public Provisions withTotalAgreementValue(double totalAgreementValue) {
        Utils.checkNotNull(totalAgreementValue, "totalAgreementValue");
        this.totalAgreementValue = JsonNullable.of(totalAgreementValue);
        return this;
    }

    /**
     * Total value of the agreement.
     */
    public Provisions withTotalAgreementValue(JsonNullable<Double> totalAgreementValue) {
        Utils.checkNotNull(totalAgreementValue, "totalAgreementValue");
        this.totalAgreementValue = totalAgreementValue;
        return this;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    public Provisions withTotalAgreementValueCurrencyCode(CurrencyCode totalAgreementValueCurrencyCode) {
        Utils.checkNotNull(totalAgreementValueCurrencyCode, "totalAgreementValueCurrencyCode");
        this.totalAgreementValueCurrencyCode = JsonNullable.of(totalAgreementValueCurrencyCode);
        return this;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    public Provisions withTotalAgreementValueCurrencyCode(JsonNullable<? extends CurrencyCode> totalAgreementValueCurrencyCode) {
        Utils.checkNotNull(totalAgreementValueCurrencyCode, "totalAgreementValueCurrencyCode");
        this.totalAgreementValueCurrencyCode = totalAgreementValueCurrencyCode;
        return this;
    }

    /**
     * Terms specifying the payment due date, based on a defined number of days or other conditions.
     */
    public Provisions withPaymentTermsDueDate(PaymentTermsDueDate paymentTermsDueDate) {
        Utils.checkNotNull(paymentTermsDueDate, "paymentTermsDueDate");
        this.paymentTermsDueDate = Optional.ofNullable(paymentTermsDueDate);
        return this;
    }


    /**
     * Terms specifying the payment due date, based on a defined number of days or other conditions.
     */
    public Provisions withPaymentTermsDueDate(Optional<? extends PaymentTermsDueDate> paymentTermsDueDate) {
        Utils.checkNotNull(paymentTermsDueDate, "paymentTermsDueDate");
        this.paymentTermsDueDate = paymentTermsDueDate;
        return this;
    }

    /**
     * Indicates if late payment fees can be charged.
     */
    public Provisions withCanChargeLatePaymentFees(boolean canChargeLatePaymentFees) {
        Utils.checkNotNull(canChargeLatePaymentFees, "canChargeLatePaymentFees");
        this.canChargeLatePaymentFees = JsonNullable.of(canChargeLatePaymentFees);
        return this;
    }

    /**
     * Indicates if late payment fees can be charged.
     */
    public Provisions withCanChargeLatePaymentFees(JsonNullable<Boolean> canChargeLatePaymentFees) {
        Utils.checkNotNull(canChargeLatePaymentFees, "canChargeLatePaymentFees");
        this.canChargeLatePaymentFees = canChargeLatePaymentFees;
        return this;
    }

    /**
     * Percentage fee charged on late payments.
     */
    public Provisions withLatePaymentFeePercent(long latePaymentFeePercent) {
        Utils.checkNotNull(latePaymentFeePercent, "latePaymentFeePercent");
        this.latePaymentFeePercent = JsonNullable.of(latePaymentFeePercent);
        return this;
    }

    /**
     * Percentage fee charged on late payments.
     */
    public Provisions withLatePaymentFeePercent(JsonNullable<Long> latePaymentFeePercent) {
        Utils.checkNotNull(latePaymentFeePercent, "latePaymentFeePercent");
        this.latePaymentFeePercent = latePaymentFeePercent;
        return this;
    }

    /**
     * Maximum liability cap in the agreement
     */
    public Provisions withLiabilityCapFixedAmount(double liabilityCapFixedAmount) {
        Utils.checkNotNull(liabilityCapFixedAmount, "liabilityCapFixedAmount");
        this.liabilityCapFixedAmount = JsonNullable.of(liabilityCapFixedAmount);
        return this;
    }

    /**
     * Maximum liability cap in the agreement
     */
    public Provisions withLiabilityCapFixedAmount(JsonNullable<Double> liabilityCapFixedAmount) {
        Utils.checkNotNull(liabilityCapFixedAmount, "liabilityCapFixedAmount");
        this.liabilityCapFixedAmount = liabilityCapFixedAmount;
        return this;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    public Provisions withLiabilityCapCurrencyCode(CurrencyCode liabilityCapCurrencyCode) {
        Utils.checkNotNull(liabilityCapCurrencyCode, "liabilityCapCurrencyCode");
        this.liabilityCapCurrencyCode = JsonNullable.of(liabilityCapCurrencyCode);
        return this;
    }

    /**
     * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
     * https://www.currency-iso.org/en/home/tables/table-a1.html'
     */
    public Provisions withLiabilityCapCurrencyCode(JsonNullable<? extends CurrencyCode> liabilityCapCurrencyCode) {
        Utils.checkNotNull(liabilityCapCurrencyCode, "liabilityCapCurrencyCode");
        this.liabilityCapCurrencyCode = liabilityCapCurrencyCode;
        return this;
    }

    /**
     * Multiplier applied to calculate the liability cap
     */
    public Provisions withLiabilityCapMultiplier(double liabilityCapMultiplier) {
        Utils.checkNotNull(liabilityCapMultiplier, "liabilityCapMultiplier");
        this.liabilityCapMultiplier = JsonNullable.of(liabilityCapMultiplier);
        return this;
    }

    /**
     * Multiplier applied to calculate the liability cap
     */
    public Provisions withLiabilityCapMultiplier(JsonNullable<Double> liabilityCapMultiplier) {
        Utils.checkNotNull(liabilityCapMultiplier, "liabilityCapMultiplier");
        this.liabilityCapMultiplier = liabilityCapMultiplier;
        return this;
    }

    public Provisions withLiabilityCapDuration(String liabilityCapDuration) {
        Utils.checkNotNull(liabilityCapDuration, "liabilityCapDuration");
        this.liabilityCapDuration = JsonNullable.of(liabilityCapDuration);
        return this;
    }

    public Provisions withLiabilityCapDuration(JsonNullable<String> liabilityCapDuration) {
        Utils.checkNotNull(liabilityCapDuration, "liabilityCapDuration");
        this.liabilityCapDuration = liabilityCapDuration;
        return this;
    }

    /**
     * Maximum allowed percentage increase in prices, limited between 0 and 100.
     */
    public Provisions withPriceCapPercentIncrease(float priceCapPercentIncrease) {
        Utils.checkNotNull(priceCapPercentIncrease, "priceCapPercentIncrease");
        this.priceCapPercentIncrease = JsonNullable.of(priceCapPercentIncrease);
        return this;
    }

    /**
     * Maximum allowed percentage increase in prices, limited between 0 and 100.
     */
    public Provisions withPriceCapPercentIncrease(JsonNullable<Float> priceCapPercentIncrease) {
        Utils.checkNotNull(priceCapPercentIncrease, "priceCapPercentIncrease");
        this.priceCapPercentIncrease = priceCapPercentIncrease;
        return this;
    }

    /**
     * Specifies the type of renewal (e.g., automatic, manual).
     */
    public Provisions withRenewalType(String renewalType) {
        Utils.checkNotNull(renewalType, "renewalType");
        this.renewalType = JsonNullable.of(renewalType);
        return this;
    }

    /**
     * Specifies the type of renewal (e.g., automatic, manual).
     */
    public Provisions withRenewalType(JsonNullable<String> renewalType) {
        Utils.checkNotNull(renewalType, "renewalType");
        this.renewalType = renewalType;
        return this;
    }

    public Provisions withRenewalNoticePeriod(String renewalNoticePeriod) {
        Utils.checkNotNull(renewalNoticePeriod, "renewalNoticePeriod");
        this.renewalNoticePeriod = JsonNullable.of(renewalNoticePeriod);
        return this;
    }

    public Provisions withRenewalNoticePeriod(JsonNullable<String> renewalNoticePeriod) {
        Utils.checkNotNull(renewalNoticePeriod, "renewalNoticePeriod");
        this.renewalNoticePeriod = renewalNoticePeriod;
        return this;
    }

    /**
     * Calculated field based on renewal notice period. (agreement expiration date - renewal notice period
     * duration)
     */
    public Provisions withRenewalNoticeDate(OffsetDateTime renewalNoticeDate) {
        Utils.checkNotNull(renewalNoticeDate, "renewalNoticeDate");
        this.renewalNoticeDate = JsonNullable.of(renewalNoticeDate);
        return this;
    }

    /**
     * Calculated field based on renewal notice period. (agreement expiration date - renewal notice period
     * duration)
     */
    public Provisions withRenewalNoticeDate(JsonNullable<OffsetDateTime> renewalNoticeDate) {
        Utils.checkNotNull(renewalNoticeDate, "renewalNoticeDate");
        this.renewalNoticeDate = renewalNoticeDate;
        return this;
    }

    public Provisions withAutoRenewalTermLength(String autoRenewalTermLength) {
        Utils.checkNotNull(autoRenewalTermLength, "autoRenewalTermLength");
        this.autoRenewalTermLength = JsonNullable.of(autoRenewalTermLength);
        return this;
    }

    public Provisions withAutoRenewalTermLength(JsonNullable<String> autoRenewalTermLength) {
        Utils.checkNotNull(autoRenewalTermLength, "autoRenewalTermLength");
        this.autoRenewalTermLength = autoRenewalTermLength;
        return this;
    }

    public Provisions withRenewalExtensionPeriod(String renewalExtensionPeriod) {
        Utils.checkNotNull(renewalExtensionPeriod, "renewalExtensionPeriod");
        this.renewalExtensionPeriod = JsonNullable.of(renewalExtensionPeriod);
        return this;
    }

    public Provisions withRenewalExtensionPeriod(JsonNullable<String> renewalExtensionPeriod) {
        Utils.checkNotNull(renewalExtensionPeriod, "renewalExtensionPeriod");
        this.renewalExtensionPeriod = renewalExtensionPeriod;
        return this;
    }

    /**
     * The userId parameter
     */
    public Provisions withRenewalProcessOwner(String renewalProcessOwner) {
        Utils.checkNotNull(renewalProcessOwner, "renewalProcessOwner");
        this.renewalProcessOwner = Optional.ofNullable(renewalProcessOwner);
        return this;
    }


    /**
     * The userId parameter
     */
    public Provisions withRenewalProcessOwner(Optional<String> renewalProcessOwner) {
        Utils.checkNotNull(renewalProcessOwner, "renewalProcessOwner");
        this.renewalProcessOwner = renewalProcessOwner;
        return this;
    }

    /**
     * Additional information related to the renewal process.
     */
    public Provisions withRenewalAdditionalInfo(String renewalAdditionalInfo) {
        Utils.checkNotNull(renewalAdditionalInfo, "renewalAdditionalInfo");
        this.renewalAdditionalInfo = JsonNullable.of(renewalAdditionalInfo);
        return this;
    }

    /**
     * Additional information related to the renewal process.
     */
    public Provisions withRenewalAdditionalInfo(JsonNullable<String> renewalAdditionalInfo) {
        Utils.checkNotNull(renewalAdditionalInfo, "renewalAdditionalInfo");
        this.renewalAdditionalInfo = renewalAdditionalInfo;
        return this;
    }

    /**
     * The specific duration that a party has to give notice before terminating the agreement due to a
     * significant breach or violation of terms.
     * This period allows the other party to address the cause or prepare for termination.
     */
    public Provisions withTerminationPeriodForCause(String terminationPeriodForCause) {
        Utils.checkNotNull(terminationPeriodForCause, "terminationPeriodForCause");
        this.terminationPeriodForCause = JsonNullable.of(terminationPeriodForCause);
        return this;
    }

    /**
     * The specific duration that a party has to give notice before terminating the agreement due to a
     * significant breach or violation of terms.
     * This period allows the other party to address the cause or prepare for termination.
     */
    public Provisions withTerminationPeriodForCause(JsonNullable<String> terminationPeriodForCause) {
        Utils.checkNotNull(terminationPeriodForCause, "terminationPeriodForCause");
        this.terminationPeriodForCause = terminationPeriodForCause;
        return this;
    }

    /**
     * Specifies the required notice period that a party must provide before terminating the agreement for
     * convenience, without cause, under the terms outlined in the contract.
     */
    public Provisions withTerminationPeriodForConvenience(String terminationPeriodForConvenience) {
        Utils.checkNotNull(terminationPeriodForConvenience, "terminationPeriodForConvenience");
        this.terminationPeriodForConvenience = JsonNullable.of(terminationPeriodForConvenience);
        return this;
    }

    /**
     * Specifies the required notice period that a party must provide before terminating the agreement for
     * convenience, without cause, under the terms outlined in the contract.
     */
    public Provisions withTerminationPeriodForConvenience(JsonNullable<String> terminationPeriodForConvenience) {
        Utils.checkNotNull(terminationPeriodForConvenience, "terminationPeriodForConvenience");
        this.terminationPeriodForConvenience = terminationPeriodForConvenience;
        return this;
    }

    /**
     * The date when the terms of the agreement start to apply and become legally binding.
     */
    public Provisions withEffectiveDate(OffsetDateTime effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = JsonNullable.of(effectiveDate);
        return this;
    }

    /**
     * The date when the terms of the agreement start to apply and become legally binding.
     */
    public Provisions withEffectiveDate(JsonNullable<OffsetDateTime> effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * The date when the agreement ends and is no longer valid or enforceable.
     */
    public Provisions withExpirationDate(OffsetDateTime expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = JsonNullable.of(expirationDate);
        return this;
    }

    /**
     * The date when the agreement ends and is no longer valid or enforceable.
     */
    public Provisions withExpirationDate(JsonNullable<OffsetDateTime> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The date when the agreement is signed by all parties, making it officially binding. This is not
     * necessarily the same as the effective date.
     */
    public Provisions withExecutionDate(OffsetDateTime executionDate) {
        Utils.checkNotNull(executionDate, "executionDate");
        this.executionDate = JsonNullable.of(executionDate);
        return this;
    }

    /**
     * The date when the agreement is signed by all parties, making it officially binding. This is not
     * necessarily the same as the effective date.
     */
    public Provisions withExecutionDate(JsonNullable<OffsetDateTime> executionDate) {
        Utils.checkNotNull(executionDate, "executionDate");
        this.executionDate = executionDate;
        return this;
    }

    /**
     * Overall duration of the agreement.
     */
    public Provisions withTermLength(String termLength) {
        Utils.checkNotNull(termLength, "termLength");
        this.termLength = JsonNullable.of(termLength);
        return this;
    }

    /**
     * Overall duration of the agreement.
     */
    public Provisions withTermLength(JsonNullable<String> termLength) {
        Utils.checkNotNull(termLength, "termLength");
        this.termLength = termLength;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Provisions other = (Provisions) o;
        return 
            Utils.enhancedDeepEquals(this.assignmentType, other.assignmentType) &&
            Utils.enhancedDeepEquals(this.assignmentChangeOfControl, other.assignmentChangeOfControl) &&
            Utils.enhancedDeepEquals(this.assignmentTerminationRights, other.assignmentTerminationRights) &&
            Utils.enhancedDeepEquals(this.confidentialityObligationPeriod, other.confidentialityObligationPeriod) &&
            Utils.enhancedDeepEquals(this.governingLaw, other.governingLaw) &&
            Utils.enhancedDeepEquals(this.jurisdiction, other.jurisdiction) &&
            Utils.enhancedDeepEquals(this.ndaType, other.ndaType) &&
            Utils.enhancedDeepEquals(this.annualAgreementValue, other.annualAgreementValue) &&
            Utils.enhancedDeepEquals(this.annualAgreementValueCurrencyCode, other.annualAgreementValueCurrencyCode) &&
            Utils.enhancedDeepEquals(this.totalAgreementValue, other.totalAgreementValue) &&
            Utils.enhancedDeepEquals(this.totalAgreementValueCurrencyCode, other.totalAgreementValueCurrencyCode) &&
            Utils.enhancedDeepEquals(this.paymentTermsDueDate, other.paymentTermsDueDate) &&
            Utils.enhancedDeepEquals(this.canChargeLatePaymentFees, other.canChargeLatePaymentFees) &&
            Utils.enhancedDeepEquals(this.latePaymentFeePercent, other.latePaymentFeePercent) &&
            Utils.enhancedDeepEquals(this.liabilityCapFixedAmount, other.liabilityCapFixedAmount) &&
            Utils.enhancedDeepEquals(this.liabilityCapCurrencyCode, other.liabilityCapCurrencyCode) &&
            Utils.enhancedDeepEquals(this.liabilityCapMultiplier, other.liabilityCapMultiplier) &&
            Utils.enhancedDeepEquals(this.liabilityCapDuration, other.liabilityCapDuration) &&
            Utils.enhancedDeepEquals(this.priceCapPercentIncrease, other.priceCapPercentIncrease) &&
            Utils.enhancedDeepEquals(this.renewalType, other.renewalType) &&
            Utils.enhancedDeepEquals(this.renewalNoticePeriod, other.renewalNoticePeriod) &&
            Utils.enhancedDeepEquals(this.renewalNoticeDate, other.renewalNoticeDate) &&
            Utils.enhancedDeepEquals(this.autoRenewalTermLength, other.autoRenewalTermLength) &&
            Utils.enhancedDeepEquals(this.renewalExtensionPeriod, other.renewalExtensionPeriod) &&
            Utils.enhancedDeepEquals(this.renewalProcessOwner, other.renewalProcessOwner) &&
            Utils.enhancedDeepEquals(this.renewalAdditionalInfo, other.renewalAdditionalInfo) &&
            Utils.enhancedDeepEquals(this.terminationPeriodForCause, other.terminationPeriodForCause) &&
            Utils.enhancedDeepEquals(this.terminationPeriodForConvenience, other.terminationPeriodForConvenience) &&
            Utils.enhancedDeepEquals(this.effectiveDate, other.effectiveDate) &&
            Utils.enhancedDeepEquals(this.expirationDate, other.expirationDate) &&
            Utils.enhancedDeepEquals(this.executionDate, other.executionDate) &&
            Utils.enhancedDeepEquals(this.termLength, other.termLength);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            assignmentType, assignmentChangeOfControl, assignmentTerminationRights,
            confidentialityObligationPeriod, governingLaw, jurisdiction,
            ndaType, annualAgreementValue, annualAgreementValueCurrencyCode,
            totalAgreementValue, totalAgreementValueCurrencyCode, paymentTermsDueDate,
            canChargeLatePaymentFees, latePaymentFeePercent, liabilityCapFixedAmount,
            liabilityCapCurrencyCode, liabilityCapMultiplier, liabilityCapDuration,
            priceCapPercentIncrease, renewalType, renewalNoticePeriod,
            renewalNoticeDate, autoRenewalTermLength, renewalExtensionPeriod,
            renewalProcessOwner, renewalAdditionalInfo, terminationPeriodForCause,
            terminationPeriodForConvenience, effectiveDate, expirationDate,
            executionDate, termLength);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Provisions.class,
                "assignmentType", assignmentType,
                "assignmentChangeOfControl", assignmentChangeOfControl,
                "assignmentTerminationRights", assignmentTerminationRights,
                "confidentialityObligationPeriod", confidentialityObligationPeriod,
                "governingLaw", governingLaw,
                "jurisdiction", jurisdiction,
                "ndaType", ndaType,
                "annualAgreementValue", annualAgreementValue,
                "annualAgreementValueCurrencyCode", annualAgreementValueCurrencyCode,
                "totalAgreementValue", totalAgreementValue,
                "totalAgreementValueCurrencyCode", totalAgreementValueCurrencyCode,
                "paymentTermsDueDate", paymentTermsDueDate,
                "canChargeLatePaymentFees", canChargeLatePaymentFees,
                "latePaymentFeePercent", latePaymentFeePercent,
                "liabilityCapFixedAmount", liabilityCapFixedAmount,
                "liabilityCapCurrencyCode", liabilityCapCurrencyCode,
                "liabilityCapMultiplier", liabilityCapMultiplier,
                "liabilityCapDuration", liabilityCapDuration,
                "priceCapPercentIncrease", priceCapPercentIncrease,
                "renewalType", renewalType,
                "renewalNoticePeriod", renewalNoticePeriod,
                "renewalNoticeDate", renewalNoticeDate,
                "autoRenewalTermLength", autoRenewalTermLength,
                "renewalExtensionPeriod", renewalExtensionPeriod,
                "renewalProcessOwner", renewalProcessOwner,
                "renewalAdditionalInfo", renewalAdditionalInfo,
                "terminationPeriodForCause", terminationPeriodForCause,
                "terminationPeriodForConvenience", terminationPeriodForConvenience,
                "effectiveDate", effectiveDate,
                "expirationDate", expirationDate,
                "executionDate", executionDate,
                "termLength", termLength);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> assignmentType = Optional.empty();

        private Optional<String> assignmentChangeOfControl = Optional.empty();

        private Optional<String> assignmentTerminationRights = Optional.empty();

        private JsonNullable<String> confidentialityObligationPeriod = JsonNullable.undefined();

        private JsonNullable<String> governingLaw = JsonNullable.undefined();

        private JsonNullable<String> jurisdiction = JsonNullable.undefined();

        private JsonNullable<String> ndaType = JsonNullable.undefined();

        private JsonNullable<Double> annualAgreementValue = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyCode> annualAgreementValueCurrencyCode = JsonNullable.undefined();

        private JsonNullable<Double> totalAgreementValue = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyCode> totalAgreementValueCurrencyCode = JsonNullable.undefined();

        private Optional<? extends PaymentTermsDueDate> paymentTermsDueDate;

        private JsonNullable<Boolean> canChargeLatePaymentFees = JsonNullable.undefined();

        private JsonNullable<Long> latePaymentFeePercent = JsonNullable.undefined();

        private JsonNullable<Double> liabilityCapFixedAmount = JsonNullable.undefined();

        private JsonNullable<? extends CurrencyCode> liabilityCapCurrencyCode = JsonNullable.undefined();

        private JsonNullable<Double> liabilityCapMultiplier = JsonNullable.undefined();

        private JsonNullable<String> liabilityCapDuration = JsonNullable.undefined();

        private JsonNullable<Float> priceCapPercentIncrease = JsonNullable.undefined();

        private JsonNullable<String> renewalType = JsonNullable.undefined();

        private JsonNullable<String> renewalNoticePeriod = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> renewalNoticeDate = JsonNullable.undefined();

        private JsonNullable<String> autoRenewalTermLength = JsonNullable.undefined();

        private JsonNullable<String> renewalExtensionPeriod = JsonNullable.undefined();

        private Optional<String> renewalProcessOwner = Optional.empty();

        private JsonNullable<String> renewalAdditionalInfo = JsonNullable.undefined();

        private JsonNullable<String> terminationPeriodForCause = JsonNullable.undefined();

        private JsonNullable<String> terminationPeriodForConvenience = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> effectiveDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> expirationDate = JsonNullable.undefined();

        private JsonNullable<OffsetDateTime> executionDate = JsonNullable.undefined();

        private JsonNullable<String> termLength = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The type of assignment rights in the agreement (e.g., transferability)
         */
        public Builder assignmentType(String assignmentType) {
            Utils.checkNotNull(assignmentType, "assignmentType");
            this.assignmentType = Optional.ofNullable(assignmentType);
            return this;
        }

        /**
         * The type of assignment rights in the agreement (e.g., transferability)
         */
        public Builder assignmentType(Optional<String> assignmentType) {
            Utils.checkNotNull(assignmentType, "assignmentType");
            this.assignmentType = assignmentType;
            return this;
        }


        /**
         * Provisions related to changes in control of the assigning party
         */
        public Builder assignmentChangeOfControl(String assignmentChangeOfControl) {
            Utils.checkNotNull(assignmentChangeOfControl, "assignmentChangeOfControl");
            this.assignmentChangeOfControl = Optional.ofNullable(assignmentChangeOfControl);
            return this;
        }

        /**
         * Provisions related to changes in control of the assigning party
         */
        public Builder assignmentChangeOfControl(Optional<String> assignmentChangeOfControl) {
            Utils.checkNotNull(assignmentChangeOfControl, "assignmentChangeOfControl");
            this.assignmentChangeOfControl = assignmentChangeOfControl;
            return this;
        }


        /**
         * Provisions for the termination of assignment rights
         */
        public Builder assignmentTerminationRights(String assignmentTerminationRights) {
            Utils.checkNotNull(assignmentTerminationRights, "assignmentTerminationRights");
            this.assignmentTerminationRights = Optional.ofNullable(assignmentTerminationRights);
            return this;
        }

        /**
         * Provisions for the termination of assignment rights
         */
        public Builder assignmentTerminationRights(Optional<String> assignmentTerminationRights) {
            Utils.checkNotNull(assignmentTerminationRights, "assignmentTerminationRights");
            this.assignmentTerminationRights = assignmentTerminationRights;
            return this;
        }


        /**
         * A subset of ISO 8601 duration. Fractional or negative values are not supported.
         */
        public Builder confidentialityObligationPeriod(String confidentialityObligationPeriod) {
            Utils.checkNotNull(confidentialityObligationPeriod, "confidentialityObligationPeriod");
            this.confidentialityObligationPeriod = JsonNullable.of(confidentialityObligationPeriod);
            return this;
        }

        /**
         * A subset of ISO 8601 duration. Fractional or negative values are not supported.
         */
        public Builder confidentialityObligationPeriod(JsonNullable<String> confidentialityObligationPeriod) {
            Utils.checkNotNull(confidentialityObligationPeriod, "confidentialityObligationPeriod");
            this.confidentialityObligationPeriod = confidentialityObligationPeriod;
            return this;
        }


        /**
         * The governing law clause identifies the substantive law that will govern the rights and obligations
         * of the parties to the agreement.
         */
        public Builder governingLaw(String governingLaw) {
            Utils.checkNotNull(governingLaw, "governingLaw");
            this.governingLaw = JsonNullable.of(governingLaw);
            return this;
        }

        /**
         * The governing law clause identifies the substantive law that will govern the rights and obligations
         * of the parties to the agreement.
         */
        public Builder governingLaw(JsonNullable<String> governingLaw) {
            Utils.checkNotNull(governingLaw, "governingLaw");
            this.governingLaw = governingLaw;
            return this;
        }


        /**
         * A jurisdiction clause expressly sets out which courts or tribunals have the power to hear a dispute
         * which arises under the agreement.
         */
        public Builder jurisdiction(String jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = JsonNullable.of(jurisdiction);
            return this;
        }

        /**
         * A jurisdiction clause expressly sets out which courts or tribunals have the power to hear a dispute
         * which arises under the agreement.
         */
        public Builder jurisdiction(JsonNullable<String> jurisdiction) {
            Utils.checkNotNull(jurisdiction, "jurisdiction");
            this.jurisdiction = jurisdiction;
            return this;
        }


        /**
         * Type of non-disclosure agreement (e.g., unilateral, bilateral).
         */
        public Builder ndaType(String ndaType) {
            Utils.checkNotNull(ndaType, "ndaType");
            this.ndaType = JsonNullable.of(ndaType);
            return this;
        }

        /**
         * Type of non-disclosure agreement (e.g., unilateral, bilateral).
         */
        public Builder ndaType(JsonNullable<String> ndaType) {
            Utils.checkNotNull(ndaType, "ndaType");
            this.ndaType = ndaType;
            return this;
        }


        /**
         * Total annual value of the agreement.
         */
        public Builder annualAgreementValue(double annualAgreementValue) {
            Utils.checkNotNull(annualAgreementValue, "annualAgreementValue");
            this.annualAgreementValue = JsonNullable.of(annualAgreementValue);
            return this;
        }

        /**
         * Total annual value of the agreement.
         */
        public Builder annualAgreementValue(JsonNullable<Double> annualAgreementValue) {
            Utils.checkNotNull(annualAgreementValue, "annualAgreementValue");
            this.annualAgreementValue = annualAgreementValue;
            return this;
        }


        /**
         * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
         * https://www.currency-iso.org/en/home/tables/table-a1.html'
         */
        public Builder annualAgreementValueCurrencyCode(CurrencyCode annualAgreementValueCurrencyCode) {
            Utils.checkNotNull(annualAgreementValueCurrencyCode, "annualAgreementValueCurrencyCode");
            this.annualAgreementValueCurrencyCode = JsonNullable.of(annualAgreementValueCurrencyCode);
            return this;
        }

        /**
         * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
         * https://www.currency-iso.org/en/home/tables/table-a1.html'
         */
        public Builder annualAgreementValueCurrencyCode(JsonNullable<? extends CurrencyCode> annualAgreementValueCurrencyCode) {
            Utils.checkNotNull(annualAgreementValueCurrencyCode, "annualAgreementValueCurrencyCode");
            this.annualAgreementValueCurrencyCode = annualAgreementValueCurrencyCode;
            return this;
        }


        /**
         * Total value of the agreement.
         */
        public Builder totalAgreementValue(double totalAgreementValue) {
            Utils.checkNotNull(totalAgreementValue, "totalAgreementValue");
            this.totalAgreementValue = JsonNullable.of(totalAgreementValue);
            return this;
        }

        /**
         * Total value of the agreement.
         */
        public Builder totalAgreementValue(JsonNullable<Double> totalAgreementValue) {
            Utils.checkNotNull(totalAgreementValue, "totalAgreementValue");
            this.totalAgreementValue = totalAgreementValue;
            return this;
        }


        /**
         * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
         * https://www.currency-iso.org/en/home/tables/table-a1.html'
         */
        public Builder totalAgreementValueCurrencyCode(CurrencyCode totalAgreementValueCurrencyCode) {
            Utils.checkNotNull(totalAgreementValueCurrencyCode, "totalAgreementValueCurrencyCode");
            this.totalAgreementValueCurrencyCode = JsonNullable.of(totalAgreementValueCurrencyCode);
            return this;
        }

        /**
         * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
         * https://www.currency-iso.org/en/home/tables/table-a1.html'
         */
        public Builder totalAgreementValueCurrencyCode(JsonNullable<? extends CurrencyCode> totalAgreementValueCurrencyCode) {
            Utils.checkNotNull(totalAgreementValueCurrencyCode, "totalAgreementValueCurrencyCode");
            this.totalAgreementValueCurrencyCode = totalAgreementValueCurrencyCode;
            return this;
        }


        /**
         * Terms specifying the payment due date, based on a defined number of days or other conditions.
         */
        public Builder paymentTermsDueDate(PaymentTermsDueDate paymentTermsDueDate) {
            Utils.checkNotNull(paymentTermsDueDate, "paymentTermsDueDate");
            this.paymentTermsDueDate = Optional.ofNullable(paymentTermsDueDate);
            return this;
        }

        /**
         * Terms specifying the payment due date, based on a defined number of days or other conditions.
         */
        public Builder paymentTermsDueDate(Optional<? extends PaymentTermsDueDate> paymentTermsDueDate) {
            Utils.checkNotNull(paymentTermsDueDate, "paymentTermsDueDate");
            this.paymentTermsDueDate = paymentTermsDueDate;
            return this;
        }


        /**
         * Indicates if late payment fees can be charged.
         */
        public Builder canChargeLatePaymentFees(boolean canChargeLatePaymentFees) {
            Utils.checkNotNull(canChargeLatePaymentFees, "canChargeLatePaymentFees");
            this.canChargeLatePaymentFees = JsonNullable.of(canChargeLatePaymentFees);
            return this;
        }

        /**
         * Indicates if late payment fees can be charged.
         */
        public Builder canChargeLatePaymentFees(JsonNullable<Boolean> canChargeLatePaymentFees) {
            Utils.checkNotNull(canChargeLatePaymentFees, "canChargeLatePaymentFees");
            this.canChargeLatePaymentFees = canChargeLatePaymentFees;
            return this;
        }


        /**
         * Percentage fee charged on late payments.
         */
        public Builder latePaymentFeePercent(long latePaymentFeePercent) {
            Utils.checkNotNull(latePaymentFeePercent, "latePaymentFeePercent");
            this.latePaymentFeePercent = JsonNullable.of(latePaymentFeePercent);
            return this;
        }

        /**
         * Percentage fee charged on late payments.
         */
        public Builder latePaymentFeePercent(JsonNullable<Long> latePaymentFeePercent) {
            Utils.checkNotNull(latePaymentFeePercent, "latePaymentFeePercent");
            this.latePaymentFeePercent = latePaymentFeePercent;
            return this;
        }


        /**
         * Maximum liability cap in the agreement
         */
        public Builder liabilityCapFixedAmount(double liabilityCapFixedAmount) {
            Utils.checkNotNull(liabilityCapFixedAmount, "liabilityCapFixedAmount");
            this.liabilityCapFixedAmount = JsonNullable.of(liabilityCapFixedAmount);
            return this;
        }

        /**
         * Maximum liability cap in the agreement
         */
        public Builder liabilityCapFixedAmount(JsonNullable<Double> liabilityCapFixedAmount) {
            Utils.checkNotNull(liabilityCapFixedAmount, "liabilityCapFixedAmount");
            this.liabilityCapFixedAmount = liabilityCapFixedAmount;
            return this;
        }


        /**
         * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
         * https://www.currency-iso.org/en/home/tables/table-a1.html'
         */
        public Builder liabilityCapCurrencyCode(CurrencyCode liabilityCapCurrencyCode) {
            Utils.checkNotNull(liabilityCapCurrencyCode, "liabilityCapCurrencyCode");
            this.liabilityCapCurrencyCode = JsonNullable.of(liabilityCapCurrencyCode);
            return this;
        }

        /**
         * 'ISO 4217 codes. From https://en.wikipedia.org/wiki/ISO_4217
         * https://www.currency-iso.org/en/home/tables/table-a1.html'
         */
        public Builder liabilityCapCurrencyCode(JsonNullable<? extends CurrencyCode> liabilityCapCurrencyCode) {
            Utils.checkNotNull(liabilityCapCurrencyCode, "liabilityCapCurrencyCode");
            this.liabilityCapCurrencyCode = liabilityCapCurrencyCode;
            return this;
        }


        /**
         * Multiplier applied to calculate the liability cap
         */
        public Builder liabilityCapMultiplier(double liabilityCapMultiplier) {
            Utils.checkNotNull(liabilityCapMultiplier, "liabilityCapMultiplier");
            this.liabilityCapMultiplier = JsonNullable.of(liabilityCapMultiplier);
            return this;
        }

        /**
         * Multiplier applied to calculate the liability cap
         */
        public Builder liabilityCapMultiplier(JsonNullable<Double> liabilityCapMultiplier) {
            Utils.checkNotNull(liabilityCapMultiplier, "liabilityCapMultiplier");
            this.liabilityCapMultiplier = liabilityCapMultiplier;
            return this;
        }


        public Builder liabilityCapDuration(String liabilityCapDuration) {
            Utils.checkNotNull(liabilityCapDuration, "liabilityCapDuration");
            this.liabilityCapDuration = JsonNullable.of(liabilityCapDuration);
            return this;
        }

        public Builder liabilityCapDuration(JsonNullable<String> liabilityCapDuration) {
            Utils.checkNotNull(liabilityCapDuration, "liabilityCapDuration");
            this.liabilityCapDuration = liabilityCapDuration;
            return this;
        }


        /**
         * Maximum allowed percentage increase in prices, limited between 0 and 100.
         */
        public Builder priceCapPercentIncrease(float priceCapPercentIncrease) {
            Utils.checkNotNull(priceCapPercentIncrease, "priceCapPercentIncrease");
            this.priceCapPercentIncrease = JsonNullable.of(priceCapPercentIncrease);
            return this;
        }

        /**
         * Maximum allowed percentage increase in prices, limited between 0 and 100.
         */
        public Builder priceCapPercentIncrease(JsonNullable<Float> priceCapPercentIncrease) {
            Utils.checkNotNull(priceCapPercentIncrease, "priceCapPercentIncrease");
            this.priceCapPercentIncrease = priceCapPercentIncrease;
            return this;
        }


        /**
         * Specifies the type of renewal (e.g., automatic, manual).
         */
        public Builder renewalType(String renewalType) {
            Utils.checkNotNull(renewalType, "renewalType");
            this.renewalType = JsonNullable.of(renewalType);
            return this;
        }

        /**
         * Specifies the type of renewal (e.g., automatic, manual).
         */
        public Builder renewalType(JsonNullable<String> renewalType) {
            Utils.checkNotNull(renewalType, "renewalType");
            this.renewalType = renewalType;
            return this;
        }


        public Builder renewalNoticePeriod(String renewalNoticePeriod) {
            Utils.checkNotNull(renewalNoticePeriod, "renewalNoticePeriod");
            this.renewalNoticePeriod = JsonNullable.of(renewalNoticePeriod);
            return this;
        }

        public Builder renewalNoticePeriod(JsonNullable<String> renewalNoticePeriod) {
            Utils.checkNotNull(renewalNoticePeriod, "renewalNoticePeriod");
            this.renewalNoticePeriod = renewalNoticePeriod;
            return this;
        }


        /**
         * Calculated field based on renewal notice period. (agreement expiration date - renewal notice period
         * duration)
         */
        public Builder renewalNoticeDate(OffsetDateTime renewalNoticeDate) {
            Utils.checkNotNull(renewalNoticeDate, "renewalNoticeDate");
            this.renewalNoticeDate = JsonNullable.of(renewalNoticeDate);
            return this;
        }

        /**
         * Calculated field based on renewal notice period. (agreement expiration date - renewal notice period
         * duration)
         */
        public Builder renewalNoticeDate(JsonNullable<OffsetDateTime> renewalNoticeDate) {
            Utils.checkNotNull(renewalNoticeDate, "renewalNoticeDate");
            this.renewalNoticeDate = renewalNoticeDate;
            return this;
        }


        public Builder autoRenewalTermLength(String autoRenewalTermLength) {
            Utils.checkNotNull(autoRenewalTermLength, "autoRenewalTermLength");
            this.autoRenewalTermLength = JsonNullable.of(autoRenewalTermLength);
            return this;
        }

        public Builder autoRenewalTermLength(JsonNullable<String> autoRenewalTermLength) {
            Utils.checkNotNull(autoRenewalTermLength, "autoRenewalTermLength");
            this.autoRenewalTermLength = autoRenewalTermLength;
            return this;
        }


        public Builder renewalExtensionPeriod(String renewalExtensionPeriod) {
            Utils.checkNotNull(renewalExtensionPeriod, "renewalExtensionPeriod");
            this.renewalExtensionPeriod = JsonNullable.of(renewalExtensionPeriod);
            return this;
        }

        public Builder renewalExtensionPeriod(JsonNullable<String> renewalExtensionPeriod) {
            Utils.checkNotNull(renewalExtensionPeriod, "renewalExtensionPeriod");
            this.renewalExtensionPeriod = renewalExtensionPeriod;
            return this;
        }


        /**
         * The userId parameter
         */
        public Builder renewalProcessOwner(String renewalProcessOwner) {
            Utils.checkNotNull(renewalProcessOwner, "renewalProcessOwner");
            this.renewalProcessOwner = Optional.ofNullable(renewalProcessOwner);
            return this;
        }

        /**
         * The userId parameter
         */
        public Builder renewalProcessOwner(Optional<String> renewalProcessOwner) {
            Utils.checkNotNull(renewalProcessOwner, "renewalProcessOwner");
            this.renewalProcessOwner = renewalProcessOwner;
            return this;
        }


        /**
         * Additional information related to the renewal process.
         */
        public Builder renewalAdditionalInfo(String renewalAdditionalInfo) {
            Utils.checkNotNull(renewalAdditionalInfo, "renewalAdditionalInfo");
            this.renewalAdditionalInfo = JsonNullable.of(renewalAdditionalInfo);
            return this;
        }

        /**
         * Additional information related to the renewal process.
         */
        public Builder renewalAdditionalInfo(JsonNullable<String> renewalAdditionalInfo) {
            Utils.checkNotNull(renewalAdditionalInfo, "renewalAdditionalInfo");
            this.renewalAdditionalInfo = renewalAdditionalInfo;
            return this;
        }


        /**
         * The specific duration that a party has to give notice before terminating the agreement due to a
         * significant breach or violation of terms.
         * This period allows the other party to address the cause or prepare for termination.
         */
        public Builder terminationPeriodForCause(String terminationPeriodForCause) {
            Utils.checkNotNull(terminationPeriodForCause, "terminationPeriodForCause");
            this.terminationPeriodForCause = JsonNullable.of(terminationPeriodForCause);
            return this;
        }

        /**
         * The specific duration that a party has to give notice before terminating the agreement due to a
         * significant breach or violation of terms.
         * This period allows the other party to address the cause or prepare for termination.
         */
        public Builder terminationPeriodForCause(JsonNullable<String> terminationPeriodForCause) {
            Utils.checkNotNull(terminationPeriodForCause, "terminationPeriodForCause");
            this.terminationPeriodForCause = terminationPeriodForCause;
            return this;
        }


        /**
         * Specifies the required notice period that a party must provide before terminating the agreement for
         * convenience, without cause, under the terms outlined in the contract.
         */
        public Builder terminationPeriodForConvenience(String terminationPeriodForConvenience) {
            Utils.checkNotNull(terminationPeriodForConvenience, "terminationPeriodForConvenience");
            this.terminationPeriodForConvenience = JsonNullable.of(terminationPeriodForConvenience);
            return this;
        }

        /**
         * Specifies the required notice period that a party must provide before terminating the agreement for
         * convenience, without cause, under the terms outlined in the contract.
         */
        public Builder terminationPeriodForConvenience(JsonNullable<String> terminationPeriodForConvenience) {
            Utils.checkNotNull(terminationPeriodForConvenience, "terminationPeriodForConvenience");
            this.terminationPeriodForConvenience = terminationPeriodForConvenience;
            return this;
        }


        /**
         * The date when the terms of the agreement start to apply and become legally binding.
         */
        public Builder effectiveDate(OffsetDateTime effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = JsonNullable.of(effectiveDate);
            return this;
        }

        /**
         * The date when the terms of the agreement start to apply and become legally binding.
         */
        public Builder effectiveDate(JsonNullable<OffsetDateTime> effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }


        /**
         * The date when the agreement ends and is no longer valid or enforceable.
         */
        public Builder expirationDate(OffsetDateTime expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = JsonNullable.of(expirationDate);
            return this;
        }

        /**
         * The date when the agreement ends and is no longer valid or enforceable.
         */
        public Builder expirationDate(JsonNullable<OffsetDateTime> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }


        /**
         * The date when the agreement is signed by all parties, making it officially binding. This is not
         * necessarily the same as the effective date.
         */
        public Builder executionDate(OffsetDateTime executionDate) {
            Utils.checkNotNull(executionDate, "executionDate");
            this.executionDate = JsonNullable.of(executionDate);
            return this;
        }

        /**
         * The date when the agreement is signed by all parties, making it officially binding. This is not
         * necessarily the same as the effective date.
         */
        public Builder executionDate(JsonNullable<OffsetDateTime> executionDate) {
            Utils.checkNotNull(executionDate, "executionDate");
            this.executionDate = executionDate;
            return this;
        }


        /**
         * Overall duration of the agreement.
         */
        public Builder termLength(String termLength) {
            Utils.checkNotNull(termLength, "termLength");
            this.termLength = JsonNullable.of(termLength);
            return this;
        }

        /**
         * Overall duration of the agreement.
         */
        public Builder termLength(JsonNullable<String> termLength) {
            Utils.checkNotNull(termLength, "termLength");
            this.termLength = termLength;
            return this;
        }

        public Provisions build() {
            if (paymentTermsDueDate == null) {
                paymentTermsDueDate = _SINGLETON_VALUE_PaymentTermsDueDate.value();
            }

            return new Provisions(
                assignmentType, assignmentChangeOfControl, assignmentTerminationRights,
                confidentialityObligationPeriod, governingLaw, jurisdiction,
                ndaType, annualAgreementValue, annualAgreementValueCurrencyCode,
                totalAgreementValue, totalAgreementValueCurrencyCode, paymentTermsDueDate,
                canChargeLatePaymentFees, latePaymentFeePercent, liabilityCapFixedAmount,
                liabilityCapCurrencyCode, liabilityCapMultiplier, liabilityCapDuration,
                priceCapPercentIncrease, renewalType, renewalNoticePeriod,
                renewalNoticeDate, autoRenewalTermLength, renewalExtensionPeriod,
                renewalProcessOwner, renewalAdditionalInfo, terminationPeriodForCause,
                terminationPeriodForConvenience, effectiveDate, expirationDate,
                executionDate, termLength);
        }


        private static final LazySingletonValue<Optional<? extends PaymentTermsDueDate>> _SINGLETON_VALUE_PaymentTermsDueDate =
                new LazySingletonValue<>(
                        "payment_terms_due_date",
                        "\"OTHER\"",
                        new TypeReference<Optional<? extends PaymentTermsDueDate>>() {});
    }
}
