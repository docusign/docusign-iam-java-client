/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.operations;

import com.docusign.iam.sdk.utils.LazySingletonValue;
import com.docusign.iam.sdk.utils.SpeakeasyMetadata;
import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class GetAgreementsListRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private Optional<String> accountId;

    /**
     * The maximum number of items that can be returned in a single page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private JsonNullable<Integer> limit;

    /**
     * An opaque token that helps retrieve the a page of data.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ctoken")
    private JsonNullable<String> ctoken;

    @JsonCreator
    public GetAgreementsListRequest(
            Optional<String> accountId,
            JsonNullable<Integer> limit,
            JsonNullable<String> ctoken) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(ctoken, "ctoken");
        this.accountId = accountId;
        this.limit = limit;
        this.ctoken = ctoken;
    }
    
    public GetAgreementsListRequest() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public Optional<String> accountId() {
        return accountId;
    }

    /**
     * The maximum number of items that can be returned in a single page.
     */
    @JsonIgnore
    public JsonNullable<Integer> limit() {
        return limit;
    }

    /**
     * An opaque token that helps retrieve the a page of data.
     */
    @JsonIgnore
    public JsonNullable<String> ctoken() {
        return ctoken;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public GetAgreementsListRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = Optional.ofNullable(accountId);
        return this;
    }

    public GetAgreementsListRequest withAccountId(Optional<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The maximum number of items that can be returned in a single page.
     */
    public GetAgreementsListRequest withLimit(int limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

    /**
     * The maximum number of items that can be returned in a single page.
     */
    public GetAgreementsListRequest withLimit(JsonNullable<Integer> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * An opaque token that helps retrieve the a page of data.
     */
    public GetAgreementsListRequest withCtoken(String ctoken) {
        Utils.checkNotNull(ctoken, "ctoken");
        this.ctoken = JsonNullable.of(ctoken);
        return this;
    }

    /**
     * An opaque token that helps retrieve the a page of data.
     */
    public GetAgreementsListRequest withCtoken(JsonNullable<String> ctoken) {
        Utils.checkNotNull(ctoken, "ctoken");
        this.ctoken = ctoken;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAgreementsListRequest other = (GetAgreementsListRequest) o;
        return 
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.ctoken, other.ctoken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountId,
            limit,
            ctoken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAgreementsListRequest.class,
                "accountId", accountId,
                "limit", limit,
                "ctoken", ctoken);
    }
    
    public final static class Builder {
 
        private Optional<String> accountId;
 
        private JsonNullable<Integer> limit = JsonNullable.undefined();
 
        private JsonNullable<String> ctoken = JsonNullable.undefined();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        public Builder accountId(Optional<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * The maximum number of items that can be returned in a single page.
         */
        public Builder limit(int limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = JsonNullable.of(limit);
            return this;
        }

        /**
         * The maximum number of items that can be returned in a single page.
         */
        public Builder limit(JsonNullable<Integer> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * An opaque token that helps retrieve the a page of data.
         */
        public Builder ctoken(String ctoken) {
            Utils.checkNotNull(ctoken, "ctoken");
            this.ctoken = JsonNullable.of(ctoken);
            return this;
        }

        /**
         * An opaque token that helps retrieve the a page of data.
         */
        public Builder ctoken(JsonNullable<String> ctoken) {
            Utils.checkNotNull(ctoken, "ctoken");
            this.ctoken = ctoken;
            return this;
        }
        
        public GetAgreementsListRequest build() {
            if (accountId == null) {
                accountId = _SINGLETON_VALUE_AccountId.value();
            }
            return new GetAgreementsListRequest(
                accountId,
                limit,
                ctoken);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_AccountId =
                new LazySingletonValue<>(
                        "accountId",
                        "\"00000000-0000-0000-0000-000000000000\"",
                        new TypeReference<Optional<String>>() {});
    }
}
