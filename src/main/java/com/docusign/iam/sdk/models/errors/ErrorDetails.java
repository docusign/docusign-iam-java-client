/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package com.docusign.iam.sdk.models.errors;

import com.docusign.iam.sdk.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ErrorDetails
 * 
 * <p>The error response object for the Workspaces API
 */
@SuppressWarnings("serial")
public class ErrorDetails extends RuntimeException {
    /**
     * A brief message describing the error condition
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private JsonNullable<String> message;

    /**
     * A standardized code that generalizes the specific error
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code")
    private JsonNullable<String> errorCode;

    @JsonCreator
    public ErrorDetails(
            @JsonProperty("message") JsonNullable<String> message,
            @JsonProperty("error_code") JsonNullable<String> errorCode) {
        super("API error occurred");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(errorCode, "errorCode");
        this.message = message;
        this.errorCode = errorCode;
    }
    
    public ErrorDetails() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A brief message describing the error condition
     */
    @JsonIgnore
    public JsonNullable<String> message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    /**
     * A standardized code that generalizes the specific error
     */
    @JsonIgnore
    public JsonNullable<String> errorCode() {
        return errorCode;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A brief message describing the error condition
     */
    public ErrorDetails withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = JsonNullable.of(message);
        return this;
    }

    /**
     * A brief message describing the error condition
     */
    public ErrorDetails withMessage(JsonNullable<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * A standardized code that generalizes the specific error
     */
    public ErrorDetails withErrorCode(String errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = JsonNullable.of(errorCode);
        return this;
    }

    /**
     * A standardized code that generalizes the specific error
     */
    public ErrorDetails withErrorCode(JsonNullable<String> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorDetails other = (ErrorDetails) o;
        return 
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.errorCode, other.errorCode);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            message, errorCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorDetails.class,
                "message", message,
                "errorCode", errorCode);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private JsonNullable<String> message = JsonNullable.undefined();

        private JsonNullable<String> errorCode = JsonNullable.undefined();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * A brief message describing the error condition
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = JsonNullable.of(message);
            return this;
        }

        /**
         * A brief message describing the error condition
         */
        public Builder message(JsonNullable<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }


        /**
         * A standardized code that generalizes the specific error
         */
        public Builder errorCode(String errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = JsonNullable.of(errorCode);
            return this;
        }

        /**
         * A standardized code that generalizes the specific error
         */
        public Builder errorCode(JsonNullable<String> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        public ErrorDetails build() {

            return new ErrorDetails(
                message, errorCode);
        }

    }
}

